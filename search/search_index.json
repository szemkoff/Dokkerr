{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Implementation Status","text":""},{"location":"#status-definitions","title":"Status Definitions","text":"<ul> <li>\u2705 Completed: Feature is fully implemented and tested</li> <li>\ud83d\udea7 In Progress: Feature is currently being developed</li> <li>\ud83d\udcc5 Planned: Feature is documented and planned for development</li> <li>\u274c Not Started: Feature is documented but development hasn't begun</li> </ul>"},{"location":"#core-features-status","title":"Core Features Status","text":""},{"location":"#user-management","title":"User Management","text":"Feature Status Notes User Registration \u2705 Basic registration implemented Email Verification \u2705 Using SendGrid for emails Profile Management \ud83d\udea7 Profile photo upload pending User Types \u2705 Basic role system implemented Multi-factor Auth \u274c Planned for Phase 2"},{"location":"#dock-management","title":"Dock Management","text":"Feature Status Notes Dock Listing \u2705 Basic listing creation works Availability Calendar \ud83d\udea7 Calendar integration in progress Pricing Management \ud83d\udea7 Dynamic pricing implementation in progress Maintenance Tracking \u274c Design completed Location Management \u2705 Basic location structure implemented"},{"location":"#booking-system","title":"Booking System","text":"Feature Status Notes Reservation System \u2705 Basic booking implemented Payment Processing \u2705 Basic payment flow works Cancellation Policy \ud83d\udea7 Policy management in progress Booking Confirmation \u2705 Email notifications working Refund System \u274c Not implemented yet"},{"location":"#payment-system","title":"Payment System","text":"Feature Status Notes Payment Processing \ud83d\udea7 In development Invoice Generation \ud83d\udea7 Basic flow implemented Refund Processing \u274c Not started Payment History \u274c Not started Transaction Logs \ud83d\udea7 Basic logging implemented"},{"location":"#communication","title":"Communication","text":"Feature Status Notes In-app Messaging \u274c Planned for Phase 2 Email Notifications \u2705 Basic notifications working Push Notifications \u274c Not started Audit System \ud83d\udea7 Basic implementation in progress"},{"location":"#deployment-plan","title":"Deployment Plan","text":""},{"location":"#phase-1-current","title":"Phase 1 (Current)","text":"<p>Status: \ud83d\udea7 In Progress - Core user management - Basic dock operations - Simple booking flow - Essential security features</p>"},{"location":"#phase-2-next","title":"Phase 2 (Next)","text":"<p>Status: \ud83d\udcc5 Planned - Complete payment system - Messaging system - Enhanced booking features - Mobile app beta</p>"},{"location":"#phase-3-future","title":"Phase 3 (Future)","text":"<p>Status: \ud83d\udcc5 Planned - Advanced booking features - Real-time notifications - Analytics dashboard - Enhanced mobile features</p>"},{"location":"#recent-updates","title":"Recent Updates","text":"Date Feature Status Change Notes 2024-03-07 User Types \u2705 Completed Basic role system implemented 2024-03-07 Payment Processing \ud83d\udea7 In Progress Started payment integration 2024-03-07 Dock Listing \ud83d\udea7 In Progress Enhanced listing features started"},{"location":"#documentation-sections","title":"Documentation Sections","text":""},{"location":"#for-users","title":"For Users","text":"<ul> <li>User Guide - Complete guide for users</li> <li>Dock Owner Guide - Guide for dock owners</li> <li>Renter Guide - Guide for renters</li> </ul>"},{"location":"#for-developers","title":"For Developers","text":"<ul> <li> <p>API Reference - Complete API documentation</p> </li> <li> <p>Contributing - How to contribute</p> </li> <li>Testing Guide - Testing procedures</li> </ul>"},{"location":"#technical-documentation","title":"Technical Documentation","text":"<ul> <li>Architecture - System architecture</li> <li>Database Schema - Data structure</li> <li>API Endpoints - API documentation</li> <li>WebSocket - Real-time features</li> </ul>"},{"location":"#operations","title":"Operations","text":"<ul> <li>Deployment - Deployment procedures</li> <li>Monitoring - System monitoring</li> <li>Maintenance - System maintenance</li> <li>Scaling - Scaling guidelines</li> </ul>"},{"location":"#security","title":"Security","text":"<ul> <li>Overview - Security architecture</li> <li>Authentication - Auth system</li> <li>Data Protection - Data security</li> <li>Compliance - Compliance requirements</li> </ul>"},{"location":"#support-resources","title":"Support Resources","text":"<ul> <li>Troubleshooting</li> <li>FAQ</li> <li>System Status</li> <li>Support Portal</li> </ul>"},{"location":"#contributing","title":"Contributing","text":"<ul> <li>Contributing Guide</li> <li>Code Style Guide</li> <li>Git Workflow</li> <li>Release Process </li> </ul>"},{"location":"user-guide/","title":"user guide","text":"<p>This page is under construction.</p>"},{"location":"api/endpoints/","title":"API Endpoints","text":""},{"location":"api/endpoints/#slips","title":"Slips","text":""},{"location":"api/endpoints/#list-slips","title":"List Slips","text":"<pre><code>GET /v1/slips\n</code></pre>"},{"location":"api/endpoints/#get-slip","title":"Get Slip","text":"<pre><code>GET /v1/slips/{slip_id}\n</code></pre>"},{"location":"api/endpoints/#create-booking","title":"Create Booking","text":"<pre><code>POST /v1/bookings\n\n{\n  \"slip_id\": \"slip_123\",\n  \"start_date\": \"2024-04-01\",\n  \"end_date\": \"2024-04-07\"\n}\n</code></pre>"},{"location":"api/endpoints/#process-payment","title":"Process Payment","text":"<pre><code>POST /v1/payments\n\n{\n  \"booking_id\": \"book_123\",\n  \"amount\": 1000,\n  \"currency\": \"USD\"\n}\n</code></pre> <p>For more details, see our API Reference.</p>"},{"location":"api/overview/","title":"API Overview","text":"<p>Dokkerr provides a RESTful API that enables you to integrate our platform into your applications.</p>"},{"location":"api/overview/#authentication","title":"Authentication","text":"<p>All API requests require authentication using API keys. You can generate API keys in your dashboard.</p> <pre><code>curl -H \"Authorization: Bearer YOUR_API_KEY\" \\\n  https://api.dockrent.com/v1/slips\n</code></pre>"},{"location":"api/overview/#rate-limiting","title":"Rate Limiting","text":"<ul> <li>Free tier: 1000 requests/hour</li> <li>Pro tier: 10000 requests/hour</li> <li>Enterprise: Custom limits</li> </ul>"},{"location":"api/overview/#endpoints","title":"Endpoints","text":"<ul> <li><code>/v1/slips</code> - Manage slip inventory</li> <li><code>/v1/bookings</code> - Handle reservations</li> <li><code>/v1/payments</code> - Process payments</li> <li><code>/v1/users</code> - User management</li> </ul> <p>See Endpoints for detailed documentation.</p>"},{"location":"architecture/components/","title":"Components","text":"<p>~# Components</p>"},{"location":"architecture/components/#core-components-overview","title":"Core Components Overview","text":"<pre><code>graph TB\n    subgraph Frontend\n        Web[Web Interface]\n        Mobile[Mobile Apps]\n        CLI[CLI Tool]\n    end\n\n    subgraph Backend\n        API[API Gateway]\n        Auth[Auth Service]\n        Container[Container Service]\n        User[User Service]\n        Monitor[Monitor Service]\n    end\n\n    subgraph Data\n        DB[(Database)]\n        Cache[(Cache)]\n        Queue[(Message Queue)]\n    end\n\n    Web --&gt; API\n    Mobile --&gt; API\n    CLI --&gt; API\n\n    API --&gt; Auth\n    API --&gt; Container\n    API --&gt; User\n    API --&gt; Monitor\n\n    Auth --&gt; DB\n    Container --&gt; DB\n    User --&gt; DB\n    Monitor --&gt; DB\n\n    Auth --&gt; Cache\n    Container --&gt; Cache\n    User --&gt; Cache\n    Monitor --&gt; Cache\n\n    Container --&gt; Queue\n    Monitor --&gt; Queue</code></pre>"},{"location":"architecture/components/#frontend-components","title":"Frontend Components","text":""},{"location":"architecture/components/#web-interface","title":"Web Interface","text":"<ul> <li>Technology: React + TypeScript</li> <li>State Management: Redux</li> <li>Styling: Tailwind CSS</li> <li>Build Tool: Vite</li> <li>Testing: Jest + React Testing Library</li> </ul>"},{"location":"architecture/components/#mobile-apps","title":"Mobile Apps","text":"<ul> <li>Framework: React Native</li> <li>State Management: Redux + AsyncStorage</li> <li>Navigation: React Navigation</li> <li>Native Features: Camera, Location, Push Notifications</li> <li>Testing: Jest + React Native Testing Library</li> </ul>"},{"location":"architecture/components/#cli-tool","title":"CLI Tool","text":"<ul> <li>Language: Node.js</li> <li>Command Framework: Commander.js</li> <li>Docker Integration: Docker SDK</li> <li>Configuration: YAML</li> <li>Testing: Mocha + Chai</li> </ul>"},{"location":"architecture/components/#backend-components","title":"Backend Components","text":""},{"location":"architecture/components/#api-gateway","title":"API Gateway","text":"<pre><code>interface APIGateway {\n  routes: Route[];\n  middleware: Middleware[];\n  rateLimit: RateLimitConfig;\n  auth: AuthConfig;\n  cors: CORSConfig;\n  logging: LogConfig;\n}\n</code></pre>"},{"location":"architecture/components/#auth-service","title":"Auth Service","text":"<pre><code>interface AuthService {\n  authenticate(credentials: Credentials): Promise&lt;Token&gt;;\n  authorize(token: Token, resource: Resource): Promise&lt;boolean&gt;;\n  refreshToken(token: Token): Promise&lt;Token&gt;;\n  revokeToken(token: Token): Promise&lt;void&gt;;\n  validateToken(token: Token): Promise&lt;TokenInfo&gt;;\n}\n</code></pre>"},{"location":"architecture/components/#container-service","title":"Container Service","text":"<pre><code>interface ContainerService {\n  createContainer(config: ContainerConfig): Promise&lt;Container&gt;;\n  startContainer(id: string): Promise&lt;void&gt;;\n  stopContainer(id: string): Promise&lt;void&gt;;\n  removeContainer(id: string): Promise&lt;void&gt;;\n  getContainerLogs(id: string): Promise&lt;Log[]&gt;;\n  getContainerStats(id: string): Promise&lt;Stats&gt;;\n}\n</code></pre>"},{"location":"architecture/components/#user-service","title":"User Service","text":"<pre><code>interface UserService {\n  createUser(data: UserData): Promise&lt;User&gt;;\n  updateUser(id: string, data: Partial&lt;UserData&gt;): Promise&lt;User&gt;;\n  deleteUser(id: string): Promise&lt;void&gt;;\n  getUserProfile(id: string): Promise&lt;UserProfile&gt;;\n  getUserSettings(id: string): Promise&lt;UserSettings&gt;;\n}\n</code></pre>"},{"location":"architecture/components/#monitor-service","title":"Monitor Service","text":"<pre><code>interface MonitorService {\n  collectMetrics(): Promise&lt;Metrics&gt;;\n  setAlerts(config: AlertConfig): Promise&lt;void&gt;;\n  getSystemHealth(): Promise&lt;HealthStatus&gt;;\n  getLogs(query: LogQuery): Promise&lt;Log[]&gt;;\n  getAlerts(): Promise&lt;Alert[]&gt;;\n}\n</code></pre>"},{"location":"architecture/components/#data-components","title":"Data Components","text":""},{"location":"architecture/components/#database-schema","title":"Database Schema","text":"<pre><code>interface Schema {\n  users: {\n    id: string;\n    email: string;\n    password: string;\n    role: UserRole;\n    settings: UserSettings;\n    createdAt: Date;\n    updatedAt: Date;\n  };\n\n  containers: {\n    id: string;\n    userId: string;\n    name: string;\n    image: string;\n    status: ContainerStatus;\n    config: ContainerConfig;\n    createdAt: Date;\n    updatedAt: Date;\n  };\n\n  teams: {\n    id: string;\n    name: string;\n    ownerId: string;\n    members: TeamMember[];\n    settings: TeamSettings;\n    createdAt: Date;\n    updatedAt: Date;\n  };\n}\n</code></pre>"},{"location":"architecture/components/#cache-structure","title":"Cache Structure","text":"<pre><code>interface CacheStructure {\n  sessions: Map&lt;string, Session&gt;;\n  containers: Map&lt;string, Container&gt;;\n  users: Map&lt;string, User&gt;;\n  settings: Map&lt;string, Settings&gt;;\n  metrics: Map&lt;string, Metrics&gt;;\n}\n</code></pre>"},{"location":"architecture/components/#message-queue-topics","title":"Message Queue Topics","text":"<pre><code>interface QueueTopics {\n  containerEvents: Topic&lt;ContainerEvent&gt;;\n  userEvents: Topic&lt;UserEvent&gt;;\n  systemEvents: Topic&lt;SystemEvent&gt;;\n  alerts: Topic&lt;Alert&gt;;\n  logs: Topic&lt;Log&gt;;\n}\n</code></pre>"},{"location":"architecture/components/#integration-components","title":"Integration Components","text":""},{"location":"architecture/components/#external-services","title":"External Services","text":"<pre><code>interface ExternalServices {\n  docker: DockerAPI;\n  storage: StorageAPI;\n  email: EmailService;\n  payment: PaymentService;\n  analytics: AnalyticsService;\n}\n</code></pre>"},{"location":"architecture/components/#webhooks","title":"Webhooks","text":"<pre><code>interface Webhooks {\n  endpoints: {\n    containerEvents: string;\n    userEvents: string;\n    systemEvents: string;\n  };\n  handlers: {\n    handleContainerEvent(event: ContainerEvent): Promise&lt;void&gt;;\n    handleUserEvent(event: UserEvent): Promise&lt;void&gt;;\n    handleSystemEvent(event: SystemEvent): Promise&lt;void&gt;;\n  };\n}\n</code></pre>"},{"location":"architecture/components/#security-components","title":"Security Components","text":""},{"location":"architecture/components/#authentication","title":"Authentication","text":"<pre><code>interface AuthComponents {\n  jwt: JWTService;\n  oauth: OAuthService;\n  mfa: MFAService;\n  passwordHash: PasswordService;\n  session: SessionService;\n}\n</code></pre>"},{"location":"architecture/components/#authorization","title":"Authorization","text":"<pre><code>interface AuthorizationComponents {\n  rbac: RBACService;\n  acl: ACLService;\n  policy: PolicyService;\n  audit: AuditService;\n}\n</code></pre>"},{"location":"architecture/components/#monitoring-components","title":"Monitoring Components","text":""},{"location":"architecture/components/#metrics-collection","title":"Metrics Collection","text":"<pre><code>interface MetricsComponents {\n  collectors: MetricCollector[];\n  storage: TimeSeriesDB;\n  aggregation: AggregationService;\n  alerting: AlertService;\n  dashboard: DashboardService;\n}\n</code></pre>"},{"location":"architecture/components/#logging","title":"Logging","text":"<pre><code>interface LoggingComponents {\n  loggers: Logger[];\n  transport: LogTransport;\n  storage: LogStorage;\n  search: LogSearch;\n  retention: RetentionPolicy;\n}\n</code></pre>"},{"location":"architecture/components/#testing-components","title":"Testing Components","text":""},{"location":"architecture/components/#unit-testing","title":"Unit Testing","text":"<pre><code>interface UnitTestComponents {\n  testRunner: TestRunner;\n  assertions: Assertions;\n  mocks: MockService;\n  fixtures: TestFixtures;\n  coverage: CoverageReporter;\n}\n</code></pre>"},{"location":"architecture/components/#integration-testing","title":"Integration Testing","text":"<pre><code>interface IntegrationTestComponents {\n  apiTests: APITestSuite;\n  dbTests: DBTestSuite;\n  e2eTests: E2ETestSuite;\n  performance: PerformanceTests;\n  security: SecurityTests;\n}\n</code></pre>"},{"location":"architecture/components/#deployment-components","title":"Deployment Components","text":""},{"location":"architecture/components/#infrastructure","title":"Infrastructure","text":"<pre><code>interface InfrastructureComponents {\n  kubernetes: K8sCluster;\n  loadBalancer: LoadBalancer;\n  cdn: CDNService;\n  backup: BackupService;\n  monitoring: MonitoringStack;\n}\n</code></pre>"},{"location":"architecture/components/#cicd","title":"CI/CD","text":"<pre><code>interface CICDComponents {\n  pipeline: Pipeline;\n  builds: BuildService;\n  tests: TestRunner;\n  deploy: DeployService;\n  rollback: RollbackService;\n}\n</code></pre>"},{"location":"architecture/components/#documentation-components","title":"Documentation Components","text":""},{"location":"architecture/components/#technical-docs","title":"Technical Docs","text":"<pre><code>interface TechnicalDocs {\n  api: APIReference;\n  architecture: ArchitectureDocs;\n  deployment: DeploymentGuide;\n  development: DevelopmentGuide;\n  security: SecurityDocs;\n}\n</code></pre>"},{"location":"architecture/components/#user-docs","title":"User Docs","text":"<pre><code>interface UserDocs {\n  userGuide: UserGuide;\n  tutorials: Tutorial[];\n  faq: FAQSection;\n  troubleshooting: TroubleshootingGuide;\n  release: ReleaseNotes;\n}\n</code></pre>"},{"location":"architecture/data-flow/","title":"Data Flow","text":""},{"location":"architecture/data-flow/#overview","title":"Overview","text":"<p>This document describes the data flow patterns within the Dokkerr platform, including request handling, data processing, and event propagation.</p>"},{"location":"architecture/data-flow/#request-flow","title":"Request Flow","text":"<pre><code>sequenceDiagram\n    participant C as Client\n    participant LB as Load Balancer\n    participant API as API Gateway\n    participant Auth as Auth Service\n    participant S as Service\n    participant Cache as Redis Cache\n    participant DB as Database\n\n    C-&gt;&gt;LB: HTTP Request\n    LB-&gt;&gt;API: Route Request\n    API-&gt;&gt;Auth: Validate Token\n    Auth-&gt;&gt;Cache: Check Token Cache\n    Cache--&gt;&gt;Auth: Token Status\n    Auth--&gt;&gt;API: Token Valid\n    API-&gt;&gt;S: Process Request\n    S-&gt;&gt;Cache: Check Data Cache\n    Cache--&gt;&gt;S: Cache Miss\n    S-&gt;&gt;DB: Query Data\n    DB--&gt;&gt;S: Data\n    S-&gt;&gt;Cache: Update Cache\n    S--&gt;&gt;API: Response\n    API--&gt;&gt;C: HTTP Response</code></pre>"},{"location":"architecture/data-flow/#data-processing-pipeline","title":"Data Processing Pipeline","text":""},{"location":"architecture/data-flow/#container-creation-flow","title":"Container Creation Flow","text":"<pre><code>graph TD\n    A[Request] --&gt; B[Validate Input]\n    B --&gt; C[Check Resources]\n    C --&gt; D[Create Container]\n    D --&gt; E[Configure Network]\n    E --&gt; F[Mount Volumes]\n    F --&gt; G[Start Container]\n    G --&gt; H[Update Database]\n    H --&gt; I[Send Notification]\n    I --&gt; J[Response]</code></pre>"},{"location":"architecture/data-flow/#event-processing-flow","title":"Event Processing Flow","text":"<pre><code>graph TD\n    A[Event Source] --&gt; B[Event Bus]\n    B --&gt; C[Event Handler]\n    C --&gt; D[Process Event]\n    D --&gt; E[Update State]\n    E --&gt; F[Notify Subscribers]\n    F --&gt; G[Log Event]</code></pre>"},{"location":"architecture/data-flow/#data-storage-patterns","title":"Data Storage Patterns","text":""},{"location":"architecture/data-flow/#write-path","title":"Write Path","text":"<ol> <li>Validate input data</li> <li>Apply business rules</li> <li>Write to primary database</li> <li>Invalidate cache</li> <li>Trigger events</li> <li>Update search index</li> </ol>"},{"location":"architecture/data-flow/#read-path","title":"Read Path","text":"<ol> <li>Check cache</li> <li>If cache miss, read from database</li> <li>Update cache</li> <li>Transform data</li> <li>Return response</li> </ol>"},{"location":"architecture/data-flow/#caching-strategy","title":"Caching Strategy","text":""},{"location":"architecture/data-flow/#multi-level-caching","title":"Multi-level Caching","text":"<pre><code>graph TD\n    A[Request] --&gt; B[API Cache]\n    B --&gt; C[Application Cache]\n    C --&gt; D[Database Cache]\n    D --&gt; E[Database]</code></pre>"},{"location":"architecture/data-flow/#cache-invalidation","title":"Cache Invalidation","text":"<ul> <li>Time-based expiration</li> <li>Event-based invalidation</li> <li>Manual purge</li> <li>Cascade invalidation</li> </ul>"},{"location":"architecture/data-flow/#event-flow","title":"Event Flow","text":""},{"location":"architecture/data-flow/#event-publishing","title":"Event Publishing","text":"<pre><code>sequenceDiagram\n    participant S as Service\n    participant B as Event Bus\n    participant H as Event Handlers\n    participant DB as Database\n    participant N as Notifications\n\n    S-&gt;&gt;B: Publish Event\n    B-&gt;&gt;H: Route Event\n    H-&gt;&gt;DB: Update State\n    H-&gt;&gt;N: Send Notifications</code></pre>"},{"location":"architecture/data-flow/#event-consumption","title":"Event Consumption","text":"<ul> <li>Message queues</li> <li>Pub/sub channels</li> <li>Webhooks</li> <li>WebSocket streams</li> </ul>"},{"location":"architecture/data-flow/#error-handling-flow","title":"Error Handling Flow","text":""},{"location":"architecture/data-flow/#error-processing","title":"Error Processing","text":"<pre><code>graph TD\n    A[Error Occurs] --&gt; B[Log Error]\n    B --&gt; C[Classify Error]\n    C --&gt; D[Handle Error]\n    D --&gt; E[Notify Admin]\n    E --&gt; F[Return Response]</code></pre>"},{"location":"architecture/data-flow/#recovery-flow","title":"Recovery Flow","text":"<ol> <li>Detect failure</li> <li>Log incident</li> <li>Attempt recovery</li> <li>Notify stakeholders</li> <li>Update status</li> </ol>"},{"location":"architecture/data-flow/#backup-flow","title":"Backup Flow","text":""},{"location":"architecture/data-flow/#data-backup","title":"Data Backup","text":"<pre><code>graph TD\n    A[Scheduler] --&gt; B[Initiate Backup]\n    B --&gt; C[Create Snapshot]\n    C --&gt; D[Compress Data]\n    D --&gt; E[Encrypt Backup]\n    E --&gt; F[Store Backup]\n    F --&gt; G[Verify Backup]\n    G --&gt; H[Update Metadata]</code></pre>"},{"location":"architecture/data-flow/#restore-flow","title":"Restore Flow","text":"<ol> <li>Select backup point</li> <li>Verify backup integrity</li> <li>Decrypt backup</li> <li>Restore data</li> <li>Verify restoration</li> <li>Update system state</li> </ol>"},{"location":"architecture/data-flow/#monitoring-flow","title":"Monitoring Flow","text":""},{"location":"architecture/data-flow/#metrics-collection","title":"Metrics Collection","text":"<pre><code>graph TD\n    A[System Metrics] --&gt; B[Collectors]\n    B --&gt; C[Aggregators]\n    C --&gt; D[Time Series DB]\n    D --&gt; E[Dashboards]\n    E --&gt; F[Alerts]</code></pre>"},{"location":"architecture/data-flow/#log-processing","title":"Log Processing","text":"<ol> <li>Generate logs</li> <li>Collect logs</li> <li>Parse logs</li> <li>Index logs</li> <li>Archive logs</li> <li>Query logs</li> </ol>"},{"location":"architecture/data-flow/#security-flow","title":"Security Flow","text":""},{"location":"architecture/data-flow/#authentication-flow","title":"Authentication Flow","text":"<pre><code>sequenceDiagram\n    participant U as User\n    participant A as Auth Service\n    participant D as Database\n    participant T as Token Service\n\n    U-&gt;&gt;A: Login Request\n    A-&gt;&gt;D: Verify Credentials\n    D--&gt;&gt;A: User Data\n    A-&gt;&gt;T: Generate Token\n    T--&gt;&gt;A: JWT Token\n    A--&gt;&gt;U: Auth Response</code></pre>"},{"location":"architecture/data-flow/#authorization-flow","title":"Authorization Flow","text":"<ol> <li>Extract token</li> <li>Validate token</li> <li>Check permissions</li> <li>Grant/deny access</li> <li>Log decision</li> </ol>"},{"location":"architecture/data-flow/#integration-flow","title":"Integration Flow","text":""},{"location":"architecture/data-flow/#external-service-integration","title":"External Service Integration","text":"<pre><code>graph TD\n    A[API Request] --&gt; B[Rate Limiter]\n    B --&gt; C[Transform Request]\n    C --&gt; D[Call Service]\n    D --&gt; E[Handle Response]\n    E --&gt; F[Transform Response]\n    F --&gt; G[Cache Result]\n    G --&gt; H[Return Response]</code></pre>"},{"location":"architecture/data-flow/#webhook-processing","title":"Webhook Processing","text":"<ol> <li>Receive webhook</li> <li>Validate signature</li> <li>Parse payload</li> <li>Process event</li> <li>Send response</li> <li>Log transaction</li> </ol>"},{"location":"architecture/data-flow/#data-migration-flow","title":"Data Migration Flow","text":""},{"location":"architecture/data-flow/#migration-process","title":"Migration Process","text":"<pre><code>graph TD\n    A[Plan Migration] --&gt; B[Backup Data]\n    B --&gt; C[Transform Data]\n    C --&gt; D[Validate Data]\n    D --&gt; E[Load Data]\n    E --&gt; F[Verify Migration]\n    F --&gt; G[Switch Over]\n    G --&gt; H[Cleanup]</code></pre>"},{"location":"architecture/data-flow/#rollback-process","title":"Rollback Process","text":"<ol> <li>Detect issues</li> <li>Stop migration</li> <li>Restore backup</li> <li>Verify state</li> <li>Resume operations</li> </ol>"},{"location":"architecture/data-flow/#deployment-flow","title":"Deployment Flow","text":""},{"location":"architecture/data-flow/#release-process","title":"Release Process","text":"<pre><code>graph TD\n    A[Build] --&gt; B[Test]\n    B --&gt; C[Stage]\n    C --&gt; D[Validate]\n    D --&gt; E[Deploy]\n    E --&gt; F[Monitor]\n    F --&gt; G[Rollback if needed]</code></pre>"},{"location":"architecture/data-flow/#configuration-flow","title":"Configuration Flow","text":"<ol> <li>Load config</li> <li>Validate config</li> <li>Apply config</li> <li>Verify config</li> <li>Update state </li> </ol>"},{"location":"architecture/design-patterns/","title":"Design Patterns","text":"<p>This page outlines the key design patterns used in the Dokkerr application architecture.</p>"},{"location":"architecture/design-patterns/#architectural-patterns","title":"Architectural Patterns","text":""},{"location":"architecture/design-patterns/#microservices","title":"Microservices","text":"<p>Dokkerr employs a microservices architecture to enable:</p> <ul> <li>Independent scaling of services based on demand</li> <li>Language and technology flexibility for different services</li> <li>Resilience through service isolation</li> <li>Faster development cycles through smaller, focused teams</li> </ul>"},{"location":"architecture/design-patterns/#event-driven-architecture","title":"Event-Driven Architecture","text":"<p>For asynchronous operations, we implement an event-driven approach:</p> <ul> <li>Services emit events when state changes occur</li> <li>Interested services subscribe to relevant events</li> <li>Reduces coupling between services</li> <li>Enables eventual consistency</li> </ul>"},{"location":"architecture/design-patterns/#design-patterns-by-category","title":"Design Patterns by Category","text":""},{"location":"architecture/design-patterns/#creational-patterns","title":"Creational Patterns","text":"Pattern Usage in Dokkerr Factory Method Creating different payment processor instances based on configuration Builder Complex booking object construction with optional parameters Singleton Configuration and logging services Dependency Injection Used throughout the application for testability and flexibility"},{"location":"architecture/design-patterns/#structural-patterns","title":"Structural Patterns","text":"Pattern Usage in Dokkerr Adapter Integration with third-party payment gateways Decorator Adding features to notification services (SMS, Email, Push) Facade Simplifying complex booking processes Proxy Caching for frequently accessed dock listings"},{"location":"architecture/design-patterns/#behavioral-patterns","title":"Behavioral Patterns","text":"Pattern Usage in Dokkerr Observer Notifying interested parties about booking status changes Strategy Different pricing strategies for seasonal and special events Chain of Responsibility Processing booking requests through validation, availability, and pricing checks State Managing booking lifecycle (requested, confirmed, active, completed, cancelled)"},{"location":"architecture/design-patterns/#mobile-app-patterns","title":"Mobile App Patterns","text":"<p>On the mobile front-end, we implement:</p> <ul> <li>Repository Pattern: For data access abstraction</li> <li>MVVM (Model-View-ViewModel): For separation of concerns</li> <li>Provider Pattern: For state management</li> </ul>"},{"location":"architecture/integration/","title":"Integration Guide","text":""},{"location":"architecture/integration/#overview","title":"Overview","text":"<p>This guide covers the integration points and patterns used in the Dokkerr platform, including APIs, webhooks, and external service integrations.</p>"},{"location":"architecture/integration/#api-integration","title":"API Integration","text":""},{"location":"architecture/integration/#rest-api","title":"REST API","text":"<pre><code>interface APIEndpoints {\n  // Container Management\n  'POST /api/v1/containers': CreateContainer;\n  'GET /api/v1/containers': ListContainers;\n  'GET /api/v1/containers/:id': GetContainer;\n  'PUT /api/v1/containers/:id': UpdateContainer;\n  'DELETE /api/v1/containers/:id': DeleteContainer;\n\n  // User Management\n  'POST /api/v1/users': CreateUser;\n  'GET /api/v1/users': ListUsers;\n  'GET /api/v1/users/:id': GetUser;\n  'PUT /api/v1/users/:id': UpdateUser;\n  'DELETE /api/v1/users/:id': DeleteUser;\n\n  // Authentication\n  'POST /api/v1/auth/login': Login;\n  'POST /api/v1/auth/logout': Logout;\n  'POST /api/v1/auth/refresh': RefreshToken;\n  'POST /api/v1/auth/reset-password': ResetPassword;\n}\n</code></pre>"},{"location":"architecture/integration/#websocket-api","title":"WebSocket API","text":"<pre><code>interface WebSocketEvents {\n  // Container Events\n  'container:created': ContainerCreated;\n  'container:updated': ContainerUpdated;\n  'container:deleted': ContainerDeleted;\n  'container:started': ContainerStarted;\n  'container:stopped': ContainerStopped;\n\n  // System Events\n  'system:alert': SystemAlert;\n  'system:metric': SystemMetric;\n  'system:log': SystemLog;\n\n  // User Events\n  'user:connected': UserConnected;\n  'user:disconnected': UserDisconnected;\n  'user:activity': UserActivity;\n}\n</code></pre>"},{"location":"architecture/integration/#external-service-integration","title":"External Service Integration","text":""},{"location":"architecture/integration/#docker-integration","title":"Docker Integration","text":"<pre><code>sequenceDiagram\n    participant C as Client\n    participant A as API\n    participant D as Docker API\n    participant R as Registry\n\n    C-&gt;&gt;A: Create Container\n    A-&gt;&gt;D: Pull Image\n    D-&gt;&gt;R: Get Image\n    R--&gt;&gt;D: Image Data\n    D--&gt;&gt;A: Image Ready\n    A-&gt;&gt;D: Create Container\n    D--&gt;&gt;A: Container Created\n    A--&gt;&gt;C: Success Response</code></pre>"},{"location":"architecture/integration/#cloud-provider-integration","title":"Cloud Provider Integration","text":"<pre><code>interface CloudProviders {\n  aws: {\n    s3: StorageService;\n    rds: DatabaseService;\n    sns: NotificationService;\n    cloudwatch: MonitoringService;\n  };\n\n  gcp: {\n    storage: StorageService;\n    sql: DatabaseService;\n    pubsub: NotificationService;\n    monitoring: MonitoringService;\n  };\n\n  azure: {\n    blob: StorageService;\n    sql: DatabaseService;\n    servicebus: NotificationService;\n    insights: MonitoringService;\n  };\n}\n</code></pre>"},{"location":"architecture/integration/#authentication-integration","title":"Authentication Integration","text":""},{"location":"architecture/integration/#oauth2-flow","title":"OAuth2 Flow","text":"<pre><code>sequenceDiagram\n    participant U as User\n    participant C as Client\n    participant A as Auth Server\n    participant R as Resource Server\n\n    U-&gt;&gt;C: Initiate Login\n    C-&gt;&gt;A: Authorization Request\n    A-&gt;&gt;U: Login Prompt\n    U-&gt;&gt;A: Credentials\n    A-&gt;&gt;C: Authorization Code\n    C-&gt;&gt;A: Token Request\n    A-&gt;&gt;C: Access Token\n    C-&gt;&gt;R: API Request + Token\n    R--&gt;&gt;C: Protected Resource</code></pre>"},{"location":"architecture/integration/#sso-integration","title":"SSO Integration","text":"<pre><code>interface SSOProviders {\n  google: {\n    clientId: string;\n    clientSecret: string;\n    redirectUri: string;\n    scope: string[];\n  };\n\n  github: {\n    clientId: string;\n    clientSecret: string;\n    redirectUri: string;\n    scope: string[];\n  };\n\n  microsoft: {\n    clientId: string;\n    clientSecret: string;\n    redirectUri: string;\n    scope: string[];\n  };\n}\n</code></pre>"},{"location":"architecture/integration/#webhook-integration","title":"Webhook Integration","text":""},{"location":"architecture/integration/#webhook-configuration","title":"Webhook Configuration","text":"<pre><code>interface WebhookConfig {\n  url: string;\n  secret: string;\n  events: string[];\n  retryPolicy: {\n    maxAttempts: number;\n    backoffMultiplier: number;\n    initialDelay: number;\n  };\n  timeout: number;\n}\n</code></pre>"},{"location":"architecture/integration/#event-payload","title":"Event Payload","text":"<pre><code>interface WebhookPayload {\n  id: string;\n  type: string;\n  timestamp: string;\n  data: Record&lt;string, any&gt;;\n  signature: string;\n}\n</code></pre>"},{"location":"architecture/integration/#monitoring-integration","title":"Monitoring Integration","text":""},{"location":"architecture/integration/#metrics-integration","title":"Metrics Integration","text":"<pre><code>graph TD\n    A[Application Metrics] --&gt; P[Prometheus]\n    P --&gt; G[Grafana]\n\n    B[Business Metrics] --&gt; S[StatsD]\n    S --&gt; P\n\n    C[Custom Metrics] --&gt; P\n\n    P --&gt; AL[Alertmanager]\n    AL --&gt; N[Notification Services]</code></pre>"},{"location":"architecture/integration/#logging-integration","title":"Logging Integration","text":"<pre><code>interface LoggingIntegration {\n  elasticsearch: {\n    node: string;\n    auth: {\n      username: string;\n      password: string;\n    };\n    index: string;\n  };\n\n  logstash: {\n    host: string;\n    port: number;\n    protocol: 'udp' | 'tcp';\n  };\n\n  kibana: {\n    host: string;\n    dashboards: string[];\n  };\n}\n</code></pre>"},{"location":"architecture/integration/#storage-integration","title":"Storage Integration","text":""},{"location":"architecture/integration/#object-storage","title":"Object Storage","text":"<pre><code>interface StorageIntegration {\n  provider: 'aws' | 'gcp' | 'azure';\n  bucket: string;\n  region: string;\n  credentials: {\n    accessKey: string;\n    secretKey: string;\n  };\n  options: {\n    encryption: boolean;\n    compression: boolean;\n    caching: boolean;\n  };\n}\n</code></pre>"},{"location":"architecture/integration/#database-integration","title":"Database Integration","text":"<pre><code>interface DatabaseIntegration {\n  primary: {\n    host: string;\n    port: number;\n    database: string;\n    user: string;\n    password: string;\n    ssl: boolean;\n  };\n\n  replicas: {\n    host: string;\n    port: number;\n    database: string;\n    user: string;\n    password: string;\n    ssl: boolean;\n  }[];\n}\n</code></pre>"},{"location":"architecture/integration/#message-queue-integration","title":"Message Queue Integration","text":""},{"location":"architecture/integration/#queue-configuration","title":"Queue Configuration","text":"<pre><code>interface QueueConfig {\n  rabbitmq: {\n    host: string;\n    port: number;\n    username: string;\n    password: string;\n    vhost: string;\n  };\n\n  exchanges: {\n    name: string;\n    type: 'direct' | 'fanout' | 'topic';\n    options: {\n      durable: boolean;\n      autoDelete: boolean;\n    };\n  }[];\n\n  queues: {\n    name: string;\n    options: {\n      durable: boolean;\n      deadLetterExchange: string;\n      maxLength: number;\n    };\n  }[];\n}\n</code></pre>"},{"location":"architecture/integration/#message-format","title":"Message Format","text":"<pre><code>interface Message {\n  id: string;\n  type: string;\n  data: any;\n  metadata: {\n    timestamp: string;\n    source: string;\n    correlationId: string;\n  };\n  options: {\n    priority: number;\n    expiration: number;\n    persistent: boolean;\n  };\n}\n</code></pre>"},{"location":"architecture/integration/#cache-integration","title":"Cache Integration","text":""},{"location":"architecture/integration/#cache-configuration","title":"Cache Configuration","text":"<pre><code>interface CacheConfig {\n  redis: {\n    host: string;\n    port: number;\n    password: string;\n    db: number;\n  };\n\n  cluster: {\n    nodes: {\n      host: string;\n      port: number;\n    }[];\n    options: {\n      maxRedirections: number;\n      retryDelay: number;\n    };\n  };\n\n  options: {\n    ttl: number;\n    maxSize: number;\n    compression: boolean;\n  };\n}\n</code></pre>"},{"location":"architecture/integration/#email-integration","title":"Email Integration","text":""},{"location":"architecture/integration/#email-configuration","title":"Email Configuration","text":"<pre><code>interface EmailConfig {\n  provider: 'smtp' | 'sendgrid' | 'ses';\n\n  smtp?: {\n    host: string;\n    port: number;\n    secure: boolean;\n    auth: {\n      user: string;\n      pass: string;\n    };\n  };\n\n  sendgrid?: {\n    apiKey: string;\n    templates: Record&lt;string, string&gt;;\n  };\n\n  ses?: {\n    accessKey: string;\n    secretKey: string;\n    region: string;\n  };\n}\n</code></pre>"},{"location":"architecture/integration/#integration-best-practices","title":"Integration Best Practices","text":""},{"location":"architecture/integration/#security","title":"Security","text":"<ul> <li>Use HTTPS/TLS for all communications</li> <li>Implement proper authentication</li> <li>Validate all inputs</li> <li>Use secure credentials storage</li> <li>Implement rate limiting</li> </ul>"},{"location":"architecture/integration/#reliability","title":"Reliability","text":"<ul> <li>Implement retry mechanisms</li> <li>Use circuit breakers</li> <li>Monitor integration health</li> <li>Implement fallback mechanisms</li> <li>Handle errors gracefully</li> </ul>"},{"location":"architecture/integration/#performance","title":"Performance","text":"<ul> <li>Use connection pooling</li> <li>Implement caching</li> <li>Optimize payload sizes</li> <li>Use async operations</li> <li>Monitor performance metrics</li> </ul>"},{"location":"architecture/integration/#maintenance","title":"Maintenance","text":"<ul> <li>Version all integrations</li> <li>Document all endpoints</li> <li>Monitor usage patterns</li> <li>Regular security audits</li> <li>Keep dependencies updated </li> </ul>"},{"location":"architecture/overview/","title":"System Architecture Overview","text":"<p>The Dokkerr platform is built on a modern, scalable architecture designed to handle Docker container management efficiently and securely. This document provides a high-level overview of the system architecture and its key components.</p>"},{"location":"architecture/overview/#architecture-diagram","title":"Architecture Diagram","text":"<pre><code>graph TD\n    Client[Client Applications] --&gt; API[API Gateway]\n    API --&gt; Auth[Authentication Service]\n    API --&gt; Container[Container Service]\n    API --&gt; User[User Service]\n    API --&gt; Monitor[Monitoring Service]\n\n    Container --&gt; Docker[Docker Engine]\n    Container --&gt; Registry[Container Registry]\n\n    Monitor --&gt; Metrics[Metrics Database]\n    Monitor --&gt; Alerts[Alert System]\n\n    subgraph Data Layer\n        DB[(Main Database)]\n        Cache[(Redis Cache)]\n        Storage[(Object Storage)]\n    end\n\n    Auth --&gt; DB\n    Container --&gt; DB\n    User --&gt; DB\n    Monitor --&gt; DB\n\n    Container --&gt; Cache\n    User --&gt; Cache\n\n    Container --&gt; Storage\n    User --&gt; Storage</code></pre>"},{"location":"architecture/overview/#core-components","title":"Core Components","text":""},{"location":"architecture/overview/#1-api-gateway","title":"1. API Gateway","text":"<ul> <li>Central entry point for all client requests</li> <li>Request routing and load balancing</li> <li>Rate limiting and throttling</li> <li>API versioning</li> <li>Request/response transformation</li> </ul>"},{"location":"architecture/overview/#2-authentication-service","title":"2. Authentication Service","text":"<ul> <li>User authentication and authorization</li> <li>JWT token management</li> <li>OAuth2 integration</li> <li>Role-based access control (RBAC)</li> <li>Session management</li> </ul>"},{"location":"architecture/overview/#3-container-service","title":"3. Container Service","text":"<ul> <li>Docker container lifecycle management</li> <li>Container orchestration</li> <li>Image management</li> <li>Network configuration</li> <li>Volume management</li> </ul>"},{"location":"architecture/overview/#4-user-service","title":"4. User Service","text":"<ul> <li>User account management</li> <li>Profile management</li> <li>Preferences and settings</li> <li>Team and organization management</li> <li>Billing integration</li> </ul>"},{"location":"architecture/overview/#5-monitoring-service","title":"5. Monitoring Service","text":"<ul> <li>Real-time container metrics</li> <li>System health monitoring</li> <li>Resource usage tracking</li> <li>Alert management</li> <li>Performance analytics</li> </ul>"},{"location":"architecture/overview/#data-layer","title":"Data Layer","text":""},{"location":"architecture/overview/#main-database-postgresql","title":"Main Database (PostgreSQL)","text":"<ul> <li>User data</li> <li>Container configurations</li> <li>System settings</li> <li>Audit logs</li> <li>Metrics history</li> </ul>"},{"location":"architecture/overview/#cache-layer-redis","title":"Cache Layer (Redis)","text":"<ul> <li>Session data</li> <li>Frequently accessed configurations</li> <li>Rate limiting data</li> <li>Real-time metrics</li> </ul>"},{"location":"architecture/overview/#object-storage-s3","title":"Object Storage (S3)","text":"<ul> <li>Container images</li> <li>Backup files</li> <li>User uploads</li> <li>System logs</li> </ul>"},{"location":"architecture/overview/#security-architecture","title":"Security Architecture","text":""},{"location":"architecture/overview/#authentication","title":"Authentication","text":"<ul> <li>JWT-based authentication</li> <li>Multi-factor authentication</li> <li>OAuth2 provider integration</li> <li>Session management</li> <li>API key management</li> </ul>"},{"location":"architecture/overview/#authorization","title":"Authorization","text":"<ul> <li>Role-based access control (RBAC)</li> <li>Resource-level permissions</li> <li>Team-based access</li> <li>API scope control</li> <li>Audit logging</li> </ul>"},{"location":"architecture/overview/#network-security","title":"Network Security","text":"<ul> <li>TLS encryption</li> <li>Network isolation</li> <li>Container network policies</li> <li>Firewall rules</li> <li>DDoS protection</li> </ul>"},{"location":"architecture/overview/#scalability","title":"Scalability","text":""},{"location":"architecture/overview/#horizontal-scaling","title":"Horizontal Scaling","text":"<ul> <li>Containerized microservices</li> <li>Load balancer configuration</li> <li>Database replication</li> <li>Cache clustering</li> <li>Storage distribution</li> </ul>"},{"location":"architecture/overview/#performance-optimization","title":"Performance Optimization","text":"<ul> <li>Query optimization</li> <li>Cache strategies</li> <li>Connection pooling</li> <li>Resource allocation</li> <li>Load distribution</li> </ul>"},{"location":"architecture/overview/#monitoring-logging","title":"Monitoring &amp; Logging","text":""},{"location":"architecture/overview/#system-monitoring","title":"System Monitoring","text":"<ul> <li>Container health checks</li> <li>Resource utilization</li> <li>Performance metrics</li> <li>Error tracking</li> <li>Uptime monitoring</li> </ul>"},{"location":"architecture/overview/#logging-system","title":"Logging System","text":"<ul> <li>Centralized logging</li> <li>Log aggregation</li> <li>Search capabilities</li> <li>Retention policies</li> <li>Audit trails</li> </ul>"},{"location":"architecture/overview/#deployment-architecture","title":"Deployment Architecture","text":""},{"location":"architecture/overview/#container-orchestration","title":"Container Orchestration","text":"<ul> <li>Kubernetes integration</li> <li>Service discovery</li> <li>Auto-scaling</li> <li>Rolling updates</li> <li>Health checks</li> </ul>"},{"location":"architecture/overview/#cicd-pipeline","title":"CI/CD Pipeline","text":"<ul> <li>Automated testing</li> <li>Continuous integration</li> <li>Deployment automation</li> <li>Version control</li> <li>Environment management</li> </ul>"},{"location":"architecture/overview/#integration-points","title":"Integration Points","text":""},{"location":"architecture/overview/#external-services","title":"External Services","text":"<ul> <li>Container registries</li> <li>Cloud providers</li> <li>Monitoring services</li> <li>Authentication providers</li> <li>Storage services</li> </ul>"},{"location":"architecture/overview/#apis-and-webhooks","title":"APIs and Webhooks","text":"<ul> <li>RESTful APIs</li> <li>WebSocket connections</li> <li>Event webhooks</li> <li>Service integrations</li> <li>Custom extensions</li> </ul>"},{"location":"architecture/overview/#best-practices","title":"Best Practices","text":""},{"location":"architecture/overview/#development","title":"Development","text":"<ul> <li>Code standards</li> <li>Testing requirements</li> <li>Documentation</li> <li>Version control</li> <li>Code review process</li> </ul>"},{"location":"architecture/overview/#operations","title":"Operations","text":"<ul> <li>Backup procedures</li> <li>Disaster recovery</li> <li>Security updates</li> <li>Performance tuning</li> <li>Incident response</li> </ul>"},{"location":"architecture/overview/#future-considerations","title":"Future Considerations","text":""},{"location":"architecture/overview/#planned-improvements","title":"Planned Improvements","text":"<ul> <li>Enhanced monitoring</li> <li>Advanced analytics</li> <li>Additional integrations</li> <li>Security enhancements</li> <li>Performance optimizations</li> </ul>"},{"location":"architecture/overview/#scalability-plans","title":"Scalability Plans","text":"<ul> <li>Multi-region support</li> <li>Enhanced caching</li> <li>Database sharding</li> <li>Load distribution</li> <li>Resource optimization </li> </ul>"},{"location":"architecture/scalability/","title":"Scalability","text":"<p>This page details the scalability considerations and implementation in the Dokkerr application.</p>"},{"location":"architecture/scalability/#scalability-approach","title":"Scalability Approach","text":"<p>Dokkerr is designed with scalability as a core architectural principle to handle growing numbers of users, listings, and transactions. Our approach focuses on:</p> <ul> <li>Horizontal Scalability: Adding more instances rather than upgrading existing ones</li> <li>Vertical Scalability: Strategic resource increases for specific components</li> <li>Data Partitioning: Sharding and intelligent data distribution</li> <li>Caching Strategy: Multi-level caching to reduce database load</li> </ul>"},{"location":"architecture/scalability/#load-balancing","title":"Load Balancing","text":"<p>Our load balancing strategy includes:</p> <ul> <li>Layer 7 Load Balancing: For HTTP-aware traffic distribution</li> <li>Health Checks: Automatic removal of unhealthy instances</li> <li>Session Affinity: When needed for specific use cases</li> <li>Geographic Distribution: Using AWS Global Accelerator for reduced latency</li> </ul>"},{"location":"architecture/scalability/#database-scaling","title":"Database Scaling","text":"<p>Dokkerr employs several techniques to scale database operations:</p>"},{"location":"architecture/scalability/#read-replicas","title":"Read Replicas","text":"<p>For read-heavy operations like searching for dock listings:</p> <ul> <li>Multiple read replicas distribute query load</li> <li>Primary database handles writes only</li> <li>Replicas are added based on read-to-write ratio monitoring</li> </ul>"},{"location":"architecture/scalability/#sharding-strategy","title":"Sharding Strategy","text":"<p>For handling large data volumes:</p> <ul> <li>Geographic sharding for dock listings (by region/location)</li> <li>User data sharded by user ID ranges</li> <li>Booking history sharded by time periods</li> </ul>"},{"location":"architecture/scalability/#nosql-for-specific-workloads","title":"NoSQL for Specific Workloads","text":"<ul> <li>MongoDB for dock listing catalog (flexible schema, geospatial queries)</li> <li>Redis for session management and caching</li> <li>Elasticsearch for full-text search capabilities</li> </ul>"},{"location":"architecture/scalability/#autoscaling-policies","title":"Autoscaling Policies","text":"<p>Dokkerr's infrastructure automatically scales based on::</p> Metric Scale Out Threshold Scale In Threshold Cooldown Period CPU Utilization &gt;70% for 3 minutes &lt;30% for 10 minutes 5 minutes Request Count &gt;1000 req/sec for 2 minutes &lt;500 req/sec for 15 minutes 3 minutes Database Connections &gt;80% of max connections &lt;40% of max connections 10 minutes"},{"location":"architecture/scalability/#caching-strategy","title":"Caching Strategy","text":""},{"location":"architecture/scalability/#multi-level-caching","title":"Multi-level Caching","text":""},{"location":"architecture/scalability/#cache-invalidation","title":"Cache Invalidation","text":"<p>We implement different invalidation strategies based on data type:</p> <ul> <li>TTL (Time-To-Live): For dock availability and pricing</li> <li>Write-Through: For user profiles and preferences</li> <li>Event-Based Invalidation: For booking status changes</li> </ul>"},{"location":"architecture/scalability/#microservices-scaling","title":"Microservices Scaling","text":"<p>Each microservice scales independently based on its specific workload:</p> Service Primary Scaling Metric Notes Booking Service Transactions per second Scales up during peak seasonal demand Search Service Queries per second Elastic scaling based on user activity Payment Service Payment processing queue depth Critical service with priority scaling Notification Service Message queue length Batch processing allows for efficient scaling"},{"location":"architecture/scalability/#performance-testing-and-monitoring","title":"Performance Testing and Monitoring","text":"<p>Our continuous performance testing regimen includes:</p> <ul> <li>Load testing to 10x expected peak traffic</li> <li>Stress testing to identify breaking points</li> <li>Endurance testing to find memory leaks</li> <li>Real-user monitoring for actual performance data</li> </ul> <p>Metrics are tracked in Grafana dashboards with alerts configured for early warning of scalability issues.</p>"},{"location":"architecture/security/","title":"Security Architecture","text":""},{"location":"architecture/security/#overview","title":"Overview","text":"<p>This document outlines the security architecture of the Dokkerr platform, including authentication, authorization, data protection, and security monitoring.</p>"},{"location":"architecture/security/#security-architecture-diagram","title":"Security Architecture Diagram","text":"<pre><code>graph TB\n    subgraph Client Security\n        Client[Client Application]\n        TLS[TLS/SSL]\n        CSP[Content Security Policy]\n    end\n\n    subgraph Edge Security\n        WAF[Web Application Firewall]\n        DDoS[DDoS Protection]\n        RateLimit[Rate Limiting]\n    end\n\n    subgraph Application Security\n        Auth[Authentication]\n        AuthZ[Authorization]\n        Validate[Input Validation]\n        Session[Session Management]\n    end\n\n    subgraph Data Security\n        Encrypt[Encryption]\n        Backup[Backup]\n        Audit[Audit Logging]\n        Mask[Data Masking]\n    end\n\n    Client --&gt; TLS\n    TLS --&gt; WAF\n    WAF --&gt; Auth\n    Auth --&gt; AuthZ\n    AuthZ --&gt; Encrypt\n\n    Client --&gt; CSP\n    WAF --&gt; RateLimit\n    WAF --&gt; DDoS\n    Auth --&gt; Session\n    AuthZ --&gt; Audit\n    Encrypt --&gt; Mask\n    Encrypt --&gt; Backup</code></pre>"},{"location":"architecture/security/#authentication-system","title":"Authentication System","text":""},{"location":"architecture/security/#multi-factor-authentication","title":"Multi-factor Authentication","text":"<pre><code>sequenceDiagram\n    participant U as User\n    participant A as Auth Service\n    participant MFA as MFA Service\n    participant D as Database\n\n    U-&gt;&gt;A: Login with Credentials\n    A-&gt;&gt;D: Verify Credentials\n    D--&gt;&gt;A: Credentials Valid\n    A-&gt;&gt;MFA: Generate MFA Challenge\n    MFA--&gt;&gt;U: Send MFA Code\n    U-&gt;&gt;A: Submit MFA Code\n    A-&gt;&gt;MFA: Verify Code\n    MFA--&gt;&gt;A: Code Valid\n    A-&gt;&gt;U: Grant Access Token</code></pre>"},{"location":"architecture/security/#jwt-token-management","title":"JWT Token Management","text":"<pre><code>interface JWTConfig {\n  algorithm: 'RS256' | 'ES256';\n  expiresIn: string;\n  issuer: string;\n  audience: string[];\n  tokenTypes: {\n    access: {\n      ttl: number;\n      refreshable: boolean;\n    };\n    refresh: {\n      ttl: number;\n      rotationPolicy: 'static' | 'rotating';\n    };\n  };\n}\n</code></pre>"},{"location":"architecture/security/#authorization-system","title":"Authorization System","text":""},{"location":"architecture/security/#rbac-configuration","title":"RBAC Configuration","text":"<pre><code>interface RBACConfig {\n  roles: {\n    name: string;\n    permissions: Permission[];\n    inherits?: string[];\n    metadata: {\n      description: string;\n      createdAt: Date;\n      updatedAt: Date;\n    };\n  }[];\n\n  permissions: {\n    resource: string;\n    action: string;\n    conditions?: Condition[];\n  }[];\n}\n</code></pre>"},{"location":"architecture/security/#permission-checking-flow","title":"Permission Checking Flow","text":"<pre><code>graph TD\n    A[Request] --&gt; B[Extract Token]\n    B --&gt; C[Validate Token]\n    C --&gt; D[Get User Roles]\n    D --&gt; E[Get Role Permissions]\n    E --&gt; F[Check Resource Access]\n    F --&gt; G[Apply Conditions]\n    G --&gt; H[Grant/Deny Access]</code></pre>"},{"location":"architecture/security/#data-protection","title":"Data Protection","text":""},{"location":"architecture/security/#encryption-configuration","title":"Encryption Configuration","text":"<pre><code>interface EncryptionConfig {\n  atRest: {\n    algorithm: string;\n    keySize: number;\n    keyRotation: {\n      enabled: boolean;\n      interval: string;\n    };\n  };\n\n  inTransit: {\n    tls: {\n      version: string;\n      ciphers: string[];\n      certificates: {\n        provider: string;\n        autoRenewal: boolean;\n      };\n    };\n  };\n\n  keyManagement: {\n    provider: 'vault' | 'aws-kms' | 'azure-keyvault';\n    config: Record&lt;string, any&gt;;\n  };\n}\n</code></pre>"},{"location":"architecture/security/#data-classification","title":"Data Classification","text":"<pre><code>interface DataClassification {\n  public: {\n    retention: string;\n    encryption: boolean;\n    masking: boolean;\n  };\n\n  internal: {\n    retention: string;\n    encryption: boolean;\n    masking: boolean;\n  };\n\n  confidential: {\n    retention: string;\n    encryption: boolean;\n    masking: boolean;\n    audit: boolean;\n  };\n\n  restricted: {\n    retention: string;\n    encryption: boolean;\n    masking: boolean;\n    audit: boolean;\n    approval: boolean;\n  };\n}\n</code></pre>"},{"location":"architecture/security/#security-monitoring","title":"Security Monitoring","text":""},{"location":"architecture/security/#intrusion-detection","title":"Intrusion Detection","text":"<pre><code>graph TD\n    A[Security Events] --&gt; B[Event Collector]\n    B --&gt; C[Analysis Engine]\n    C --&gt; D[Pattern Matching]\n    D --&gt; E[Threat Detection]\n    E --&gt; F[Alert Generation]\n    F --&gt; G[Incident Response]</code></pre>"},{"location":"architecture/security/#security-metrics","title":"Security Metrics","text":"<pre><code>interface SecurityMetrics {\n  authentication: {\n    failedAttempts: number;\n    mfaUsage: number;\n    tokenRevocations: number;\n  };\n\n  authorization: {\n    accessDenied: number;\n    privilegeEscalation: number;\n    unusualAccess: number;\n  };\n\n  encryption: {\n    keyRotations: number;\n    encryptionErrors: number;\n    certificateExpiry: Date[];\n  };\n\n  audit: {\n    sensitiveDataAccess: number;\n    configurationChanges: number;\n    securityEvents: number;\n  };\n}\n</code></pre>"},{"location":"architecture/security/#compliance-controls","title":"Compliance Controls","text":""},{"location":"architecture/security/#audit-logging","title":"Audit Logging","text":"<pre><code>interface AuditConfig {\n  events: {\n    type: string;\n    severity: 'low' | 'medium' | 'high';\n    retention: string;\n    alert: boolean;\n  }[];\n\n  storage: {\n    type: 'database' | 'filesystem';\n    encryption: boolean;\n    retention: string;\n  };\n\n  monitoring: {\n    realtime: boolean;\n    alerts: {\n      threshold: number;\n      notification: string[];\n    };\n  };\n}\n</code></pre>"},{"location":"architecture/security/#compliance-reporting","title":"Compliance Reporting","text":"<pre><code>interface ComplianceReport {\n  standard: string;\n  controls: {\n    id: string;\n    description: string;\n    status: 'compliant' | 'non-compliant' | 'partial';\n    evidence: string[];\n    lastAudit: Date;\n  }[];\n\n  metrics: {\n    complianceScore: number;\n    criticalFindings: number;\n    openRemediation: number;\n  };\n}\n</code></pre>"},{"location":"architecture/security/#security-response","title":"Security Response","text":""},{"location":"architecture/security/#incident-response-plan","title":"Incident Response Plan","text":"<pre><code>graph TD\n    A[Detect Incident] --&gt; B[Assess Impact]\n    B --&gt; C[Contain Threat]\n    C --&gt; D[Investigate Cause]\n    D --&gt; E[Remediate Issue]\n    E --&gt; F[Recovery]\n    F --&gt; G[Post-mortem]\n    G --&gt; H[Update Security]</code></pre>"},{"location":"architecture/security/#vulnerability-management","title":"Vulnerability Management","text":"<pre><code>interface VulnerabilityManagement {\n  scanning: {\n    frequency: string;\n    tools: string[];\n    scope: string[];\n  };\n\n  assessment: {\n    riskLevels: string[];\n    prioritization: string;\n    sla: Record&lt;string, string&gt;;\n  };\n\n  remediation: {\n    process: string;\n    automation: boolean;\n    verification: string;\n  };\n\n  reporting: {\n    stakeholders: string[];\n    metrics: string[];\n    frequency: string;\n  };\n}\n</code></pre>"},{"location":"architecture/security/#security-best-practices","title":"Security Best Practices","text":""},{"location":"architecture/security/#development-security","title":"Development Security","text":"<ul> <li>Secure coding guidelines</li> <li>Security testing in CI/CD</li> <li>Dependency scanning</li> <li>Code security reviews</li> <li>Security training</li> </ul>"},{"location":"architecture/security/#operational-security","title":"Operational Security","text":"<ul> <li>Access control reviews</li> <li>Security patching</li> <li>Configuration management</li> <li>Backup verification</li> <li>Incident response drills</li> </ul>"},{"location":"architecture/security/#infrastructure-security","title":"Infrastructure Security","text":"<ul> <li>Network segmentation</li> <li>Firewall rules</li> <li>Security groups</li> <li>VPN access</li> <li>Bastion hosts</li> </ul>"},{"location":"architecture/security/#data-security","title":"Data Security","text":"<ul> <li>Encryption standards</li> <li>Key management</li> <li>Data classification</li> <li>Access logging</li> <li>Data retention </li> </ul>"},{"location":"architecture/system-design/","title":"System Design","text":""},{"location":"architecture/system-design/#system-architecture-design","title":"System Architecture Design","text":"<pre><code>graph TB\n    subgraph Client Layer\n        Web[Web Application]\n        Mobile[Mobile Apps]\n        CLI[CLI Tool]\n    end\n\n    subgraph API Layer\n        LB[Load Balancer]\n        API[API Gateway]\n        WS[WebSocket Server]\n    end\n\n    subgraph Service Layer\n        Auth[Auth Service]\n        User[User Service]\n        Docker[Docker Service]\n        Search[Search Service]\n        Notify[Notification Service]\n    end\n\n    subgraph Data Layer\n        DB[(PostgreSQL)]\n        Cache[(Redis)]\n        Search_DB[(Elasticsearch)]\n        MQ[(RabbitMQ)]\n    end\n\n    Web --&gt; LB\n    Mobile --&gt; LB\n    CLI --&gt; LB\n\n    LB --&gt; API\n    LB --&gt; WS\n\n    API --&gt; Auth\n    API --&gt; User\n    API --&gt; Docker\n    API --&gt; Search\n    API --&gt; Notify\n\n    WS --&gt; Notify\n\n    Auth --&gt; DB\n    User --&gt; DB\n    Docker --&gt; DB\n    Search --&gt; Search_DB\n    Notify --&gt; MQ\n\n    Auth --&gt; Cache\n    User --&gt; Cache\n    Docker --&gt; Cache</code></pre>"},{"location":"architecture/system-design/#component-design","title":"Component Design","text":""},{"location":"architecture/system-design/#client-layer","title":"Client Layer","text":""},{"location":"architecture/system-design/#web-application","title":"Web Application","text":"<ul> <li>React-based SPA</li> <li>TypeScript for type safety</li> <li>Tailwind CSS for styling</li> <li>Redux for state management</li> <li>WebSocket for real-time updates</li> </ul>"},{"location":"architecture/system-design/#mobile-apps","title":"Mobile Apps","text":"<ul> <li>React Native for cross-platform</li> <li>Native modules for platform-specific features</li> <li>Offline support</li> <li>Push notifications</li> <li>Location services</li> </ul>"},{"location":"architecture/system-design/#cli-tool","title":"CLI Tool","text":"<ul> <li>Node.js-based CLI</li> <li>Docker SDK integration</li> <li>Local configuration management</li> <li>Batch operations support</li> <li>Shell completion</li> </ul>"},{"location":"architecture/system-design/#api-layer","title":"API Layer","text":""},{"location":"architecture/system-design/#load-balancer","title":"Load Balancer","text":"<ul> <li>Nginx-based load balancing</li> <li>SSL termination</li> <li>Request routing</li> <li>Health checks</li> <li>Rate limiting</li> </ul>"},{"location":"architecture/system-design/#api-gateway","title":"API Gateway","text":"<ul> <li>Request validation</li> <li>Authentication</li> <li>Rate limiting</li> <li>Request/Response transformation</li> <li>API versioning</li> <li>Documentation (OpenAPI)</li> </ul>"},{"location":"architecture/system-design/#websocket-server","title":"WebSocket Server","text":"<ul> <li>Real-time updates</li> <li>Connection management</li> <li>Room-based messaging</li> <li>Heartbeat monitoring</li> <li>Reconnection handling</li> </ul>"},{"location":"architecture/system-design/#service-layer","title":"Service Layer","text":""},{"location":"architecture/system-design/#auth-service","title":"Auth Service","text":"<ul> <li>User authentication</li> <li>JWT management</li> <li>OAuth2 providers</li> <li>MFA handling</li> <li>Session management</li> <li>Role-based access control</li> </ul>"},{"location":"architecture/system-design/#user-service","title":"User Service","text":"<ul> <li>User management</li> <li>Profile handling</li> <li>Team management</li> <li>Billing integration</li> <li>Notification preferences</li> </ul>"},{"location":"architecture/system-design/#docker-service","title":"Docker Service","text":"<ul> <li>Container management</li> <li>Image handling</li> <li>Network configuration</li> <li>Volume management</li> <li>Resource monitoring</li> </ul>"},{"location":"architecture/system-design/#search-service","title":"Search Service","text":"<ul> <li>Full-text search</li> <li>Filtering</li> <li>Sorting</li> <li>Aggregations</li> <li>Search suggestions</li> </ul>"},{"location":"architecture/system-design/#notification-service","title":"Notification Service","text":"<ul> <li>Email notifications</li> <li>Push notifications</li> <li>In-app notifications</li> <li>Webhook delivery</li> <li>Notification preferences</li> </ul>"},{"location":"architecture/system-design/#data-layer","title":"Data Layer","text":""},{"location":"architecture/system-design/#postgresql","title":"PostgreSQL","text":"<ul> <li>User data</li> <li>Container configurations</li> <li>System settings</li> <li>Audit logs</li> <li>Billing information</li> </ul>"},{"location":"architecture/system-design/#redis","title":"Redis","text":"<ul> <li>Session storage</li> <li>Cache layer</li> <li>Rate limiting</li> <li>Real-time data</li> <li>Job queues</li> </ul>"},{"location":"architecture/system-design/#elasticsearch","title":"Elasticsearch","text":"<ul> <li>Container logs</li> <li>Search indexes</li> <li>Analytics data</li> <li>Metrics</li> <li>Audit logs</li> </ul>"},{"location":"architecture/system-design/#rabbitmq","title":"RabbitMQ","text":"<ul> <li>Event messaging</li> <li>Task queues</li> <li>Pub/sub system</li> <li>Dead letter queues</li> <li>Message routing</li> </ul>"},{"location":"architecture/system-design/#data-models","title":"Data Models","text":""},{"location":"architecture/system-design/#user-model","title":"User Model","text":"<pre><code>interface User {\n  id: string;\n  email: string;\n  password: string;\n  firstName: string;\n  lastName: string;\n  role: UserRole;\n  teams: Team[];\n  settings: UserSettings;\n  createdAt: Date;\n  updatedAt: Date;\n}\n</code></pre>"},{"location":"architecture/system-design/#container-model","title":"Container Model","text":"<pre><code>interface Container {\n  id: string;\n  name: string;\n  image: string;\n  status: ContainerStatus;\n  ports: Port[];\n  volumes: Volume[];\n  env: EnvVar[];\n  networks: Network[];\n  resources: Resources;\n  createdAt: Date;\n  updatedAt: Date;\n}\n</code></pre>"},{"location":"architecture/system-design/#team-model","title":"Team Model","text":"<pre><code>interface Team {\n  id: string;\n  name: string;\n  members: TeamMember[];\n  permissions: Permission[];\n  settings: TeamSettings;\n  createdAt: Date;\n  updatedAt: Date;\n}\n</code></pre>"},{"location":"architecture/system-design/#api-design","title":"API Design","text":""},{"location":"architecture/system-design/#restful-endpoints","title":"RESTful Endpoints","text":""},{"location":"architecture/system-design/#user-management","title":"User Management","text":"<pre><code>interface UserAPI {\n  'POST /users': CreateUser;\n  'GET /users/:id': GetUser;\n  'PUT /users/:id': UpdateUser;\n  'DELETE /users/:id': DeleteUser;\n  'GET /users/:id/teams': GetUserTeams;\n}\n</code></pre>"},{"location":"architecture/system-design/#container-management","title":"Container Management","text":"<pre><code>interface ContainerAPI {\n  'POST /containers': CreateContainer;\n  'GET /containers/:id': GetContainer;\n  'PUT /containers/:id': UpdateContainer;\n  'DELETE /containers/:id': DeleteContainer;\n  'POST /containers/:id/start': StartContainer;\n  'POST /containers/:id/stop': StopContainer;\n}\n</code></pre>"},{"location":"architecture/system-design/#websocket-events","title":"WebSocket Events","text":""},{"location":"architecture/system-design/#real-time-updates","title":"Real-time Updates","text":"<pre><code>interface WebSocketEvents {\n  'container:status': ContainerStatusEvent;\n  'container:logs': ContainerLogsEvent;\n  'container:stats': ContainerStatsEvent;\n  'notification:new': NotificationEvent;\n}\n</code></pre>"},{"location":"architecture/system-design/#security-design","title":"Security Design","text":""},{"location":"architecture/system-design/#authentication-flow","title":"Authentication Flow","text":"<pre><code>sequenceDiagram\n    participant C as Client\n    participant A as Auth Service\n    participant D as Database\n\n    C-&gt;&gt;A: Login Request\n    A-&gt;&gt;D: Validate Credentials\n    D--&gt;&gt;A: User Data\n    A-&gt;&gt;A: Generate JWT\n    A--&gt;&gt;C: JWT Token</code></pre>"},{"location":"architecture/system-design/#authorization-flow","title":"Authorization Flow","text":"<pre><code>sequenceDiagram\n    participant C as Client\n    participant G as API Gateway\n    participant A as Auth Service\n    participant S as Service\n\n    C-&gt;&gt;G: API Request + JWT\n    G-&gt;&gt;A: Validate JWT\n    A--&gt;&gt;G: Token Valid + User Info\n    G-&gt;&gt;S: Authorized Request\n    S--&gt;&gt;G: Response\n    G--&gt;&gt;C: API Response</code></pre>"},{"location":"architecture/system-design/#deployment-design","title":"Deployment Design","text":""},{"location":"architecture/system-design/#production-environment","title":"Production Environment","text":"<pre><code>graph TB\n    subgraph Production\n        LB[Load Balancer]\n        API1[API Server 1]\n        API2[API Server 2]\n        API3[API Server 3]\n        DB_Master[(DB Master)]\n        DB_Slave1[(DB Slave 1)]\n        DB_Slave2[(DB Slave 2)]\n        Cache1[(Cache 1)]\n        Cache2[(Cache 2)]\n    end\n\n    LB --&gt; API1\n    LB --&gt; API2\n    LB --&gt; API3\n\n    API1 --&gt; DB_Master\n    API2 --&gt; DB_Master\n    API3 --&gt; DB_Master\n\n    DB_Master --&gt; DB_Slave1\n    DB_Master --&gt; DB_Slave2\n\n    API1 --&gt; Cache1\n    API2 --&gt; Cache1\n    API3 --&gt; Cache1\n\n    API1 --&gt; Cache2\n    API2 --&gt; Cache2\n    API3 --&gt; Cache2</code></pre>"},{"location":"architecture/system-design/#monitoring-design","title":"Monitoring Design","text":""},{"location":"architecture/system-design/#metrics-collection","title":"Metrics Collection","text":"<pre><code>graph LR\n    subgraph Services\n        S1[Service 1]\n        S2[Service 2]\n        S3[Service 3]\n    end\n\n    subgraph Monitoring\n        P[Prometheus]\n        G[Grafana]\n        A[Alert Manager]\n    end\n\n    S1 --&gt; P\n    S2 --&gt; P\n    S3 --&gt; P\n\n    P --&gt; G\n    P --&gt; A</code></pre>"},{"location":"architecture/system-design/#error-handling","title":"Error Handling","text":""},{"location":"architecture/system-design/#error-response-format","title":"Error Response Format","text":"<pre><code>interface ErrorResponse {\n  code: string;\n  message: string;\n  details?: Record&lt;string, any&gt;;\n  timestamp: string;\n  requestId: string;\n}\n</code></pre>"},{"location":"architecture/system-design/#error-categories","title":"Error Categories","text":"<ul> <li>Authentication Errors (401)</li> <li>Authorization Errors (403)</li> <li>Validation Errors (400)</li> <li>Resource Errors (404)</li> <li>System Errors (500)</li> <li>Rate Limiting Errors (429)</li> </ul>"},{"location":"architecture/system-design/#performance-considerations","title":"Performance Considerations","text":""},{"location":"architecture/system-design/#caching-strategy","title":"Caching Strategy","text":"<ul> <li>Application-level caching</li> <li>Database query caching</li> <li>HTTP response caching</li> <li>Static asset caching</li> <li>Distributed caching</li> </ul>"},{"location":"architecture/system-design/#optimization-techniques","title":"Optimization Techniques","text":"<ul> <li>Database indexing</li> <li>Query optimization</li> <li>Connection pooling</li> <li>Load balancing</li> <li>Content compression</li> </ul>"},{"location":"architecture/system-design/#scalability-design","title":"Scalability Design","text":""},{"location":"architecture/system-design/#horizontal-scaling","title":"Horizontal Scaling","text":"<ul> <li>Stateless services</li> <li>Load balancing</li> <li>Session management</li> <li>Database replication</li> <li>Cache distribution</li> </ul>"},{"location":"architecture/system-design/#vertical-scaling","title":"Vertical Scaling","text":"<ul> <li>Resource allocation</li> <li>Performance tuning</li> <li>Hardware upgrades</li> <li>Capacity planning</li> <li>Resource monitoring ``` </li> </ul>"},{"location":"architecture/adrs/001-service-decomposition/","title":"ADR 001: Service Decomposition","text":""},{"location":"architecture/adrs/001-service-decomposition/#status","title":"Status","text":"<p>Accepted</p>"},{"location":"architecture/adrs/001-service-decomposition/#context","title":"Context","text":"<p>As we design the Dokkerr platform, we need to determine an appropriate service architecture that will allow for scalability, maintainability, and team autonomy while not introducing unnecessary complexity.</p>"},{"location":"architecture/adrs/001-service-decomposition/#decision-drivers","title":"Decision Drivers","text":"<ul> <li>Business domain complexity</li> <li>Need for independent scaling of different components</li> <li>Team structure and development velocity</li> <li>Long-term maintainability</li> <li>Performance requirements for real-time booking operations</li> </ul>"},{"location":"architecture/adrs/001-service-decomposition/#considered-options","title":"Considered Options","text":""},{"location":"architecture/adrs/001-service-decomposition/#option-1-monolithic-architecture","title":"Option 1: Monolithic Architecture","text":"<ul> <li>Single codebase with modular components</li> <li>Shared database</li> <li>Simpler deployment and testing</li> <li>Potential bottlenecks for scaling specific functions</li> </ul>"},{"location":"architecture/adrs/001-service-decomposition/#option-2-microservices-architecture","title":"Option 2: Microservices Architecture","text":"<ul> <li>Separate services for distinct business domains</li> <li>Independent deployment and scaling</li> <li>Database per service</li> <li>Higher complexity in testing and deployment</li> </ul>"},{"location":"architecture/adrs/001-service-decomposition/#option-3-hybrid-approach","title":"Option 3: Hybrid Approach","text":"<ul> <li>Core booking engine as a monolith</li> <li>Supporting services (payment, notifications, etc.) as microservices</li> <li>Mixed database approach</li> </ul>"},{"location":"architecture/adrs/001-service-decomposition/#decision","title":"Decision","text":"<p>We will implement Option 2: Microservices Architecture with the following service boundaries:</p> <ol> <li>User Service - User accounts, profiles, preferences</li> <li>Dock Service - Dock listings, amenities, availability management</li> <li>Booking Service - Reservation processing and management</li> <li>Payment Service - Payment processing and financial transactions</li> <li>Notification Service - Email, SMS, and push notifications</li> <li>Review Service - Ratings and reviews for docks and renters</li> <li>Search Service - Dock discovery and search functionality</li> <li>Admin Service - Administrative operations and reporting</li> </ol>"},{"location":"architecture/adrs/001-service-decomposition/#consequences","title":"Consequences","text":""},{"location":"architecture/adrs/001-service-decomposition/#positive","title":"Positive","text":"<ul> <li>Services can scale independently based on demand (e.g., search service during peak seasons)</li> <li>Teams can develop, test, and deploy independently</li> <li>Technology stack can be optimized for each service's needs</li> <li>Failures are isolated to specific services</li> <li>Easier to implement different SLAs for different functions</li> </ul>"},{"location":"architecture/adrs/001-service-decomposition/#negative","title":"Negative","text":"<ul> <li>Increased operational complexity</li> <li>Need for service discovery and API gateway</li> <li>Distributed transactions require careful design</li> <li>More complex testing for end-to-end scenarios</li> <li>Potential performance overhead from service communication</li> </ul>"},{"location":"architecture/adrs/001-service-decomposition/#implementation-notes","title":"Implementation Notes","text":"<ul> <li>Services will communicate primarily via RESTful APIs</li> <li>Event-driven patterns will be used for asynchronous operations</li> <li>Initial service boundaries may evolve as we learn more about usage patterns</li> <li>Each service will manage its own database to maintain independence</li> <li>API gateway will handle routing, authentication, and rate limiting</li> </ul>"},{"location":"architecture/adrs/001-service-decomposition/#related-decisions","title":"Related Decisions","text":"<ul> <li>ADR-002: Authentication Approach</li> <li>ADR-003: Database Selection</li> <li>ADR-004: API Design</li> </ul>"},{"location":"deployment/cloud-options/","title":"Deployment Options","text":""},{"location":"deployment/cloud-options/#recommended-cloud-providers","title":"Recommended Cloud Providers","text":""},{"location":"deployment/cloud-options/#1-digitalocean-recommended-for-startups","title":"1. DigitalOcean (Recommended for Startups)","text":"<ul> <li>Cost: Starting at $20-40/month</li> <li>Benefits:</li> <li>Simple Kubernetes setup</li> <li>Managed databases</li> <li>Built-in monitoring</li> <li>Setup Time: ~30 minutes</li> </ul>"},{"location":"deployment/cloud-options/#2-aws-enterprise-scale","title":"2. AWS (Enterprise Scale)","text":"<ul> <li>Cost: Starting at $50-100/month</li> <li>Benefits:</li> <li>Global infrastructure</li> <li>Advanced security features</li> <li>Complete ecosystem</li> <li>Setup Time: ~1-2 hours</li> </ul>"},{"location":"deployment/cloud-options/#3-google-cloud-alternative","title":"3. Google Cloud (Alternative)","text":"<ul> <li>Cost: Starting at $30-60/month</li> <li>Benefits:</li> <li>Strong Kubernetes integration</li> <li>Good AI/ML capabilities</li> <li>Global network</li> <li>Setup Time: ~1 hour</li> </ul>"},{"location":"deployment/cloud-options/#quick-deploy-instructions","title":"Quick Deploy Instructions","text":""},{"location":"deployment/cloud-options/#digitalocean-deployment","title":"DigitalOcean Deployment","text":"<ol> <li> <p>Initial Setup: <pre><code># Install doctl\nbrew install doctl  # Mac\nsnap install doctl  # Linux\n\n# Authenticate\ndoctl auth init\n\n# Create Kubernetes cluster\ndoctl kubernetes cluster create dokkerr-cluster \\\n  --region nyc1 \\\n  --size s-2vcpu-4gb \\\n  --count 3\n</code></pre></p> </li> <li> <p>Configure Secrets: <pre><code># Create secrets\nkubectl create secret generic dokkerr-secrets \\\n  --from-literal=database-url='postgres://user:pass@host:5432/dokkerr' \\\n  --from-literal=jwt-secret='your-secure-jwt-secret'\n\n# Create database\ndoctl databases create dokkerr-db \\\n  --engine pg \\\n  --size db-s-1vcpu-1gb \\\n  --region nyc1\n</code></pre></p> </li> <li> <p>Deploy Application: <pre><code># Deploy Kubernetes resources\nkubectl apply -f k8s/deployment.yml\n\n# Verify deployment\nkubectl get pods\nkubectl get services\n</code></pre></p> </li> </ol>"},{"location":"deployment/cloud-options/#aws-deployment","title":"AWS Deployment","text":"<ol> <li> <p>Initial Setup: <pre><code># Install AWS CLI\nbrew install awscli  # Mac\napt install awscli   # Linux\n\n# Configure AWS\naws configure\n\n# Create EKS cluster\neksctl create cluster \\\n  --name dokkerr-cluster \\\n  --region us-east-1 \\\n  --nodes 3 \\\n  --node-type t3.small\n</code></pre></p> </li> <li> <p>Configure RDS: <pre><code># Create database\naws rds create-db-instance \\\n  --db-instance-identifier dokkerr-db \\\n  --db-instance-class db.t3.micro \\\n  --engine postgres \\\n  --master-username dokkerr \\\n  --master-user-password 'your-password'\n</code></pre></p> </li> <li> <p>Deploy Application: <pre><code># Update kubeconfig\naws eks update-kubeconfig --name dokkerr-cluster\n\n# Deploy application\nkubectl apply -f k8s/deployment.yml\n</code></pre></p> </li> </ol>"},{"location":"deployment/cloud-options/#domain-and-ssl-setup","title":"Domain and SSL Setup","text":""},{"location":"deployment/cloud-options/#1-domain-configuration","title":"1. Domain Configuration","text":"<pre><code># DigitalOcean\ndoctl compute domain create dokkerr.com\n\n# AWS Route53\naws route53 create-hosted-zone --name dokkerr.com\n</code></pre>"},{"location":"deployment/cloud-options/#2-ssl-certificate","title":"2. SSL Certificate","text":"<pre><code># Install cert-manager\nkubectl apply -f https://github.com/cert-manager/cert-manager/releases/download/v1.12.0/cert-manager.yaml\n\n# Create certificate\nkubectl apply -f - &lt;&lt;EOF\napiVersion: cert-manager.io/v1\nkind: Certificate\nmetadata:\n  name: dokkerr-tls\nspec:\n  secretName: dokkerr-tls\n  dnsNames:\n  - dokkerr.com\n  - www.dokkerr.com\n  issuerRef:\n    name: letsencrypt-prod\n    kind: ClusterIssuer\nEOF\n</code></pre>"},{"location":"deployment/cloud-options/#monitoring-setup","title":"Monitoring Setup","text":""},{"location":"deployment/cloud-options/#1-metrics-server","title":"1. Metrics Server","text":"<pre><code>kubectl apply -f https://github.com/kubernetes-sigs/metrics-server/releases/latest/download/components.yaml\n</code></pre>"},{"location":"deployment/cloud-options/#2-prometheus-grafana","title":"2. Prometheus &amp; Grafana","text":"<pre><code># Add Helm repo\nhelm repo add prometheus-community https://prometheus-community.github.io/helm-charts\n\n# Install Prometheus\nhelm install prometheus prometheus-community/kube-prometheus-stack\n\n# Access Grafana\nkubectl port-forward svc/prometheus-grafana 3000:80\n</code></pre>"},{"location":"deployment/cloud-options/#cost-optimization","title":"Cost Optimization","text":""},{"location":"deployment/cloud-options/#recommended-configurations","title":"Recommended Configurations","text":"<ol> <li>Development Environment:</li> <li>2 nodes (t3.small/DO basic)</li> <li>1 RDS instance (db.t3.micro)</li> <li> <p>Estimated cost: $40-60/month</p> </li> <li> <p>Production Environment:</p> </li> <li>3-5 nodes (t3.medium/DO regular)</li> <li>RDS with replica (db.t3.small)</li> <li>Estimated cost: $150-200/month</li> </ol>"},{"location":"deployment/cloud-options/#auto-scaling-configuration","title":"Auto-scaling Configuration","text":"<pre><code>apiVersion: autoscaling/v2\nkind: HorizontalPodAutoscaler\nmetadata:\n  name: dokkerr-hpa\nspec:\n  scaleTargetRef:\n    apiVersion: apps/v1\n    kind: Deployment\n    name: dokkerr-app\n  minReplicas: 2\n  maxReplicas: 10\n  metrics:\n  - type: Resource\n    resource:\n      name: cpu\n      target:\n        type: Utilization\n        averageUtilization: 70\n</code></pre>"},{"location":"deployment/cloud-options/#deployment-checklist","title":"Deployment Checklist","text":"<ul> <li>[ ] Choose cloud provider</li> <li>[ ] Set up Kubernetes cluster</li> <li>[ ] Configure database</li> <li>[ ] Set up secrets</li> <li>[ ] Deploy application</li> <li>[ ] Configure SSL/domain</li> <li>[ ] Set up monitoring</li> <li>[ ] Configure backups</li> <li>[ ] Test scaling</li> <li>[ ] Document access credentials </li> </ul>"},{"location":"deployment/docker/","title":"Docker Deployment","text":"<p>This guide describes the Docker deployment process for the Dokkerr application.</p>"},{"location":"deployment/docker/#container-architecture","title":"Container Architecture","text":""},{"location":"deployment/docker/#prerequisites","title":"Prerequisites","text":"<ul> <li>Docker Engine 20.10.x or higher</li> <li>Docker Compose 2.x or higher</li> <li>At least 4GB of RAM allocated to Docker</li> <li>Git for repository access</li> </ul>"},{"location":"deployment/docker/#configuration","title":"Configuration","text":"<p>Environment variables are used to configure the application. Create a  file in the project root:</p>"},{"location":"deployment/docker/#docker-compose-setup","title":"Docker Compose Setup","text":"<p>The  file defines all services:</p>"},{"location":"deployment/docker/#deployment-steps","title":"Deployment Steps","text":"<ol> <li> <p>Clone the repository:</p> </li> <li> <p>Create the  file with your configuration:</p> </li> <li> <p>Build and start the containers:</p> </li> <li> <p>Initialize the database:</p> </li> <li> <p>Verify the deployment:</p> </li> </ol>"},{"location":"deployment/docker/#scaling-services","title":"Scaling Services","text":"<p>To scale specific services horizontally:</p>"},{"location":"deployment/docker/#updating-the-application","title":"Updating the Application","text":"<ol> <li> <p>Pull the latest changes:</p> </li> <li> <p>Rebuild and restart the containers:</p> </li> </ol>"},{"location":"deployment/docker/#backup-and-restore","title":"Backup and Restore","text":""},{"location":"deployment/docker/#database-backup","title":"Database Backup","text":""},{"location":"deployment/docker/#database-restore","title":"Database Restore","text":""},{"location":"deployment/docker/#monitoring-and-logs","title":"Monitoring and Logs","text":""},{"location":"deployment/docker/#viewing-logs","title":"Viewing Logs","text":""},{"location":"deployment/docker/#adding-monitoring","title":"Adding Monitoring","text":"<p>Consider adding the following monitoring stack:</p>"},{"location":"deployment/docker/#troubleshooting","title":"Troubleshooting","text":"<ol> <li>Container fails to start: Check logs with </li> <li>Database connection issues: Verify environment variables and network connectivity</li> <li>Out of memory errors: Increase Docker's memory allocation in Docker Desktop settings</li> <li>Slow performance: Consider volume mounting optimization or using Docker Volumes</li> </ol>"},{"location":"deployment/docker/#related-documentation","title":"Related Documentation","text":"<ul> <li>Kubernetes Deployment</li> <li>Production Environment Setup</li> <li>CI/CD Pipeline</li> </ul>"},{"location":"development/code-style/","title":"Code Style Guide","text":""},{"location":"development/code-style/#overview","title":"Overview","text":"<p>This guide outlines Dokkerr's coding standards and best practices to ensure consistency, maintainability, and readability across the codebase.</p>"},{"location":"development/code-style/#typescript-guidelines","title":"TypeScript Guidelines","text":""},{"location":"development/code-style/#naming-conventions","title":"Naming Conventions","text":"<pre><code>// Classes - PascalCase\nclass UserService {\n  // Properties - camelCase\n  private readonly maxLoginAttempts: number = 3;\n\n  // Methods - camelCase\n  public async authenticateUser(credentials: UserCredentials): Promise&lt;User&gt; {\n    // Implementation\n  }\n}\n\n// Interfaces - PascalCase with 'I' prefix for clarity\ninterface IUserCredentials {\n  email: string;\n  password: string;\n}\n\n// Types - PascalCase\ntype UserRole = 'admin' | 'dock_owner' | 'boater';\n\n// Constants - UPPER_SNAKE_CASE\nconst MAX_FILE_SIZE = 5 * 1024 * 1024; // 5MB\n</code></pre>"},{"location":"development/code-style/#code-organization","title":"Code Organization","text":"<pre><code>// File structure for a typical service\nimport { Dependencies } from './dependencies';\nimport { Types } from './types';\n\nexport class ListingService {\n  // 1. Properties\n  private readonly db: Database;\n  private readonly cache: Cache;\n\n  // 2. Constructor\n  constructor(dependencies: Dependencies) {\n    this.db = dependencies.db;\n    this.cache = dependencies.cache;\n  }\n\n  // 3. Public methods\n  public async getListing(id: string): Promise&lt;Listing&gt; {\n    // Implementation\n  }\n\n  // 4. Private methods\n  private async validateListing(listing: Listing): Promise&lt;void&gt; {\n    // Implementation\n  }\n}\n</code></pre>"},{"location":"development/code-style/#type-definitions","title":"Type Definitions","text":"<pre><code>// Prefer interfaces for object definitions\ninterface Listing {\n  id: string;\n  title: string;\n  description: string;\n  price: {\n    amount: number;\n    currency: string;\n  };\n  location: {\n    latitude: number;\n    longitude: number;\n    address: string;\n  };\n  owner: User;\n  status: ListingStatus;\n}\n\n// Use enums for fixed sets of values\nenum ListingStatus {\n  DRAFT = 'draft',\n  PUBLISHED = 'published',\n  ARCHIVED = 'archived'\n}\n\n// Use type aliases for unions and complex types\ntype ListingFilter = {\n  status?: ListingStatus;\n  priceRange?: {\n    min: number;\n    max: number;\n  };\n  location?: {\n    latitude: number;\n    longitude: number;\n    radius: number;\n  };\n};\n</code></pre>"},{"location":"development/code-style/#react-guidelines","title":"React Guidelines","text":""},{"location":"development/code-style/#component-structure","title":"Component Structure","text":"<pre><code>// Functional components with TypeScript\ninterface ProfileProps {\n  user: User;\n  onUpdate: (user: User) =&gt; Promise&lt;void&gt;;\n}\n\nconst Profile: React.FC&lt;ProfileProps&gt; = ({ user, onUpdate }) =&gt; {\n  // 1. Hooks\n  const [isEditing, setIsEditing] = useState(false);\n  const theme = useTheme();\n\n  // 2. Handlers\n  const handleSubmit = async (data: UserUpdateData) =&gt; {\n    try {\n      await onUpdate({ ...user, ...data });\n      setIsEditing(false);\n    } catch (error) {\n      console.error('Failed to update profile:', error);\n    }\n  };\n\n  // 3. Render helpers\n  const renderForm = () =&gt; (\n    // Form implementation\n  );\n\n  // 4. Main render\n  return (\n    &lt;div className=\"profile-container\"&gt;\n      {isEditing ? renderForm() : renderProfile()}\n    &lt;/div&gt;\n  );\n};\n</code></pre>"},{"location":"development/code-style/#styling-conventions","title":"Styling Conventions","text":"<pre><code>// Use Tailwind CSS classes with consistent ordering\nconst Button: React.FC&lt;ButtonProps&gt; = ({ children, variant = 'primary' }) =&gt; (\n  &lt;button\n    className={clsx(\n      // 1. Layout\n      'flex items-center justify-center',\n      // 2. Spacing\n      'px-4 py-2',\n      // 3. Typography\n      'text-sm font-medium',\n      // 4. Colors\n      variant === 'primary' ? 'bg-blue-600 text-white' : 'bg-gray-200 text-gray-800',\n      // 5. Borders\n      'rounded-lg border border-transparent',\n      // 6. Effects\n      'hover:opacity-90 transition-opacity',\n      // 7. States\n      'disabled:opacity-50 disabled:cursor-not-allowed'\n    )}\n  &gt;\n    {children}\n  &lt;/button&gt;\n);\n</code></pre>"},{"location":"development/code-style/#api-guidelines","title":"API Guidelines","text":""},{"location":"development/code-style/#restful-endpoints","title":"RESTful Endpoints","text":"<pre><code>// Route definitions\nrouter.get('/api/v1/listings', listingController.getListings);\nrouter.post('/api/v1/listings', listingController.createListing);\nrouter.get('/api/v1/listings/:id', listingController.getListing);\nrouter.put('/api/v1/listings/:id', listingController.updateListing);\nrouter.delete('/api/v1/listings/:id', listingController.deleteListing);\n\n// Controller structure\nclass ListingController {\n  // Use descriptive method names\n  async getListings(req: Request, res: Response) {\n    try {\n      const filters = this.parseFilters(req.query);\n      const listings = await listingService.findListings(filters);\n\n      res.json({\n        status: 'success',\n        data: listings\n      });\n    } catch (error) {\n      this.handleError(error, res);\n    }\n  }\n}\n</code></pre>"},{"location":"development/code-style/#error-handling","title":"Error Handling","text":"<pre><code>// Custom error classes\nclass AppError extends Error {\n  constructor(\n    public statusCode: number,\n    public message: string,\n    public code: string\n  ) {\n    super(message);\n  }\n}\n\n// Error handler middleware\nconst errorHandler = (\n  error: Error,\n  req: Request,\n  res: Response,\n  next: NextFunction\n) =&gt; {\n  if (error instanceof AppError) {\n    return res.status(error.statusCode).json({\n      status: 'error',\n      code: error.code,\n      message: error.message\n    });\n  }\n\n  // Log unexpected errors\n  console.error('Unexpected error:', error);\n\n  return res.status(500).json({\n    status: 'error',\n    code: 'INTERNAL_ERROR',\n    message: 'An unexpected error occurred'\n  });\n};\n</code></pre>"},{"location":"development/code-style/#testing-guidelines","title":"Testing Guidelines","text":""},{"location":"development/code-style/#unit-tests","title":"Unit Tests","text":"<pre><code>// Use descriptive test names\ndescribe('ListingService', () =&gt; {\n  describe('createListing', () =&gt; {\n    it('should create a new listing with valid data', async () =&gt; {\n      // Arrange\n      const listingData = createMockListingData();\n\n      // Act\n      const result = await listingService.createListing(listingData);\n\n      // Assert\n      expect(result).toMatchObject({\n        id: expect.any(String),\n        ...listingData\n      });\n    });\n\n    it('should throw an error if required fields are missing', async () =&gt; {\n      // Arrange\n      const invalidData = { title: 'Test' }; // Missing required fields\n\n      // Act &amp; Assert\n      await expect(\n        listingService.createListing(invalidData)\n      ).rejects.toThrow('Missing required fields');\n    });\n  });\n});\n</code></pre>"},{"location":"development/code-style/#documentation-guidelines","title":"Documentation Guidelines","text":""},{"location":"development/code-style/#code-comments","title":"Code Comments","text":"<pre><code>/**\n * Processes a booking request for a dock listing\n * @param bookingData - The booking request data\n * @param userId - ID of the user making the booking\n * @returns Promise resolving to the created booking\n * @throws {ValidationError} If booking data is invalid\n * @throws {AvailabilityError} If listing is not available\n */\nasync function processBooking(\n  bookingData: BookingRequest,\n  userId: string\n): Promise&lt;Booking&gt; {\n  // Implementation\n}\n\n// Use inline comments sparingly, only for complex logic\nfunction calculatePrice(duration: number, baseRate: number): number {\n  // Apply progressive discount based on duration\n  // 1-7 days: no discount\n  // 8-30 days: 10% discount\n  // 31+ days: 20% discount\n  const discount = duration &lt;= 7 ? 0 :\n                  duration &lt;= 30 ? 0.1 :\n                  0.2;\n\n  return baseRate * duration * (1 - discount);\n}\n</code></pre>"},{"location":"development/code-style/#version-control","title":"Version Control","text":""},{"location":"development/code-style/#commit-messages","title":"Commit Messages","text":"<pre><code># Format: &lt;type&gt;(&lt;scope&gt;): &lt;description&gt;\n# Types: feat, fix, docs, style, refactor, test, chore\n# Example commits:\nfeat(auth): add multi-factor authentication\nfix(api): handle null response in listing search\ndocs(readme): update deployment instructions\nrefactor(database): optimize booking queries\n</code></pre>"},{"location":"development/code-style/#branch-naming","title":"Branch Naming","text":"<pre><code># Format: &lt;type&gt;/&lt;description&gt;\n# Examples:\nfeature/user-notifications\nbugfix/payment-processing\nhotfix/security-vulnerability\nrefactor/api-structure\n</code></pre>"},{"location":"development/code-style/#best-practices","title":"Best Practices","text":"<ol> <li>Code Quality</li> <li>Write self-documenting code</li> <li>Follow DRY (Don't Repeat Yourself) principle</li> <li>Keep functions small and focused</li> <li> <p>Use meaningful variable names</p> </li> <li> <p>Performance</p> </li> <li>Optimize database queries</li> <li>Implement proper caching</li> <li>Minimize HTTP requests</li> <li> <p>Use lazy loading where appropriate</p> </li> <li> <p>Security</p> </li> <li>Validate all inputs</li> <li>Sanitize data before display</li> <li>Use parameterized queries</li> <li> <p>Follow least privilege principle</p> </li> <li> <p>Accessibility</p> </li> <li>Use semantic HTML</li> <li>Provide ARIA labels</li> <li>Ensure keyboard navigation</li> <li>Maintain color contrast </li> </ol>"},{"location":"development/contributing/","title":"Contributing to Dokkerr","text":"<p>Thank you for your interest in contributing to Dokkerr! This guide will help you get started with contributing to our project.</p>"},{"location":"development/contributing/#code-of-conduct","title":"Code of Conduct","text":"<p>By participating in this project, you agree to abide by our Code of Conduct. Please read it before contributing.</p>"},{"location":"development/contributing/#getting-started","title":"Getting Started","text":""},{"location":"development/contributing/#1-fork-the-repository","title":"1. Fork the Repository","text":"<ul> <li>Go to Dokkerr GitHub Repository</li> <li>Click the \"Fork\" button in the top-right corner</li> <li>Clone your fork locally: <pre><code>git clone https://github.com/YOUR_USERNAME/dokkerr.git\ncd dokkerr\n</code></pre></li> </ul>"},{"location":"development/contributing/#2-set-up-development-environment","title":"2. Set Up Development Environment","text":"<p>Follow the Development Setup Guide to set up your local environment.</p>"},{"location":"development/contributing/#3-create-a-branch","title":"3. Create a Branch","text":"<pre><code># Create and switch to a new branch\ngit checkout -b feature/your-feature-name\n\n# Or for bug fixes\ngit checkout -b fix/your-fix-name\n</code></pre>"},{"location":"development/contributing/#development-process","title":"Development Process","text":""},{"location":"development/contributing/#1-make-your-changes","title":"1. Make Your Changes","text":"<ul> <li>Write clear, concise code</li> <li>Follow our coding standards</li> <li>Add tests for new features</li> <li>Update documentation as needed</li> </ul>"},{"location":"development/contributing/#2-commit-your-changes","title":"2. Commit Your Changes","text":"<pre><code># Stage your changes\ngit add .\n\n# Commit with a descriptive message\ngit commit -m \"feat: add new feature X\"\n</code></pre>"},{"location":"development/contributing/#3-push-to-your-fork","title":"3. Push to Your Fork","text":"<pre><code>git push origin feature/your-feature-name\n</code></pre>"},{"location":"development/contributing/#4-create-a-pull-request","title":"4. Create a Pull Request","text":"<ul> <li>Go to your fork on GitHub</li> <li>Click \"New Pull Request\"</li> <li>Select the base branch (usually <code>main</code>)</li> <li>Add a description of your changes</li> <li>Request review from team members</li> </ul>"},{"location":"development/contributing/#pull-request-guidelines","title":"Pull Request Guidelines","text":""},{"location":"development/contributing/#title-format","title":"Title Format","text":"<pre><code>type(scope): description\n</code></pre> <p>Types: - <code>feat</code>: New feature - <code>fix</code>: Bug fix - <code>docs</code>: Documentation changes - <code>style</code>: Code style changes - <code>refactor</code>: Code refactoring - <code>test</code>: Adding or modifying tests - <code>chore</code>: Maintenance tasks</p>"},{"location":"development/contributing/#description-template","title":"Description Template","text":"<pre><code>## Description\nBrief description of your changes\n\n## Type of Change\n- [ ] Bug fix (non-breaking change which fixes an issue)\n- [ ] New feature (non-breaking change which adds functionality)\n- [ ] Breaking change (fix or feature that would cause existing functionality to not work as expected)\n- [ ] Documentation update\n\n## Testing\n- [ ] Unit tests added/updated\n- [ ] Integration tests added/updated\n- [ ] Manual testing completed\n\n## Checklist\n- [ ] My code follows the style guidelines of this project\n- [ ] I have performed a self-review of my own code\n- [ ] I have commented my code, particularly in hard-to-understand areas\n- [ ] I have made corresponding changes to the documentation\n- [ ] My changes generate no new warnings\n- [ ] I have added tests that prove my fix is effective or that my feature works\n</code></pre>"},{"location":"development/contributing/#code-review-process","title":"Code Review Process","text":""},{"location":"development/contributing/#reviewer-guidelines","title":"Reviewer Guidelines","text":"<ol> <li>Check code quality and style</li> <li>Verify test coverage</li> <li>Ensure documentation is updated</li> <li>Test the changes locally</li> <li>Provide constructive feedback</li> </ol>"},{"location":"development/contributing/#author-guidelines","title":"Author Guidelines","text":"<ol> <li>Respond to review comments promptly</li> <li>Make requested changes</li> <li>Update PR description if needed</li> <li>Request re-review when ready</li> </ol>"},{"location":"development/contributing/#testing-requirements","title":"Testing Requirements","text":""},{"location":"development/contributing/#unit-tests","title":"Unit Tests","text":"<ul> <li>Write tests for all new features</li> <li>Maintain or improve test coverage</li> <li>Follow testing best practices</li> </ul>"},{"location":"development/contributing/#integration-tests","title":"Integration Tests","text":"<ul> <li>Add integration tests for API endpoints</li> <li>Test critical user flows</li> <li>Verify cross-browser compatibility</li> </ul>"},{"location":"development/contributing/#manual-testing","title":"Manual Testing","text":"<ul> <li>Test on multiple devices</li> <li>Verify responsive design</li> <li>Check accessibility compliance</li> </ul>"},{"location":"development/contributing/#documentation-requirements","title":"Documentation Requirements","text":""},{"location":"development/contributing/#code-documentation","title":"Code Documentation","text":"<ul> <li>Add JSDoc comments for functions</li> <li>Document complex algorithms</li> <li>Include usage examples</li> </ul>"},{"location":"development/contributing/#api-documentation","title":"API Documentation","text":"<ul> <li>Update API endpoints documentation</li> <li>Add request/response examples</li> <li>Document error cases</li> </ul>"},{"location":"development/contributing/#user-documentation","title":"User Documentation","text":"<ul> <li>Update user guides if needed</li> <li>Add screenshots for UI changes</li> <li>Update FAQ if relevant</li> </ul>"},{"location":"development/contributing/#release-process","title":"Release Process","text":""},{"location":"development/contributing/#versioning","title":"Versioning","text":"<p>We follow Semantic Versioning: - MAJOR version for incompatible API changes - MINOR version for backwards-compatible functionality - PATCH version for backwards-compatible bug fixes</p>"},{"location":"development/contributing/#release-checklist","title":"Release Checklist","text":"<ol> <li>Update version numbers</li> <li>Update changelog</li> <li>Run full test suite</li> <li>Perform security audit</li> <li>Create release notes</li> <li>Tag the release</li> </ol>"},{"location":"development/contributing/#getting-help","title":"Getting Help","text":""},{"location":"development/contributing/#communication-channels","title":"Communication Channels","text":"<ul> <li>GitHub Issues: For bug reports and feature requests</li> <li>GitHub Discussions: For general questions and discussions</li> <li>Slack: For real-time communication (invite required)</li> </ul>"},{"location":"development/contributing/#support-resources","title":"Support Resources","text":"<ul> <li>Development Setup Guide</li> <li>API Documentation</li> <li>Architecture Overview</li> <li>Testing Guide</li> </ul>"},{"location":"development/contributing/#recognition","title":"Recognition","text":""},{"location":"development/contributing/#contributor-badges","title":"Contributor Badges","text":"<p>We recognize contributors with badges on their GitHub profile: - \ud83e\udd49 Bronze: First contribution - \ud83e\udd48 Silver: 5+ contributions - \ud83e\udd47 Gold: 10+ contributions - \ud83d\udc8e Diamond: 25+ contributions</p>"},{"location":"development/contributing/#hall-of-fame","title":"Hall of Fame","text":"<p>Outstanding contributors are featured in our Hall of Fame.</p>"},{"location":"development/contributing/#license","title":"License","text":"<p>By contributing, you agree that your contributions will be licensed under the project's MIT License. </p>"},{"location":"development/deployment-status/","title":"Deployment Status","text":"<p>This document tracks the implementation status of all features and functionality documented in the Dokkerr platform. It serves as a living document to track development progress and plan future deployments.</p>"},{"location":"development/deployment-status/#status-definitions","title":"Status Definitions","text":"<ul> <li>\u2705 Completed: Feature is fully implemented and tested</li> <li>\ud83d\udea7 In Progress: Feature is currently being developed</li> <li>\ud83d\udcc5 Planned: Feature is documented and planned for development</li> <li>\u274c Not Started: Feature is documented but development hasn't begun</li> <li>\ud83d\udd04 Needs Update: Feature exists but requires updates/improvements</li> </ul>"},{"location":"development/deployment-status/#core-features","title":"Core Features","text":""},{"location":"development/deployment-status/#user-management","title":"User Management","text":"Feature Status Notes Priority User Registration \u2705 Basic registration implemented High Email Verification \u2705 Using SendGrid for emails High Profile Management \ud83d\udea7 Profile photo upload pending Medium User Types (Boater/Owner) \u2705 Basic role system implemented High Multi-factor Authentication \u274c Documented but not implemented Medium"},{"location":"development/deployment-status/#dock-management","title":"Dock Management","text":"Feature Status Notes Priority Create Listing \u2705 Basic listing creation works High Photo Upload \ud83d\udea7 Currently implementing S3 integration High Location Services \ud83d\udea7 Google Maps integration in progress High Availability Calendar \u274c Design completed, not implemented Medium Pricing Management \u2705 Basic pricing structure implemented High"},{"location":"development/deployment-status/#booking-system","title":"Booking System","text":"Feature Status Notes Priority Search Docks \u2705 Basic search implemented High Make Reservation \u2705 Basic booking flow works High Payment Processing \ud83d\udea7 Stripe integration in progress High Booking Confirmation \u2705 Email confirmations working High Cancellation System \u274c Not implemented yet Medium"},{"location":"development/deployment-status/#payment-system","title":"Payment System","text":"Feature Status Notes Priority Stripe Integration \ud83d\udea7 In development High Payment Processing \ud83d\udea7 Basic flow implemented High Refund System \u274c Not started Medium Payout System \u274c Not started Medium Transaction History \ud83d\udea7 Basic logging implemented Medium"},{"location":"development/deployment-status/#communication","title":"Communication","text":"Feature Status Notes Priority In-app Messaging \u274c Planned for Phase 2 Medium Email Notifications \u2705 Basic notifications working High Push Notifications \u274c Not started Low Review System \ud83d\udea7 Basic implementation in progress Medium"},{"location":"development/deployment-status/#technical-infrastructure","title":"Technical Infrastructure","text":""},{"location":"development/deployment-status/#authentication-security","title":"Authentication &amp; Security","text":"Feature Status Notes Priority JWT Authentication \u2705 Implemented and tested High Role-based Access \u2705 Basic roles implemented High API Security \ud83d\udea7 Rate limiting in progress High Data Encryption \u2705 At-rest and in-transit encryption High"},{"location":"development/deployment-status/#database-storage","title":"Database &amp; Storage","text":"Feature Status Notes Priority Database Migrations \u2705 Using Prisma migrations High Backup System \ud83d\udea7 Automated backups in progress High File Storage \ud83d\udea7 S3 integration in progress High Data Replication \u274c Planned for scaling phase Low"},{"location":"development/deployment-status/#api-integration","title":"API &amp; Integration","text":"Feature Status Notes Priority RESTful API \u2705 Core endpoints implemented High API Documentation \ud83d\udea7 OpenAPI docs in progress Medium Third-party Integrations \ud83d\udea7 Maps and Payments in progress High WebSocket Support \u274c Planned for real-time features Low"},{"location":"development/deployment-status/#mobile-features","title":"Mobile Features","text":""},{"location":"development/deployment-status/#mobile-app","title":"Mobile App","text":"Feature Status Notes Priority iOS App \ud83d\udea7 In development High Android App \ud83d\udea7 In development High Offline Support \u274c Planned for v2 Low Location Services \ud83d\udea7 Basic implementation done High"},{"location":"development/deployment-status/#mobile-specific-features","title":"Mobile-specific Features","text":"Feature Status Notes Priority Push Notifications \u274c Not started Medium Mobile Payments \ud83d\udea7 Part of main payment system High Photo Upload \ud83d\udea7 In progress High Maps Integration \ud83d\udea7 Basic implementation done High"},{"location":"development/deployment-status/#deployment-phases","title":"Deployment Phases","text":""},{"location":"development/deployment-status/#phase-1-current","title":"Phase 1 (Current)","text":"<p>Status: \ud83d\udea7 In Progress - Core user management - Basic dock listings - Simple booking flow - Essential security features</p>"},{"location":"development/deployment-status/#phase-2-next","title":"Phase 2 (Next)","text":"<p>Status: \ud83d\udcc5 Planned - Complete payment system - Messaging system - Enhanced search features - Mobile app beta</p>"},{"location":"development/deployment-status/#phase-3-future","title":"Phase 3 (Future)","text":"<p>Status: \ud83d\udcc5 Planned - Advanced booking features - Real-time notifications - Analytics dashboard - Enhanced mobile features</p>"},{"location":"development/deployment-status/#recent-updates","title":"Recent Updates","text":"Date Feature Status Change Notes 2024-03-07 User Types \u2705 Completed Basic role system implemented 2024-03-07 Payment Processing \ud83d\udea7 In Progress Started Stripe integration 2024-03-07 Photo Upload \ud83d\udea7 In Progress S3 integration started"},{"location":"development/deployment-status/#development-priorities","title":"Development Priorities","text":"<ol> <li>High Priority</li> <li>Complete payment system integration</li> <li>Finish photo upload functionality</li> <li> <p>Implement booking cancellation</p> </li> <li> <p>Medium Priority</p> </li> <li>Messaging system</li> <li>Review system</li> <li> <p>Enhanced search features</p> </li> <li> <p>Low Priority</p> </li> <li>Push notifications</li> <li>Offline support</li> <li>Analytics dashboard</li> </ol>"},{"location":"development/deployment-status/#notes-for-developers","title":"Notes for Developers","text":"<ul> <li>Update this document when implementing new features</li> <li>Mark features as \ud83d\udea7 when development starts</li> <li>Add notes about significant implementation details</li> <li>Update the Recent Updates section with major changes</li> <li>Regularly review priorities based on business needs</li> </ul>"},{"location":"development/deployment-status/#tracking-updates","title":"Tracking Updates","text":"<p>To update this document:</p> <ol> <li>Change feature status in the relevant section</li> <li>Add an entry to Recent Updates</li> <li>Update implementation notes if needed</li> <li>Adjust priorities if necessary</li> <li>Commit changes with message: \"docs: update deployment status\"</li> </ol>"},{"location":"development/deployment-status/#issue-tracking-integration","title":"Issue Tracking Integration","text":""},{"location":"development/deployment-status/#feature-to-issue-mapping","title":"Feature to Issue Mapping","text":"Feature Status Issue ID Sprint Assignee Payment Processing \ud83d\udea7 DOCK-123 Sprint 5 @payment-team Photo Upload \ud83d\udea7 DOCK-124 Sprint 5 @storage-team Location Services \ud83d\udea7 DOCK-125 Sprint 5 @maps-team Review System \ud83d\udea7 DOCK-126 Sprint 6 @social-team API Security \ud83d\udea7 DOCK-127 Sprint 5 @security-team"},{"location":"development/deployment-status/#sprint-planning","title":"Sprint Planning","text":"<p>Current Sprint (Sprint 5) - Start: 2024-03-04 - End: 2024-03-15 - Focus: Payment Integration &amp; Media Handling</p> <p>Planned Features: <pre><code>interface SprintPlanning {\n  sprint_5: {\n    features: {\n      payment_processing: {\n        issue: 'DOCK-123',\n        tasks: [\n          'Stripe API integration',\n          'Payment flow testing',\n          'Error handling'\n        ],\n        dependencies: ['API Security']\n      },\n      photo_upload: {\n        issue: 'DOCK-124',\n        tasks: [\n          'S3 bucket setup',\n          'Upload middleware',\n          'Image optimization'\n        ],\n        dependencies: ['Storage Service']\n      }\n    },\n    metrics: {\n      story_points: 34,\n      completion_target: '80%',\n      critical_features: [\n        'Payment flow',\n        'Basic photo upload'\n      ]\n    }\n  }\n}\n</code></pre></p>"},{"location":"development/deployment-status/#issue-status-automation","title":"Issue Status Automation","text":"<pre><code>interface IssueAutomation {\n  status_mapping: {\n    not_started: {\n      deployment_status: '\u274c',\n      jira_status: 'To Do',\n      github_label: 'status: planned'\n    },\n    in_progress: {\n      deployment_status: '\ud83d\udea7',\n      jira_status: 'In Progress',\n      github_label: 'status: in-progress'\n    },\n    completed: {\n      deployment_status: '\u2705',\n      jira_status: 'Done',\n      github_label: 'status: completed'\n    },\n    needs_update: {\n      deployment_status: '\ud83d\udd04',\n      jira_status: 'Reopened',\n      github_label: 'status: needs-update'\n    }\n  };\n\n  automation_hooks: {\n    on_status_change: [\n      'Update deployment status',\n      'Trigger notifications',\n      'Update sprint metrics'\n    ],\n    on_issue_update: [\n      'Sync status badges',\n      'Update recent changes',\n      'Notify stakeholders'\n    ]\n  };\n}\n</code></pre>"},{"location":"development/deployment-status/#integration-webhooks","title":"Integration Webhooks","text":"<pre><code>interface WebhookConfig {\n  github: {\n    events: [\n      'pull_request',\n      'issues',\n      'push'\n    ],\n    actions: {\n      on_merge: 'update_status',\n      on_issue_close: 'mark_completed',\n      on_deploy: 'verify_status'\n    }\n  };\n\n  jira: {\n    events: [\n      'issue_updated',\n      'sprint_changed',\n      'status_changed'\n    ],\n    actions: {\n      on_status_change: 'sync_deployment_status',\n      on_sprint_complete: 'update_phase_status',\n      on_issue_link: 'update_dependencies'\n    }\n  };\n}\n</code></pre>"},{"location":"development/deployment-status/#automated-updates","title":"Automated Updates","text":"<p>The deployment status is automatically updated through:</p> <ol> <li>GitHub Integration</li> <li>PR merges trigger status updates</li> <li>Issue closures update feature status</li> <li> <p>Commit messages with <code>feat:</code> update features</p> </li> <li> <p>Jira Integration</p> </li> <li>Sprint changes update planning</li> <li>Issue status syncs with deployment</li> <li> <p>Epic completion updates phases</p> </li> <li> <p>CI/CD Integration</p> </li> <li>Successful deployments verify status</li> <li>Test coverage updates quality metrics</li> <li>Build failures flag needs_update</li> </ol>"},{"location":"development/deployment-status/#status-update-commands","title":"Status Update Commands","text":"<p>Use these commands in commit messages or PR descriptions:</p> <pre><code># Mark feature as complete\n/feature complete DOCK-123\n\n# Update feature status\n/feature progress DOCK-124 \"S3 integration done\"\n\n# Flag feature for update\n/feature needs-update DOCK-125 \"API changes required\"\n\n# Link feature to issue\n/feature link DOCK-126 \"Maps integration\"\n</code></pre>"},{"location":"development/deployment/","title":"Deployment Guide","text":"<p>This guide provides comprehensive information about deploying the Dokkerr application across different environments.</p>"},{"location":"development/deployment/#deployment-overview","title":"Deployment Overview","text":""},{"location":"development/deployment/#deployment-architecture","title":"Deployment Architecture","text":"<pre><code>graph TD\n    A[Client Applications] --&gt; B[Load Balancer]\n    B --&gt; C[API Gateway]\n    C --&gt; D[Application Servers]\n    D --&gt; E[Database]\n    D --&gt; F[Cache]\n    D --&gt; G[Storage]</code></pre>"},{"location":"development/deployment/#deployment-environments","title":"Deployment Environments","text":"<ol> <li>Development</li> <li>Local development setup</li> <li>Development server</li> <li> <p>Test databases</p> </li> <li> <p>Staging</p> </li> <li>Pre-production environment</li> <li>Production-like setup</li> <li> <p>Testing and validation</p> </li> <li> <p>Production</p> </li> <li>Live environment</li> <li>High availability</li> <li>Production data</li> </ol>"},{"location":"development/deployment/#prerequisites","title":"Prerequisites","text":""},{"location":"development/deployment/#required-infrastructure","title":"Required Infrastructure","text":"<ul> <li>Cloud provider account (AWS, GCP, Azure)</li> <li>Domain name (www.dokkerr.com) and SSL certificates</li> <li>CI/CD pipeline setup</li> <li>Monitoring and logging tools</li> </ul>"},{"location":"development/deployment/#required-tools","title":"Required Tools","text":"<ul> <li>Docker and Docker Compose</li> <li>Kubernetes (for container orchestration)</li> <li>Terraform (for infrastructure as code)</li> <li>Helm (for Kubernetes package management)</li> </ul>"},{"location":"development/deployment/#infrastructure-setup","title":"Infrastructure Setup","text":""},{"location":"development/deployment/#1-cloud-resources","title":"1. Cloud Resources","text":"<pre><code># main.tf\nprovider \"aws\" {\n  region = \"us-west-2\"\n}\n\nmodule \"vpc\" {\n  source = \"terraform-aws-modules/vpc/aws\"\n\n  name = \"dokkerr-vpc\"\n  cidr = \"10.0.0.0/16\"\n\n  azs             = [\"us-west-2a\", \"us-west-2b\"]\n  private_subnets = [\"10.0.1.0/24\", \"10.0.2.0/24\"]\n  public_subnets  = [\"10.0.101.0/24\", \"10.0.102.0/24\"]\n}\n\nmodule \"eks\" {\n  source = \"terraform-aws-modules/eks/aws\"\n\n  cluster_name    = \"dokkerr-cluster\"\n  cluster_version = \"1.24\"\n\n  vpc_id     = module.vpc.vpc_id\n  subnet_ids = module.vpc.private_subnets\n}\n</code></pre>"},{"location":"development/deployment/#2-database-setup","title":"2. Database Setup","text":"<pre><code># database.yaml\napiVersion: apps/v1\nkind: StatefulSet\nmetadata:\n  name: postgres\nspec:\n  serviceName: postgres\n  replicas: 3\n  selector:\n    matchLabels:\n      app: postgres\n  template:\n    metadata:\n      labels:\n        app: postgres\n    spec:\n      containers:\n      - name: postgres\n        image: postgres:14\n        env:\n        - name: POSTGRES_DB\n          value: dokkerr\n        - name: POSTGRES_USER\n          valueFrom:\n            secretKeyRef:\n              name: postgres-secrets\n              key: username\n        - name: POSTGRES_PASSWORD\n          valueFrom:\n            secretKeyRef:\n              name: postgres-secrets\n              key: password\n</code></pre>"},{"location":"development/deployment/#3-cache-setup","title":"3. Cache Setup","text":"<pre><code># redis.yaml\napiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: redis\nspec:\n  replicas: 2\n  selector:\n    matchLabels:\n      app: redis\n  template:\n    metadata:\n      labels:\n        app: redis\n    spec:\n      containers:\n      - name: redis\n        image: redis:6\n        ports:\n        - containerPort: 6379\n        resources:\n          requests:\n            memory: \"256Mi\"\n            cpu: \"100m\"\n          limits:\n            memory: \"512Mi\"\n            cpu: \"200m\"\n</code></pre>"},{"location":"development/deployment/#application-deployment","title":"Application Deployment","text":""},{"location":"development/deployment/#1-docker-configuration","title":"1. Docker Configuration","text":"<pre><code># Dockerfile\nFROM node:18-alpine\n\nWORKDIR /app\n\nCOPY package*.json ./\nRUN npm ci\n\nCOPY . .\n\nRUN npm run build\n\nEXPOSE 3000\n\nCMD [\"npm\", \"start\"]\n</code></pre>"},{"location":"development/deployment/#2-kubernetes-deployment","title":"2. Kubernetes Deployment","text":"<pre><code># deployment.yaml\napiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: dokkerr-api\nspec:\n  replicas: 3\n  selector:\n    matchLabels:\n      app: dokkerr-api\n  template:\n    metadata:\n      labels:\n        app: dokkerr-api\n    spec:\n      containers:\n      - name: api\n        image: dokkerr/api:latest\n        ports:\n        - containerPort: 3000\n        env:\n        - name: NODE_ENV\n          value: \"production\"\n        - name: DATABASE_URL\n          valueFrom:\n            secretKeyRef:\n              name: app-secrets\n              key: database-url\n        - name: APP_URL\n          value: \"https://www.dokkerr.com\"\n        resources:\n          requests:\n            memory: \"512Mi\"\n            cpu: \"200m\"\n          limits:\n            memory: \"1Gi\"\n            cpu: \"500m\"\n</code></pre>"},{"location":"development/deployment/#3-service-configuration","title":"3. Service Configuration","text":"<pre><code># service.yaml\napiVersion: v1\nkind: Service\nmetadata:\n  name: dokkerr-api\n  annotations:\n    service.beta.kubernetes.io/aws-load-balancer-ssl-cert: \"arn:aws:acm:us-west-2:123456789012:certificate/abc123\"\n    service.beta.kubernetes.io/aws-load-balancer-backend-protocol: \"http\"\n    service.beta.kubernetes.io/aws-load-balancer-ssl-ports: \"443\"\nspec:\n  type: LoadBalancer\n  ports:\n  - port: 443\n    targetPort: 3000\n    protocol: TCP\n  selector:\n    app: dokkerr-api\n</code></pre>"},{"location":"development/deployment/#cicd-pipeline","title":"CI/CD Pipeline","text":""},{"location":"development/deployment/#1-github-actions-workflow","title":"1. GitHub Actions Workflow","text":"<pre><code>name: Deploy\n\non:\n  push:\n    branches: [ main ]\n\njobs:\n  deploy:\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@v2\n\n      - name: Configure AWS credentials\n        uses: aws-actions/configure-aws-credentials@v1\n        with:\n          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}\n          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}\n          aws-region: us-west-2\n\n      - name: Login to Amazon ECR\n        id: login-ecr\n        uses: aws-actions/amazon-ecr-login@v1\n\n      - name: Build and push Docker image\n        env:\n          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}\n          ECR_REPOSITORY: dokkerr-api\n          IMAGE_TAG: ${{ github.sha }}\n        run: |\n          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .\n          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG\n\n      - name: Deploy to EKS\n        run: |\n          aws eks update-kubeconfig --name dokkerr-cluster --region us-west-2\n          kubectl set image deployment/dokkerr-api api=$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG\n</code></pre>"},{"location":"development/deployment/#2-deployment-strategies","title":"2. Deployment Strategies","text":"<ol> <li> <p>Rolling Update <pre><code>spec:\n  strategy:\n    type: RollingUpdate\n    rollingUpdate:\n      maxSurge: 1\n      maxUnavailable: 1\n</code></pre></p> </li> <li> <p>Blue-Green Deployment <pre><code>apiVersion: argoproj.io/v1alpha1\nkind: Rollout\nmetadata:\n  name: dokkerr-api\nspec:\n  replicas: 3\n  selector:\n    matchLabels:\n      app: dokkerr-api\n  template:\n    metadata:\n      labels:\n        app: dokkerr-api\n    spec:\n      containers:\n      - name: api\n        image: dokkerr/api:latest\n  strategy:\n    blueGreen:\n      activeService: dokkerr-api-active\n      previewService: dokkerr-api-preview\n      autoPromotionEnabled: false\n</code></pre></p> </li> </ol>"},{"location":"development/deployment/#monitoring-and-logging","title":"Monitoring and Logging","text":""},{"location":"development/deployment/#1-prometheus-configuration","title":"1. Prometheus Configuration","text":"<pre><code># prometheus.yaml\napiVersion: monitoring.coreos.com/v1\nkind: ServiceMonitor\nmetadata:\n  name: dokkerr-api\nspec:\n  selector:\n    matchLabels:\n      app: dokkerr-api\n  endpoints:\n  - port: metrics\n    interval: 15s\n</code></pre>"},{"location":"development/deployment/#2-grafana-dashboard","title":"2. Grafana Dashboard","text":"<pre><code>{\n  \"dashboard\": {\n    \"id\": null,\n    \"title\": \"Dokkerr API Metrics\",\n    \"panels\": [\n      {\n        \"title\": \"Request Rate\",\n        \"type\": \"graph\",\n        \"datasource\": \"Prometheus\",\n        \"targets\": [\n          {\n            \"expr\": \"rate(http_requests_total[5m])\",\n            \"legendFormat\": \"{{method}} {{route}}\"\n          }\n        ]\n      }\n    ]\n  }\n}\n</code></pre>"},{"location":"development/deployment/#3-log-aggregation","title":"3. Log Aggregation","text":"<pre><code># fluentd.yaml\napiVersion: apps/v1\nkind: DaemonSet\nmetadata:\n  name: fluentd\nspec:\n  template:\n    spec:\n      containers:\n      - name: fluentd\n        image: fluent/fluentd-kubernetes-daemonset:v1\n        volumeMounts:\n        - name: varlog\n          mountPath: /var/log\n        - name: varlibdockercontainers\n          mountPath: /var/lib/docker/containers\n          readOnly: true\n</code></pre>"},{"location":"development/deployment/#security-configuration","title":"Security Configuration","text":""},{"location":"development/deployment/#1-network-policies","title":"1. Network Policies","text":"<pre><code># network-policy.yaml\napiVersion: networking.k8s.io/v1\nkind: NetworkPolicy\nmetadata:\n  name: api-network-policy\nspec:\n  podSelector:\n    matchLabels:\n      app: dokkerr-api\n  policyTypes:\n  - Ingress\n  - Egress\n  ingress:\n  - from:\n    - podSelector:\n        matchLabels:\n          app: nginx-ingress\n    ports:\n    - protocol: TCP\n      port: 3000\n</code></pre>"},{"location":"development/deployment/#2-secret-management","title":"2. Secret Management","text":"<pre><code># secrets.yaml\napiVersion: v1\nkind: Secret\nmetadata:\n  name: app-secrets\ntype: Opaque\ndata:\n  database-url: &lt;base64-encoded-url&gt;\n  jwt-secret: &lt;base64-encoded-secret&gt;\n  stripe-key: &lt;base64-encoded-key&gt;\n  app-url: &lt;base64-encoded-url&gt;\n</code></pre>"},{"location":"development/deployment/#backup-and-recovery","title":"Backup and Recovery","text":""},{"location":"development/deployment/#1-database-backup","title":"1. Database Backup","text":"<pre><code># backup-job.yaml\napiVersion: batch/v1\nkind: CronJob\nmetadata:\n  name: db-backup\nspec:\n  schedule: \"0 0 * * *\"\n  jobTemplate:\n    spec:\n      template:\n        spec:\n          containers:\n          - name: backup\n            image: postgres:14\n            command: [\"pg_dump\"]\n            args: [\"-h\", \"postgres\", \"-U\", \"postgres\", \"-d\", \"dokkerr\"]\n            env:\n            - name: PGPASSWORD\n              valueFrom:\n                secretKeyRef:\n                  name: postgres-secrets\n                  key: password\n          restartPolicy: OnFailure\n</code></pre>"},{"location":"development/deployment/#2-disaster-recovery","title":"2. Disaster Recovery","text":"<ol> <li> <p>Backup Verification <pre><code># Verify backup integrity\npg_restore -l backup.dump\n</code></pre></p> </li> <li> <p>Recovery Procedure <pre><code># Restore from backup\npg_restore -d dokkerr backup.dump\n</code></pre></p> </li> </ol>"},{"location":"development/deployment/#scaling-and-performance","title":"Scaling and Performance","text":""},{"location":"development/deployment/#1-horizontal-pod-autoscaling","title":"1. Horizontal Pod Autoscaling","text":"<pre><code># hpa.yaml\napiVersion: autoscaling/v2\nkind: HorizontalPodAutoscaler\nmetadata:\n  name: dokkerr-api\nspec:\n  scaleTargetRef:\n    apiVersion: apps/v1\n    kind: Deployment\n    name: dokkerr-api\n  minReplicas: 3\n  maxReplicas: 10\n  metrics:\n  - type: Resource\n    resource:\n      name: cpu\n      target:\n        type: Utilization\n        averageUtilization: 70\n</code></pre>"},{"location":"development/deployment/#2-resource-optimization","title":"2. Resource Optimization","text":"<pre><code># resource-quota.yaml\napiVersion: v1\nkind: ResourceQuota\nmetadata:\n  name: compute-resources\nspec:\n  hard:\n    requests.cpu: \"4\"\n    requests.memory: 8Gi\n    limits.cpu: \"8\"\n    limits.memory: 16Gi\n</code></pre>"},{"location":"development/deployment/#maintenance-procedures","title":"Maintenance Procedures","text":""},{"location":"development/deployment/#1-regular-maintenance","title":"1. Regular Maintenance","text":"<ul> <li>Weekly security updates</li> <li>Monthly dependency updates</li> <li>Quarterly performance reviews</li> <li>Annual infrastructure audit</li> </ul>"},{"location":"development/deployment/#2-emergency-procedures","title":"2. Emergency Procedures","text":"<ol> <li>Service Outage</li> <li>Identify root cause</li> <li>Apply hotfix if needed</li> <li>Rollback if necessary</li> <li> <p>Update documentation</p> </li> <li> <p>Data Issues</p> </li> <li>Verify backup integrity</li> <li>Restore from backup if needed</li> <li>Update affected records</li> <li>Document incident</li> </ol>"},{"location":"development/deployment/#additional-resources","title":"Additional Resources","text":"<ul> <li>Kubernetes Documentation</li> <li>AWS EKS Documentation</li> <li>Terraform Documentation</li> <li>Prometheus Documentation</li> <li>Grafana Documentation</li> <li>Dokkerr Documentation</li> <li>Dokkerr API Documentation</li> <li>Dokkerr Support </li> </ul>"},{"location":"development/git-workflow/","title":"Git Workflow","text":""},{"location":"development/git-workflow/#overview","title":"Overview","text":"<p>Dokkerr follows a trunk-based development workflow with feature branches and automated CI/CD pipelines. This document outlines our Git practices, branch management, and release procedures.</p>"},{"location":"development/git-workflow/#branch-structure","title":"Branch Structure","text":"<pre><code>gitGraph\n    commit\n    branch develop\n    checkout develop\n    commit\n    branch feature/user-auth\n    checkout feature/user-auth\n    commit\n    commit\n    checkout develop\n    merge feature/user-auth\n    branch feature/payments\n    checkout feature/payments\n    commit\n    checkout develop\n    merge feature/payments\n    checkout main\n    merge develop\n    branch hotfix/security\n    checkout hotfix/security\n    commit\n    checkout main\n    merge hotfix/security</code></pre>"},{"location":"development/git-workflow/#branch-types","title":"Branch Types","text":"<pre><code>interface BranchTypes {\n  main: {\n    purpose: 'Production-ready code',\n    protection: true,\n    requiresApproval: true\n  };\n  develop: {\n    purpose: 'Integration branch for features',\n    protection: true,\n    requiresApproval: true\n  };\n  feature: {\n    pattern: 'feature/*',\n    purpose: 'New features and enhancements',\n    protection: false\n  };\n  bugfix: {\n    pattern: 'bugfix/*',\n    purpose: 'Bug fixes for upcoming release',\n    protection: false\n  };\n  hotfix: {\n    pattern: 'hotfix/*',\n    purpose: 'Critical production fixes',\n    protection: false\n  };\n  release: {\n    pattern: 'release/*',\n    purpose: 'Release preparation',\n    protection: true\n  };\n}\n</code></pre>"},{"location":"development/git-workflow/#development-workflow","title":"Development Workflow","text":""},{"location":"development/git-workflow/#starting-new-work","title":"Starting New Work","text":"<pre><code># 1. Update develop branch\ngit checkout develop\ngit pull origin develop\n\n# 2. Create feature branch\ngit checkout -b feature/user-notifications\n\n# 3. Make changes and commit\ngit add .\ngit commit -m \"feat(notifications): implement push notifications\"\n\n# 4. Push branch\ngit push -u origin feature/user-notifications\n</code></pre>"},{"location":"development/git-workflow/#code-review-process","title":"Code Review Process","text":"<pre><code>interface PullRequestTemplate {\n  title: string;\n  description: {\n    summary: string;\n    changes: string[];\n    testing: string;\n    screenshots?: string[];\n  };\n  checklist: {\n    documentation: boolean;\n    tests: boolean;\n    linting: boolean;\n    accessibility: boolean;\n  };\n  reviewers: string[];\n  labels: string[];\n}\n\nconst prTemplate = {\n  title: 'feat(notifications): implement push notifications',\n  description: {\n    summary: 'Add Firebase Cloud Messaging for push notifications',\n    changes: [\n      'Implement FCM integration',\n      'Add notification preferences',\n      'Update user settings UI'\n    ],\n    testing: 'Added unit tests and integration tests'\n  },\n  checklist: {\n    documentation: true,\n    tests: true,\n    linting: true,\n    accessibility: true\n  },\n  reviewers: ['@tech-lead', '@senior-dev'],\n  labels: ['feature', 'notifications']\n};\n</code></pre>"},{"location":"development/git-workflow/#merge-requirements","title":"Merge Requirements","text":"<pre><code>interface MergeRequirements {\n  checks: {\n    ci: boolean;\n    codeReview: boolean;\n    testsPass: boolean;\n    lintingPass: boolean;\n    conflictsResolved: boolean;\n  };\n  approvals: {\n    required: number;\n    fromCodeOwners: boolean;\n  };\n  updates: {\n    branchUpToDate: boolean;\n    changelogUpdated: boolean;\n  };\n}\n</code></pre>"},{"location":"development/git-workflow/#release-process","title":"Release Process","text":""},{"location":"development/git-workflow/#version-control","title":"Version Control","text":"<pre><code>interface VersioningStrategy {\n  pattern: 'MAJOR.MINOR.PATCH';\n  rules: {\n    major: 'Breaking changes',\n    minor: 'New features',\n    patch: 'Bug fixes'\n  };\n  tags: {\n    format: 'v1.2.3',\n    signed: true,\n    annotated: true\n  };\n}\n\nclass ReleaseManager {\n  static async prepareRelease(version: string) {\n    // 1. Create release branch\n    await git.checkout('develop');\n    await git.createBranch(`release/${version}`);\n\n    // 2. Update version\n    await this.updateVersion(version);\n\n    // 3. Update changelog\n    await this.updateChangelog(version);\n\n    // 4. Create release commit\n    await git.commit(`chore(release): prepare ${version}`);\n\n    // 5. Create tag\n    await git.tag(`v${version}`, 'Release ' + version);\n  }\n}\n</code></pre>"},{"location":"development/git-workflow/#changelog-management","title":"Changelog Management","text":"<pre><code>interface ChangelogEntry {\n  version: string;\n  date: string;\n  changes: {\n    added: string[];\n    changed: string[];\n    deprecated: string[];\n    removed: string[];\n    fixed: string[];\n    security: string[];\n  };\n}\n\nconst changelogTemplate = {\n  version: '1.2.0',\n  date: '2024-03-07',\n  changes: {\n    added: [\n      'Push notification support',\n      'User notification preferences'\n    ],\n    changed: [\n      'Updated notification UI',\n      'Improved error handling'\n    ],\n    fixed: [\n      'Fixed notification delivery issues'\n    ]\n  }\n};\n</code></pre>"},{"location":"development/git-workflow/#cicd-integration","title":"CI/CD Integration","text":""},{"location":"development/git-workflow/#github-actions-workflow","title":"GitHub Actions Workflow","text":"<pre><code>name: CI/CD Pipeline\n\non:\n  push:\n    branches: [main, develop]\n  pull_request:\n    branches: [main, develop]\n\njobs:\n  validate:\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@v2\n      - name: Setup Node.js\n        uses: actions/setup-node@v2\n      - name: Install dependencies\n        run: npm ci\n      - name: Lint code\n        run: npm run lint\n      - name: Run tests\n        run: npm run test\n      - name: Build\n        run: npm run build\n\n  deploy:\n    needs: validate\n    if: github.ref == 'refs/heads/main'\n    runs-on: ubuntu-latest\n    steps:\n      - name: Deploy to production\n        run: npm run deploy\n</code></pre>"},{"location":"development/git-workflow/#best-practices","title":"Best Practices","text":""},{"location":"development/git-workflow/#commit-guidelines","title":"Commit Guidelines","text":"<pre><code>interface CommitMessage {\n  type: 'feat' | 'fix' | 'docs' | 'style' | 'refactor' | 'test' | 'chore';\n  scope?: string;\n  description: string;\n  body?: string;\n  breaking?: boolean;\n  closes?: string[];\n}\n\nconst commitExamples = [\n  {\n    message: 'feat(auth): add multi-factor authentication',\n    description: 'New feature with scope'\n  },\n  {\n    message: 'fix: handle null response in search',\n    description: 'Bug fix without scope'\n  },\n  {\n    message: 'BREAKING CHANGE: remove deprecated API endpoints',\n    description: 'Breaking change'\n  }\n];\n</code></pre>"},{"location":"development/git-workflow/#code-review-guidelines","title":"Code Review Guidelines","text":"<ol> <li>Review Checklist</li> <li>Code follows style guide</li> <li>Tests are included</li> <li>Documentation is updated</li> <li>Performance impact considered</li> <li> <p>Security implications reviewed</p> </li> <li> <p>Review Etiquette</p> </li> <li>Be constructive and respectful</li> <li>Focus on code, not the author</li> <li>Explain reasoning for changes</li> <li> <p>Respond to comments promptly</p> </li> <li> <p>Common Review Points</p> </li> <li>Code readability</li> <li>Error handling</li> <li>Edge cases</li> <li>Security concerns</li> <li>Performance implications</li> </ol>"},{"location":"development/git-workflow/#troubleshooting","title":"Troubleshooting","text":"<p>Common Git issues and solutions:</p> <ol> <li> <p>Merge Conflicts <pre><code># 1. Update branches\ngit fetch origin\ngit checkout feature-branch\ngit rebase origin/develop\n\n# 2. Resolve conflicts\n# Edit conflicted files\ngit add .\ngit rebase --continue\n</code></pre></p> </li> <li> <p>Undo Changes <pre><code># Undo last commit\ngit reset --soft HEAD^\n\n# Undo commits but keep changes\ngit reset --soft HEAD~3\n\n# Discard all local changes\ngit reset --hard origin/develop\n</code></pre></p> </li> <li> <p>Branch Management <pre><code># Clean up local branches\ngit fetch -p\ngit branch -vv | grep ': gone]' | awk '{print $1}' | xargs git branch -D\n\n# Force update branch\ngit fetch origin\ngit reset --hard origin/develop\n</code></pre></p> </li> </ol>"},{"location":"development/open-source-vs-proprietary/","title":"Open Source vs Proprietary Software: A Comparison","text":"<p>This document outlines the key benefits and considerations of open source versus proprietary software, specifically in the context of Dokkerr.</p>"},{"location":"development/open-source-vs-proprietary/#open-source-benefits","title":"Open Source Benefits","text":""},{"location":"development/open-source-vs-proprietary/#1-community-collaboration","title":"1. Community Collaboration","text":"<ul> <li>Diverse Contributors: Access to a global community of developers</li> <li>Knowledge Sharing: Collective problem-solving and innovation</li> <li>Peer Review: Code quality improvement through community feedback</li> <li>Network Effect: Growing ecosystem of users and contributors</li> </ul>"},{"location":"development/open-source-vs-proprietary/#2-cost-efficiency","title":"2. Cost Efficiency","text":"<ul> <li>No Licensing Fees: Free to use, modify, and distribute</li> <li>Reduced Development Costs: Leverage existing open source components</li> <li>Lower Maintenance Costs: Community-driven bug fixes and updates</li> <li>Flexible Deployment: No per-seat or usage-based licensing</li> </ul>"},{"location":"development/open-source-vs-proprietary/#3-transparency-and-security","title":"3. Transparency and Security","text":"<ul> <li>Code Visibility: Full access to source code for security audits</li> <li>Community Security: Rapid identification and fixing of vulnerabilities</li> <li>No Vendor Lock-in: Freedom to modify or switch implementations</li> <li>Trust Building: Transparent development process</li> </ul>"},{"location":"development/open-source-vs-proprietary/#4-customization-and-control","title":"4. Customization and Control","text":"<ul> <li>Code Modification: Freedom to adapt code to specific needs</li> <li>Feature Addition: Ability to add custom features</li> <li>Integration Control: Direct control over system integrations</li> <li>Version Management: Control over update timing and implementation</li> </ul>"},{"location":"development/open-source-vs-proprietary/#5-long-term-sustainability","title":"5. Long-term Sustainability","text":"<ul> <li>Community Support: Multiple sources of support and expertise</li> <li>Vendor Independence: Not dependent on a single company</li> <li>Future-proofing: Ability to maintain and evolve the software</li> <li>Legacy Support: Community can maintain older versions</li> </ul>"},{"location":"development/open-source-vs-proprietary/#proprietary-software-benefits","title":"Proprietary Software Benefits","text":""},{"location":"development/open-source-vs-proprietary/#1-commercial-support","title":"1. Commercial Support","text":"<ul> <li>Dedicated Support: Professional technical support team</li> <li>Service Level Agreements: Guaranteed response times</li> <li>Account Management: Dedicated account representatives</li> <li>Training Services: Professional training and documentation</li> </ul>"},{"location":"development/open-source-vs-proprietary/#2-product-development","title":"2. Product Development","text":"<ul> <li>Focused Roadmap: Clear product direction and planning</li> <li>Quality Control: Centralized quality assurance</li> <li>Feature Prioritization: Business-driven feature selection</li> <li>Consistent Updates: Regular, planned release cycles</li> </ul>"},{"location":"development/open-source-vs-proprietary/#3-business-integration","title":"3. Business Integration","text":"<ul> <li>Enterprise Features: Advanced security and compliance</li> <li>Integration Support: Professional integration services</li> <li>Compliance Tools: Built-in regulatory compliance</li> <li>Enterprise Support: Dedicated enterprise support teams</li> </ul>"},{"location":"development/open-source-vs-proprietary/#4-intellectual-property","title":"4. Intellectual Property","text":"<ul> <li>IP Protection: Protected intellectual property rights</li> <li>Brand Control: Controlled brand representation</li> <li>Market Exclusivity: Competitive advantage through unique features</li> <li>Revenue Generation: Direct monetization opportunities</li> </ul>"},{"location":"development/open-source-vs-proprietary/#5-resource-management","title":"5. Resource Management","text":"<ul> <li>Centralized Development: Coordinated development efforts</li> <li>Resource Allocation: Efficient resource utilization</li> <li>Cost Predictability: Fixed costs and predictable budgets</li> <li>Risk Management: Controlled risk through professional management</li> </ul>"},{"location":"development/open-source-vs-proprietary/#dokkerrs-approach","title":"Dokkerr's Approach","text":""},{"location":"development/open-source-vs-proprietary/#why-we-chose-open-source","title":"Why We Chose Open Source","text":"<ol> <li>Community-Driven Innovation</li> <li>Leverage global expertise in dock management</li> <li>Foster innovation through community contributions</li> <li> <p>Build a sustainable ecosystem</p> </li> <li> <p>Transparency and Trust</p> </li> <li>Build trust with dock owners and renters</li> <li>Enable security audits and compliance</li> <li> <p>Demonstrate commitment to quality</p> </li> <li> <p>Flexibility and Customization</p> </li> <li>Adapt to local market needs</li> <li>Enable integration with existing systems</li> <li> <p>Support various business models</p> </li> <li> <p>Cost-Effective Development</p> </li> <li>Reduce development and maintenance costs</li> <li>Leverage existing open source components</li> <li>Scale efficiently</li> </ol>"},{"location":"development/open-source-vs-proprietary/#our-hybrid-model","title":"Our Hybrid Model","text":"<p>While Dokkerr is open source, we offer:</p> <ol> <li>Professional Services</li> <li>Enterprise support packages</li> <li>Custom development services</li> <li> <p>Training and consulting</p> </li> <li> <p>Commercial Features</p> </li> <li>Premium features for enterprise users</li> <li>Advanced analytics and reporting</li> <li> <p>Priority support and SLAs</p> </li> <li> <p>Managed Services</p> </li> <li>Hosted solutions</li> <li>Managed updates and maintenance</li> <li>Professional deployment services</li> </ol>"},{"location":"development/open-source-vs-proprietary/#making-the-choice","title":"Making the Choice","text":""},{"location":"development/open-source-vs-proprietary/#when-to-choose-open-source","title":"When to Choose Open Source","text":"<ol> <li>For Organizations</li> <li>Need for customization</li> <li>Budget constraints</li> <li>Desire for control</li> <li> <p>Long-term sustainability focus</p> </li> <li> <p>For Developers</p> </li> <li>Learning opportunities</li> <li>Community engagement</li> <li>Portfolio building</li> <li> <p>Skill development</p> </li> <li> <p>For Users</p> </li> <li>Cost sensitivity</li> <li>Need for transparency</li> <li>Desire for independence</li> <li>Community support preference</li> </ol>"},{"location":"development/open-source-vs-proprietary/#when-to-choose-proprietary","title":"When to Choose Proprietary","text":"<ol> <li>For Organizations</li> <li>Need for dedicated support</li> <li>Compliance requirements</li> <li>Enterprise features</li> <li> <p>Risk management focus</p> </li> <li> <p>For Developers</p> </li> <li>Stable employment</li> <li>Focused development</li> <li>Clear career path</li> <li> <p>Professional training</p> </li> <li> <p>For Users</p> </li> <li>Turnkey solutions</li> <li>Professional support</li> <li>Guaranteed updates</li> <li>Enterprise features</li> </ol>"},{"location":"development/open-source-vs-proprietary/#conclusion","title":"Conclusion","text":"<p>The choice between open source and proprietary software depends on your specific needs, resources, and goals. Dokkerr's open source approach provides the best of both worlds:</p> <ul> <li>Community-driven innovation and transparency</li> <li>Professional support and enterprise features</li> <li>Flexibility and customization options</li> <li>Sustainable long-term development</li> </ul> <p>We encourage organizations to evaluate their specific requirements and consider how Dokkerr's open source model can benefit their operations. </p>"},{"location":"development/release-process/","title":"release process","text":"<p>This page is under construction.</p>"},{"location":"development/setup/","title":"Development Setup Guide","text":"<p>This guide will help you set up your development environment for the Dokkerr application.</p>"},{"location":"development/setup/#prerequisites","title":"Prerequisites","text":""},{"location":"development/setup/#required-software","title":"Required Software","text":"<ul> <li>Node.js (v18 or higher)</li> <li>npm (v9 or higher)</li> <li>Git</li> <li>Android Studio (for mobile app development)</li> <li>VS Code (recommended)</li> </ul>"},{"location":"development/setup/#system-requirements","title":"System Requirements","text":"<ul> <li>Operating System: macOS, Windows, or Linux</li> <li>RAM: 8GB minimum (16GB recommended)</li> <li>Disk Space: 10GB minimum</li> <li>Internet connection for package downloads</li> </ul>"},{"location":"development/setup/#initial-setup","title":"Initial Setup","text":""},{"location":"development/setup/#1-clone-the-repository","title":"1. Clone the Repository","text":"<pre><code>git clone https://github.com/dokkerr/dokkerr.git\ncd dokkerr\n</code></pre>"},{"location":"development/setup/#2-install-dependencies","title":"2. Install Dependencies","text":"<pre><code># Install root dependencies\nnpm install\n\n# Install documentation dependencies\ncd dokkerr-docs\nnpm install\n\n# Install mobile app dependencies\ncd ../mobile\nnpm install\n\n# Install web app dependencies\ncd ../web\nnpm install\n</code></pre>"},{"location":"development/setup/#3-environment-configuration","title":"3. Environment Configuration","text":"<p>Create a <code>.env</code> file in the root directory: <pre><code># API Configuration\nAPI_URL=http://localhost:3000\nAPI_KEY=your_api_key_here\n\n# Database Configuration\nDB_HOST=localhost\nDB_PORT=5432\nDB_NAME=dokkerr\nDB_USER=your_db_user\nDB_PASSWORD=your_db_password\n\n# Authentication\nJWT_SECRET=your_jwt_secret\nJWT_EXPIRY=24h\n\n# External Services\nSTRIPE_SECRET_KEY=your_stripe_secret_key\nGOOGLE_MAPS_API_KEY=your_google_maps_api_key\n</code></pre></p>"},{"location":"development/setup/#development-workflow","title":"Development Workflow","text":""},{"location":"development/setup/#1-start-documentation-server","title":"1. Start Documentation Server","text":"<p><pre><code>cd dokkerr-docs\nnpm run docs:dev\n</code></pre> The documentation will be available at <code>http://localhost:5173</code></p>"},{"location":"development/setup/#2-start-api-server","title":"2. Start API Server","text":"<p><pre><code>cd api\nnpm run dev\n</code></pre> The API server will run on <code>http://localhost:3000</code></p>"},{"location":"development/setup/#3-start-web-application","title":"3. Start Web Application","text":"<p><pre><code>cd web\nnpm run dev\n</code></pre> The web application will be available at <code>http://localhost:5174</code></p>"},{"location":"development/setup/#4-start-mobile-application","title":"4. Start Mobile Application","text":"<pre><code>cd mobile\nnpm run android  # For Android\nnpm run ios     # For iOS\n</code></pre>"},{"location":"development/setup/#database-setup","title":"Database Setup","text":""},{"location":"development/setup/#1-install-postgresql","title":"1. Install PostgreSQL","text":"<ul> <li>Download and install PostgreSQL from postgresql.org</li> <li>Create a new database: <pre><code>CREATE DATABASE dokkerr;\n</code></pre></li> </ul>"},{"location":"development/setup/#2-run-migrations","title":"2. Run Migrations","text":"<pre><code>cd api\nnpm run migrate\n</code></pre>"},{"location":"development/setup/#3-seed-initial-data","title":"3. Seed Initial Data","text":"<pre><code>npm run seed\n</code></pre>"},{"location":"development/setup/#testing-setup","title":"Testing Setup","text":""},{"location":"development/setup/#1-install-testing-dependencies","title":"1. Install Testing Dependencies","text":"<pre><code>npm install --save-dev jest @testing-library/react @testing-library/jest-dom\n</code></pre>"},{"location":"development/setup/#2-run-tests","title":"2. Run Tests","text":"<pre><code># Run all tests\nnpm test\n\n# Run specific test file\nnpm test -- path/to/test/file\n\n# Run tests with coverage\nnpm run test:coverage\n</code></pre>"},{"location":"development/setup/#code-style-and-linting","title":"Code Style and Linting","text":""},{"location":"development/setup/#1-install-eslint-and-prettier","title":"1. Install ESLint and Prettier","text":"<pre><code>npm install --save-dev eslint prettier eslint-config-prettier eslint-plugin-prettier\n</code></pre>"},{"location":"development/setup/#2-configure-eslint","title":"2. Configure ESLint","text":"<p>Create <code>.eslintrc.js</code>: <pre><code>module.exports = {\n  extends: [\n    'eslint:recommended',\n    'plugin:react/recommended',\n    'plugin:prettier/recommended'\n  ],\n  rules: {\n    'react/react-in-jsx-scope': 'off',\n    'prettier/prettier': 'error'\n  }\n}\n</code></pre></p>"},{"location":"development/setup/#3-configure-prettier","title":"3. Configure Prettier","text":"<p>Create <code>.prettierrc</code>: <pre><code>{\n  \"semi\": true,\n  \"singleQuote\": true,\n  \"tabWidth\": 2,\n  \"trailingComma\": \"es5\"\n}\n</code></pre></p>"},{"location":"development/setup/#debugging-setup","title":"Debugging Setup","text":""},{"location":"development/setup/#1-vs-code-configuration","title":"1. VS Code Configuration","text":"<p>Create <code>.vscode/launch.json</code>: <pre><code>{\n  \"version\": \"0.2.0\",\n  \"configurations\": [\n    {\n      \"type\": \"node\",\n      \"request\": \"launch\",\n      \"name\": \"Debug API\",\n      \"program\": \"${workspaceFolder}/api/src/index.js\"\n    },\n    {\n      \"type\": \"chrome\",\n      \"request\": \"launch\",\n      \"name\": \"Debug Web App\",\n      \"url\": \"http://localhost:5174\"\n    }\n  ]\n}\n</code></pre></p>"},{"location":"development/setup/#2-mobile-debugging","title":"2. Mobile Debugging","text":"<ul> <li>Enable Developer Options on your Android device</li> <li>Enable USB Debugging</li> <li>Connect your device via USB</li> <li>Run <code>adb devices</code> to verify connection</li> </ul>"},{"location":"development/setup/#common-issues-and-solutions","title":"Common Issues and Solutions","text":""},{"location":"development/setup/#1-port-conflicts","title":"1. Port Conflicts","text":"<p>If you encounter port conflicts: <pre><code># Find process using port\nlsof -i :3000\n\n# Kill process\nkill -9 &lt;PID&gt;\n</code></pre></p>"},{"location":"development/setup/#2-database-connection-issues","title":"2. Database Connection Issues","text":"<ul> <li>Verify PostgreSQL is running</li> <li>Check database credentials in <code>.env</code></li> <li>Ensure database exists</li> </ul>"},{"location":"development/setup/#3-mobile-build-issues","title":"3. Mobile Build Issues","text":"<ul> <li>Clean Android build: <code>cd android &amp;&amp; ./gradlew clean</code></li> <li>Reset Metro bundler: <code>npm start -- --reset-cache</code></li> <li>Clear npm cache: <code>npm cache clean --force</code></li> </ul>"},{"location":"development/setup/#additional-resources","title":"Additional Resources","text":"<ul> <li>API Documentation</li> <li>Database Schema</li> <li>Mobile App Architecture</li> <li>Contributing Guidelines</li> <li>Testing Guide </li> </ul>"},{"location":"development/testing/","title":"Testing Strategy","text":""},{"location":"development/testing/#overview","title":"Overview","text":"<p>Dokkerr implements a comprehensive testing strategy to ensure code quality, reliability, and maintainability. This document outlines our testing practices, tools, and procedures.</p>"},{"location":"development/testing/#testing-pyramid","title":"Testing Pyramid","text":"<pre><code>graph TD\n    E2E[End-to-End Tests] --&gt; Integration[Integration Tests]\n    Integration --&gt; Unit[Unit Tests]\n\n    style E2E fill:#f9f,stroke:#333,stroke-width:2px\n    style Integration fill:#bbf,stroke:#333,stroke-width:2px\n    style Unit fill:#bfb,stroke:#333,stroke-width:2px</code></pre>"},{"location":"development/testing/#unit-testing","title":"Unit Testing","text":""},{"location":"development/testing/#test-structure","title":"Test Structure","text":"<pre><code>import { ListingService } from '../services/listing';\nimport { createMockListing } from '../mocks/listing';\n\ndescribe('ListingService', () =&gt; {\n  let listingService: ListingService;\n  let mockDb: jest.Mocked&lt;Database&gt;;\n\n  beforeEach(() =&gt; {\n    mockDb = createMockDatabase();\n    listingService = new ListingService(mockDb);\n  });\n\n  describe('createListing', () =&gt; {\n    it('should create a new listing with valid data', async () =&gt; {\n      // Arrange\n      const listingData = createMockListing();\n      mockDb.listings.create.mockResolvedValue(listingData);\n\n      // Act\n      const result = await listingService.createListing(listingData);\n\n      // Assert\n      expect(result).toEqual(listingData);\n      expect(mockDb.listings.create).toHaveBeenCalledWith({\n        data: listingData\n      });\n    });\n\n    it('should throw validation error for invalid data', async () =&gt; {\n      // Arrange\n      const invalidData = { title: '' };\n\n      // Act &amp; Assert\n      await expect(\n        listingService.createListing(invalidData)\n      ).rejects.toThrow('Invalid listing data');\n    });\n  });\n});\n</code></pre>"},{"location":"development/testing/#mocking-strategy","title":"Mocking Strategy","text":"<pre><code>// Mock factory\ninterface MockFactory&lt;T&gt; {\n  create: () =&gt; T;\n  createMany: (count: number) =&gt; T[];\n  override: (partial: Partial&lt;T&gt;) =&gt; T;\n}\n\n// Example mock factory\nconst userMockFactory: MockFactory&lt;User&gt; = {\n  create: () =&gt; ({\n    id: faker.string.uuid(),\n    email: faker.internet.email(),\n    name: faker.person.fullName(),\n    role: 'user',\n    createdAt: faker.date.recent()\n  }),\n\n  createMany: (count) =&gt; \n    Array.from({ length: count }, () =&gt; userMockFactory.create()),\n\n  override: (partial) =&gt; ({\n    ...userMockFactory.create(),\n    ...partial\n  })\n};\n\n// Mock service dependencies\nclass MockDependencies {\n  static createMockDb() {\n    return {\n      users: {\n        findUnique: jest.fn(),\n        create: jest.fn(),\n        update: jest.fn(),\n        delete: jest.fn()\n      },\n      listings: {\n        findMany: jest.fn(),\n        create: jest.fn(),\n        update: jest.fn()\n      }\n    };\n  }\n\n  static createMockCache() {\n    return {\n      get: jest.fn(),\n      set: jest.fn(),\n      delete: jest.fn()\n    };\n  }\n}\n</code></pre>"},{"location":"development/testing/#integration-testing","title":"Integration Testing","text":""},{"location":"development/testing/#api-tests","title":"API Tests","text":"<pre><code>import request from 'supertest';\nimport { app } from '../app';\nimport { setupTestDatabase } from '../test/utils';\n\ndescribe('Listing API', () =&gt; {\n  beforeAll(async () =&gt; {\n    await setupTestDatabase();\n  });\n\n  describe('GET /api/listings', () =&gt; {\n    it('should return paginated listings', async () =&gt; {\n      // Arrange\n      const page = 1;\n      const limit = 10;\n\n      // Act\n      const response = await request(app)\n        .get('/api/listings')\n        .query({ page, limit })\n        .set('Authorization', `Bearer ${testToken}`);\n\n      // Assert\n      expect(response.status).toBe(200);\n      expect(response.body).toMatchObject({\n        data: expect.arrayContaining([\n          expect.objectContaining({\n            id: expect.any(String),\n            title: expect.any(String)\n          })\n        ]),\n        pagination: {\n          page,\n          limit,\n          total: expect.any(Number)\n        }\n      });\n    });\n\n    it('should filter listings by location', async () =&gt; {\n      // Arrange\n      const location = {\n        latitude: 25.7617,\n        longitude: -80.1918,\n        radius: 10\n      };\n\n      // Act\n      const response = await request(app)\n        .get('/api/listings')\n        .query(location)\n        .set('Authorization', `Bearer ${testToken}`);\n\n      // Assert\n      expect(response.status).toBe(200);\n      expect(response.body.data).toEqual(\n        expect.arrayContaining([\n          expect.objectContaining({\n            location: expect.objectContaining({\n              latitude: expect.any(Number),\n              longitude: expect.any(Number)\n            })\n          })\n        ])\n      );\n    });\n  });\n});\n</code></pre>"},{"location":"development/testing/#database-tests","title":"Database Tests","text":"<pre><code>import { PrismaClient } from '@prisma/client';\nimport { createTestDatabase } from '../test/utils';\n\ndescribe('Database Integration', () =&gt; {\n  let prisma: PrismaClient;\n\n  beforeAll(async () =&gt; {\n    prisma = await createTestDatabase();\n  });\n\n  afterAll(async () =&gt; {\n    await prisma.$disconnect();\n  });\n\n  describe('Listing Operations', () =&gt; {\n    it('should handle complex queries with relations', async () =&gt; {\n      // Arrange\n      const owner = await prisma.user.create({\n        data: userMockFactory.create()\n      });\n\n      const listing = await prisma.listing.create({\n        data: {\n          ...listingMockFactory.create(),\n          ownerId: owner.id\n        }\n      });\n\n      // Act\n      const result = await prisma.listing.findUnique({\n        where: { id: listing.id },\n        include: {\n          owner: true,\n          bookings: true,\n          reviews: true\n        }\n      });\n\n      // Assert\n      expect(result).toMatchObject({\n        id: listing.id,\n        owner: {\n          id: owner.id\n        },\n        bookings: expect.any(Array),\n        reviews: expect.any(Array)\n      });\n    });\n  });\n});\n</code></pre>"},{"location":"development/testing/#end-to-end-testing","title":"End-to-End Testing","text":""},{"location":"development/testing/#test-configuration","title":"Test Configuration","text":"<pre><code>import { test, expect } from '@playwright/test';\n\nconst e2eConfig = {\n  baseURL: 'http://localhost:3000',\n  testMatch: ['e2e/**/*.spec.ts'],\n  use: {\n    trace: 'retain-on-failure',\n    screenshot: 'only-on-failure',\n    video: 'retain-on-failure'\n  },\n  projects: [\n    {\n      name: 'Chrome',\n      use: { browserName: 'chromium' }\n    },\n    {\n      name: 'Firefox',\n      use: { browserName: 'firefox' }\n    },\n    {\n      name: 'Mobile Chrome',\n      use: {\n        browserName: 'chromium',\n        ...devices['Pixel 5']\n      }\n    }\n  ]\n};\n</code></pre>"},{"location":"development/testing/#user-flow-tests","title":"User Flow Tests","text":"<pre><code>test.describe('Booking Flow', () =&gt; {\n  test('user can search and book a listing', async ({ page }) =&gt; {\n    // 1. Login\n    await page.goto('/login');\n    await page.fill('[data-testid=\"email\"]', 'test@example.com');\n    await page.fill('[data-testid=\"password\"]', 'password123');\n    await page.click('[data-testid=\"login-button\"]');\n\n    // 2. Search for listing\n    await page.goto('/search');\n    await page.fill('[data-testid=\"location\"]', 'Miami');\n    await page.click('[data-testid=\"search-button\"]');\n\n    // 3. Select listing\n    await page.click('[data-testid=\"listing-card\"]:first-child');\n\n    // 4. Make booking\n    await page.fill('[data-testid=\"check-in\"]', '2024-04-01');\n    await page.fill('[data-testid=\"check-out\"]', '2024-04-07');\n    await page.click('[data-testid=\"book-button\"]');\n\n    // 5. Verify booking\n    await expect(page).toHaveURL(/\\/bookings\\/[\\w-]+/);\n    await expect(page.locator('[data-testid=\"booking-status\"]'))\n      .toHaveText('Confirmed');\n  });\n});\n</code></pre>"},{"location":"development/testing/#performance-testing","title":"Performance Testing","text":""},{"location":"development/testing/#load-testing","title":"Load Testing","text":"<pre><code>import { check } from 'k6/http';\nimport { Rate } from 'k6/metrics';\n\nconst errorRate = new Rate('errors');\n\nexport const options = {\n  stages: [\n    { duration: '1m', target: 50 },  // Ramp up\n    { duration: '3m', target: 50 },  // Stay at 50 users\n    { duration: '1m', target: 100 }, // Ramp up to 100\n    { duration: '3m', target: 100 }, // Stay at 100\n    { duration: '1m', target: 0 }    // Ramp down\n  ],\n  thresholds: {\n    'http_req_duration': ['p(95)&lt;500'],\n    'errors': ['rate&lt;0.1']\n  }\n};\n\nexport default function() {\n  const response = http.get('http://api.dokkerr.com/listings');\n\n  check(response, {\n    'status is 200': (r) =&gt; r.status === 200,\n    'response time &lt; 500ms': (r) =&gt; r.timings.duration &lt; 500\n  }) || errorRate.add(1);\n}\n</code></pre>"},{"location":"development/testing/#test-coverage","title":"Test Coverage","text":""},{"location":"development/testing/#coverage-requirements","title":"Coverage Requirements","text":"<pre><code>interface CoverageThresholds {\n  global: {\n    statements: 80,\n    branches: 75,\n    functions: 80,\n    lines: 80\n  };\n  services: {\n    statements: 90,\n    branches: 85,\n    functions: 90,\n    lines: 90\n  };\n  utils: {\n    statements: 95,\n    branches: 90,\n    functions: 95,\n    lines: 95\n  };\n}\n</code></pre>"},{"location":"development/testing/#coverage-report","title":"Coverage Report","text":"<pre><code>class CoverageReport {\n  static generateReport() {\n    return {\n      statements: {\n        total: 1500,\n        covered: 1275,\n        percentage: 85\n      },\n      branches: {\n        total: 300,\n        covered: 240,\n        percentage: 80\n      },\n      functions: {\n        total: 400,\n        covered: 360,\n        percentage: 90\n      },\n      lines: {\n        total: 2000,\n        covered: 1700,\n        percentage: 85\n      }\n    };\n  }\n}\n</code></pre>"},{"location":"development/testing/#test-automation","title":"Test Automation","text":""},{"location":"development/testing/#ci-pipeline-integration","title":"CI Pipeline Integration","text":"<pre><code>test:\n  stage: test\n  script:\n    - npm ci\n    - npm run test:unit\n    - npm run test:integration\n    - npm run test:e2e\n  coverage: '/All files[^|]*\\|[^|]*\\s+([\\d\\.]+)/'\n  artifacts:\n    reports:\n      coverage_report:\n        coverage_format: cobertura\n        path: coverage/cobertura-coverage.xml\n</code></pre>"},{"location":"development/testing/#best-practices","title":"Best Practices","text":"<ol> <li>Test Organization</li> <li>Group tests logically</li> <li>Use descriptive test names</li> <li>Follow AAA pattern (Arrange, Act, Assert)</li> <li> <p>Keep tests focused and isolated</p> </li> <li> <p>Test Data Management</p> </li> <li>Use factories for test data</li> <li>Clean up test data</li> <li>Avoid sharing state</li> <li> <p>Use meaningful test data</p> </li> <li> <p>Test Maintenance</p> </li> <li>Keep tests simple</li> <li>Avoid test duplication</li> <li>Update tests with code changes</li> <li> <p>Document complex test scenarios</p> </li> <li> <p>Performance Considerations</p> </li> <li>Mock external services</li> <li>Use test databases</li> <li>Parallelize test execution</li> <li>Optimize test runtime </li> </ol>"},{"location":"development/guides/short-id-implementation/","title":"Developer Guide: Short ID Implementation","text":"<p>This guide provides technical details for developers working with the Dokkerr short ID system. It explains how to implement short ID support in new features and ensure compatibility throughout the application.</p>"},{"location":"development/guides/short-id-implementation/#adding-short-id-support-to-new-models","title":"Adding Short ID Support to New Models","text":"<p>When creating a new database model that requires short IDs, follow these steps:</p>"},{"location":"development/guides/short-id-implementation/#1-database-migration","title":"1. Database Migration","text":"<p>Create a migration that includes the short_id column:</p> <pre><code>exports.up = function(knex) {\n  return knex.schema.createTable('your_table_name', table =&gt; {\n    table.uuid('id').primary();\n    table.string('short_id', 8).unique().index();\n    // Other fields...\n  });\n};\n</code></pre>"},{"location":"development/guides/short-id-implementation/#2-model-implementation","title":"2. Model Implementation","text":"<p>Use the ID utilities in your model class:</p> <pre><code>const { generateIds, isShortId } = require('../utils/idUtils');\n\nclass YourModel {\n  static async create(data) {\n    const { id, shortId } = generateIds();\n\n    // Create record with both IDs\n    const record = {\n      id,\n      short_id: shortId,\n      // Other fields...\n    };\n\n    // Insert into database...\n    return record;\n  }\n\n  static async findById(id) {\n    let query;\n\n    if (isShortId(id)) {\n      query = 'SELECT * FROM your_table_name WHERE short_id = $1';\n    } else {\n      query = 'SELECT * FROM your_table_name WHERE id = $1';\n    }\n\n    // Execute query...\n  }\n}\n</code></pre>"},{"location":"development/guides/short-id-implementation/#3-api-response-format","title":"3. API Response Format","text":"<p>Always include both IDs in API responses:</p> <pre><code>formatResponse(record) {\n  return {\n    id: record.id,\n    shortId: record.short_id,\n    // Other fields...\n  };\n}\n</code></pre>"},{"location":"development/guides/short-id-implementation/#working-with-short-ids-in-route-handlers","title":"Working with Short IDs in Route Handlers","text":"<p>When implementing route handlers, follow these patterns:</p>"},{"location":"development/guides/short-id-implementation/#1-parameter-extraction","title":"1. Parameter Extraction","text":"<pre><code>router.get('/:id', async (req, res) =&gt; {\n  const id = req.params.id;\n  // id could be either a short ID or full UUID\n});\n</code></pre>"},{"location":"development/guides/short-id-implementation/#2-query-construction","title":"2. Query Construction","text":"<p>Use conditional logic based on ID format:</p> <pre><code>let query;\nif (isShortId(id)) {\n  query = 'SELECT * FROM your_table WHERE short_id = $1';\n} else {\n  query = 'SELECT * FROM your_table WHERE id = $1';\n}\n</code></pre>"},{"location":"development/guides/short-id-implementation/#3-response-formatting","title":"3. Response Formatting","text":"<p>Always include both ID formats in responses:</p> <pre><code>res.json({\n  status: 'success',\n  data: {\n    id: record.id,\n    shortId: record.short_id,\n    // Other fields...\n  }\n});\n</code></pre>"},{"location":"development/guides/short-id-implementation/#url-generation","title":"URL Generation","text":"<p>When generating URLs in templates or frontend code, prefer short IDs:</p> <pre><code>// In templates\n&lt;a href=\"/listings/&lt;%= listing.shortId %&gt;\"&gt;View Listing&lt;/a&gt;\n\n// In API responses that include URLs\n{\n  \"data\": {\n    \"detailUrl\": `/api/listings/${record.short_id}`\n  }\n}\n</code></pre>"},{"location":"development/guides/short-id-implementation/#frontend-considerations","title":"Frontend Considerations","text":""},{"location":"development/guides/short-id-implementation/#1-display","title":"1. Display","text":"<p>When displaying IDs to users, always use short IDs:</p> <pre><code>&lt;span class=\"id-display\"&gt;\n  &lt;%= record.shortId %&gt;\n&lt;/span&gt;\n</code></pre>"},{"location":"development/guides/short-id-implementation/#2-user-input","title":"2. User Input","text":"<p>When accepting user input for IDs, support both formats:</p> <pre><code>// Form processing\nconst id = req.body.id;\n// Lookup will work with either format thanks to the model methods\nconst record = await YourModel.findById(id);\n</code></pre>"},{"location":"development/guides/short-id-implementation/#3-api-requests","title":"3. API Requests","text":"<p>Frontend API requests should use short IDs for better readability:</p> <pre><code>// Before\nconst response = await fetch(`/api/bookings/123e4567-e89b-12d3-a456-426614174000`);\n\n// After\nconst response = await fetch(`/api/bookings/123e4567`);\n</code></pre>"},{"location":"development/guides/short-id-implementation/#internal-operations-and-join-queries","title":"Internal Operations and Join Queries","text":"<p>For internal operations, especially those involving joins, prefer using full UUIDs:</p> <pre><code>// Example join query\nconst result = await pool.query(`\n  SELECT b.*, u.name as owner_name\n  FROM bookings b\n  JOIN users u ON b.owner_id = u.id\n  WHERE b.id = $1\n`, [booking.id]); // Use full UUID for joins\n</code></pre>"},{"location":"development/guides/short-id-implementation/#id-format-validation","title":"ID Format Validation","text":"<p>Use the utility functions to validate ID formats:</p> <pre><code>const { isShortId, isUuid } = require('../utils/idUtils');\n\nfunction validateId(id) {\n  if (!id || (!isShortId(id) &amp;&amp; !isUuid(id))) {\n    throw new Error('Invalid ID format');\n  }\n}\n</code></pre>"},{"location":"development/guides/short-id-implementation/#troubleshooting","title":"Troubleshooting","text":""},{"location":"development/guides/short-id-implementation/#missing-short-ids","title":"Missing Short IDs","text":"<p>If records are missing short IDs, run the generation script:</p> <pre><code>npm run generate-short-ids\n</code></pre>"},{"location":"development/guides/short-id-implementation/#id-resolution-issues","title":"ID Resolution Issues","text":"<p>If lookup by short ID is failing, check: 1. That the <code>short_id</code> column exists and is indexed 2. That the model's <code>findById</code> method correctly handles both formats 3. That the short ID was generated correctly</p>"},{"location":"development/guides/short-id-implementation/#testing-short-id-support","title":"Testing Short ID Support","text":"<p>Include tests that verify both ID formats work:</p> <pre><code>test('should find record by short ID', async () =&gt; {\n  const record = await YourModel.create({...});\n  const found = await YourModel.findById(record.short_id);\n  expect(found.id).toBe(record.id);\n});\n\ntest('should find record by UUID', async () =&gt; {\n  const record = await YourModel.create({...});\n  const found = await YourModel.findById(record.id);\n  expect(found.id).toBe(record.id);\n});\n</code></pre>"},{"location":"development/maintenance/documentation-backups-api/","title":"Documentation Backup API","text":"<p>This page describes the backend API endpoints for managing documentation backups programmatically.</p>"},{"location":"development/maintenance/documentation-backups-api/#overview","title":"Overview","text":"<p>The Documentation Backup API allows you to:</p> <ul> <li>Create timestamped backups of the entire documentation</li> <li>List all available backups with metadata</li> <li>Restore the documentation from any previous backup</li> </ul> <p>All endpoints are part of the maintenance API and require admin privileges for write operations.</p>"},{"location":"development/maintenance/documentation-backups-api/#api-endpoints","title":"API Endpoints","text":""},{"location":"development/maintenance/documentation-backups-api/#create-documentation-backup","title":"Create Documentation Backup","text":"<p>Creates a new backup of the documentation.</p> <p>URL: <code>/api/maintenance/docs/backup</code></p> <p>Method: <code>POST</code></p> <p>Auth Required: Yes (Admin)</p> <p>Request Body:</p> <pre><code>{\n  \"description\": \"Optional description for the backup\"\n}\n</code></pre> <p>Success Response:</p> <pre><code>{\n  \"message\": \"Documentation backup created successfully\",\n  \"backup\": {\n    \"filename\": \"docs_backup_2025-03-09_16-00-00.tar.gz\",\n    \"path\": \"/path/to/backup/docs_backup_2025-03-09_16-00-00.tar.gz\",\n    \"timestamp\": \"2025-03-09T16:00:00.000Z\",\n    \"description\": \"Optional description for the backup\",\n    \"size\": \"10.5 MB\"\n  }\n}\n</code></pre>"},{"location":"development/maintenance/documentation-backups-api/#list-documentation-backups","title":"List Documentation Backups","text":"<p>Returns a list of all available documentation backups.</p> <p>URL: <code>/api/maintenance/docs/backups</code></p> <p>Method: <code>GET</code></p> <p>Auth Required: No</p> <p>Success Response:</p> <pre><code>{\n  \"count\": 2,\n  \"backups\": [\n    {\n      \"id\": 1,\n      \"timestamp\": \"2025-03-09T15:00:00.000Z\",\n      \"filename\": \"docs_backup_2025-03-09_15-00-00.tar.gz\",\n      \"description\": \"First backup\",\n      \"path\": \"/path/to/backup/docs_backup_2025-03-09_15-00-00.tar.gz\",\n      \"size\": \"10.2 MB\",\n      \"exists\": true\n    },\n    {\n      \"id\": 2,\n      \"timestamp\": \"2025-03-09T16:00:00.000Z\",\n      \"filename\": \"docs_backup_2025-03-09_16-00-00.tar.gz\",\n      \"description\": \"Second backup\",\n      \"path\": \"/path/to/backup/docs_backup_2025-03-09_16-00-00.tar.gz\",\n      \"size\": \"10.5 MB\",\n      \"exists\": true\n    }\n  ]\n}\n</code></pre>"},{"location":"development/maintenance/documentation-backups-api/#restore-documentation-from-backup","title":"Restore Documentation from Backup","text":"<p>Restores the documentation from a specified backup.</p> <p>URL: <code>/api/maintenance/docs/restore</code></p> <p>Method: <code>POST</code></p> <p>Auth Required: Yes (Admin)</p> <p>Request Body:</p> <pre><code>{\n  \"backupFilename\": \"docs_backup_2025-03-09_16-00-00.tar.gz\"\n}\n</code></pre> <p>Success Response:</p> <pre><code>{\n  \"message\": \"Documentation restored successfully\",\n  \"result\": {\n    \"status\": \"success\",\n    \"message\": \"Documentation restored successfully from docs_backup_2025-03-09_16-00-00.tar.gz\",\n    \"preRestoreBackup\": \"docs_backup_2025-03-10_10-30-00.tar.gz\"\n  }\n}\n</code></pre>"},{"location":"development/maintenance/documentation-backups-api/#error-handling","title":"Error Handling","text":"<p>All endpoints return appropriate HTTP status codes:</p> <ul> <li><code>200 OK</code>: The request was successful</li> <li><code>400 Bad Request</code>: Missing required parameters</li> <li><code>401 Unauthorized</code>: Authentication required</li> <li><code>403 Forbidden</code>: Not authorized to perform the action</li> <li><code>500 Internal Server Error</code>: Server-side error</li> </ul> <p>Error responses include a message and optional details:</p> <pre><code>{\n  \"error\": \"Failed to create documentation backup\",\n  \"details\": \"Error message details\"\n}\n</code></pre>"},{"location":"development/maintenance/documentation-backups-api/#usage-examples","title":"Usage Examples","text":""},{"location":"development/maintenance/documentation-backups-api/#create-a-backup-using-curl","title":"Create a Backup Using cURL","text":"<pre><code>curl -X POST \n  http://localhost:3000/api/maintenance/docs/backup \n  -H 'Content-Type: application/json' \n  -H 'Authorization: Bearer your_auth_token' \n  -d '{\"description\": \"Important update backup\"}'\n</code></pre>"},{"location":"development/maintenance/documentation-backups-api/#list-available-backups-using-curl","title":"List Available Backups Using cURL","text":"<pre><code>curl -X GET \n  http://localhost:3000/api/maintenance/docs/backups\n</code></pre>"},{"location":"development/maintenance/documentation-backups-api/#restore-from-a-backup-using-curl","title":"Restore from a Backup Using cURL","text":"<pre><code>curl -X POST \n  http://localhost:3000/api/maintenance/docs/restore \n  -H 'Content-Type: application/json' \n  -H 'Authorization: Bearer your_auth_token' \n  -d '{\"backupFilename\": \"docs_backup_2025-03-09_16-00-00.tar.gz\"}'\n</code></pre>"},{"location":"development/maintenance/documentation-backups-api/#security-considerations","title":"Security Considerations","text":"<ul> <li>Only administrators can create backups or restore documentation</li> <li>All operations are logged for audit purposes</li> <li>Restore operations automatically create a safety backup before proceeding</li> <li>Old backups are automatically cleaned up based on the retention period setting</li> </ul>"},{"location":"development/maintenance/documentation-backups/","title":"Documentation Backup and Restore","text":"<p>This page explains how to use the documentation backup and restore system for the Dokkerr project.</p>"},{"location":"development/maintenance/documentation-backups/#overview","title":"Overview","text":"<p>The backup system allows you to:</p> <ul> <li>Create timestamped backups of the entire documentation</li> <li>Add descriptions to backups for easier identification</li> <li>View a list of all available backups with dates and descriptions</li> <li>Restore the documentation from any previous backup</li> </ul>"},{"location":"development/maintenance/documentation-backups/#backup-scripts-location","title":"Backup Scripts Location","text":"<p>The backup and restore scripts are located in the project root directory under:</p> <p>The scripts available are:</p> <ul> <li> <ul> <li>Creates a new backup</li> </ul> </li> <li> <ul> <li>Restores from an existing backup</li> </ul> </li> </ul>"},{"location":"development/maintenance/documentation-backups/#creating-a-backup","title":"Creating a Backup","text":"<p>To create a backup of the current documentation:</p> <ol> <li>Open a terminal in the project root directory</li> <li> <p>Run the backup script:</p> </li> <li> <p>Enter a description for the backup when prompted</p> </li> <li>The script will create a timestamped backup and add it to the backup list</li> </ol>"},{"location":"development/maintenance/overview/","title":"Maintenance Overview","text":""},{"location":"development/maintenance/overview/#introduction","title":"Introduction","text":"<p>The Dokkerr platform includes a comprehensive maintenance system that handles database management, monitoring, backups, and system health checks. This section provides detailed information about the maintenance features and how to use them effectively.</p>"},{"location":"development/maintenance/overview/#key-features","title":"Key Features","text":""},{"location":"development/maintenance/overview/#maintenance-mode","title":"Maintenance Mode","text":"<ul> <li>Controlled system access during maintenance</li> <li>Automatic connection management</li> <li>Safe state preservation</li> <li>Backup creation before maintenance</li> </ul>"},{"location":"development/maintenance/overview/#database-management","title":"Database Management","text":"<ul> <li>Automated backups with compression</li> <li>Safe restore procedures</li> <li>Database cleanup and optimization</li> <li>Index management</li> <li>Table vacuuming</li> </ul>"},{"location":"development/maintenance/overview/#monitoring","title":"Monitoring","text":"<ul> <li>Real-time system metrics</li> <li>Connection tracking</li> <li>Query performance monitoring</li> <li>Resource usage alerts</li> <li>Custom threshold configuration</li> </ul>"},{"location":"development/maintenance/overview/#scheduled-tasks","title":"Scheduled Tasks","text":"<ul> <li>Default maintenance schedules</li> <li>Custom schedule support</li> <li>Task status tracking</li> <li>Failure handling and notifications</li> </ul>"},{"location":"development/maintenance/overview/#api-endpoints","title":"API Endpoints","text":""},{"location":"development/maintenance/overview/#maintenance-mode_1","title":"Maintenance Mode","text":"<pre><code>POST /api/maintenance/start    // Start maintenance mode\nPOST /api/maintenance/end      // End maintenance mode\nGET  /api/maintenance/status   // Get maintenance status\n</code></pre>"},{"location":"development/maintenance/overview/#database-management_1","title":"Database Management","text":"<pre><code>POST /api/maintenance/cleanup  // Run database cleanup\nPOST /api/maintenance/backup   // Create backup\nPOST /api/maintenance/restore  // Restore from backup\n</code></pre>"},{"location":"development/maintenance/overview/#monitoring_1","title":"Monitoring","text":"<pre><code>POST /api/maintenance/monitor/start  // Start monitoring\nPOST /api/maintenance/monitor/stop   // Stop monitoring\nGET  /api/maintenance/health         // Get system health\n</code></pre>"},{"location":"development/maintenance/overview/#scheduling","title":"Scheduling","text":"<pre><code>POST /api/maintenance/schedule       // Schedule maintenance\nGET  /api/maintenance/schedule       // Get maintenance schedule\n</code></pre>"},{"location":"development/maintenance/overview/#default-schedule","title":"Default Schedule","text":"<p>The system comes with pre-configured maintenance schedules:</p> <pre><code>// Daily backup at 2 AM\nschedule: '0 2 * * *'\n\n// Weekly cleanup on Sunday at 3 AM\nschedule: '0 3 * * 0'\n\n// Monthly vacuum on 1st at 4 AM\nschedule: '0 4 1 * *'\n</code></pre>"},{"location":"development/maintenance/overview/#configuration","title":"Configuration","text":"<p>Maintenance settings can be configured through environment variables:</p> <pre><code># Database Management Configuration\nBACKUP_RETENTION_DAYS=7\nMAX_BACKUP_SIZE_MB=1000\nBACKUP_COMPRESSION_LEVEL=9\nDB_MONITOR_INTERVAL_MS=5000\nSLOW_QUERY_THRESHOLD_MS=1000\nHIGH_CPU_THRESHOLD=80\nHIGH_MEMORY_THRESHOLD=80\nDEAD_TUPLE_THRESHOLD=10000\nUNUSED_INDEX_SIZE_MB=10\nOLD_TRANSACTION_DAYS=7\nTEMP_FILE_DAYS=1\n</code></pre>"},{"location":"development/maintenance/overview/#security","title":"Security","text":"<p>The maintenance system includes several security features: - Admin-only access to maintenance endpoints - Automatic backup creation before operations - Connection management during maintenance - Audit logging of maintenance activities</p>"},{"location":"development/maintenance/overview/#best-practices","title":"Best Practices","text":"<ol> <li>Scheduling Maintenance</li> <li>Schedule maintenance during low-traffic periods</li> <li>Set appropriate intervals for different tasks</li> <li>Monitor task execution times</li> <li> <p>Configure alerts for failed tasks</p> </li> <li> <p>Backup Management</p> </li> <li>Maintain multiple backup copies</li> <li>Verify backup integrity regularly</li> <li>Test restore procedures periodically</li> <li> <p>Configure appropriate retention periods</p> </li> <li> <p>Performance Optimization</p> </li> <li>Monitor system metrics regularly</li> <li>Address performance issues proactively</li> <li>Optimize database queries and indexes</li> <li> <p>Clean up unused resources</p> </li> <li> <p>Monitoring</p> </li> <li>Set appropriate alert thresholds</li> <li>Monitor resource usage trends</li> <li>Track long-running queries</li> <li>Monitor connection counts</li> </ol>"},{"location":"development/maintenance/overview/#pipeline-integration","title":"Pipeline Integration","text":"<p>The maintenance system is integrated with the CI/CD pipeline:</p> <pre><code>maintenance:\n  stage: maintenance\n  script:\n    - npm run db:backup\n    - npm run db:cleanup\n    - npm run db:vacuum\n    - npm run db:reindex\n  rules:\n    - if: $CI_PIPELINE_SOURCE == \"schedule\"\n      when: always\n    - when: manual\n  artifacts:\n    paths:\n      - backups/\n    expire_in: 1 week\n</code></pre>"},{"location":"development/maintenance/overview/#troubleshooting","title":"Troubleshooting","text":"<p>Common issues and their solutions:</p> <ol> <li> <p>Maintenance Mode Stuck <pre><code>// Force disable maintenance mode\nawait maintenanceService.disableMaintenanceMode();\n</code></pre></p> </li> <li> <p>Failed Backups</p> </li> <li>Check disk space</li> <li>Verify database permissions</li> <li> <p>Check backup directory permissions</p> </li> <li> <p>High Resource Usage</p> </li> <li>Monitor system metrics</li> <li>Check for long-running queries</li> <li>Review connection counts</li> <li> <p>Analyze query plans</p> </li> <li> <p>Task Scheduling Issues</p> </li> <li>Verify cron expressions</li> <li>Check task dependencies</li> <li>Monitor task execution times</li> <li>Review error logs</li> </ol>"},{"location":"development/maintenance/overview/#next-steps","title":"Next Steps","text":"<ul> <li>Database Management</li> <li>Monitoring</li> <li>Backup &amp; Recovery</li> <li>Performance </li> </ul>"},{"location":"features/","title":"Features Overview","text":"<p>Dokkerr provides a comprehensive set of features designed to streamline boat slip rental operations.</p>"},{"location":"features/#core-features","title":"Core Features","text":""},{"location":"features/#slip-management","title":"Slip Management","text":"<ul> <li>Real-time availability tracking</li> <li>Dynamic pricing system</li> <li>Maintenance scheduling</li> <li>Analytics dashboard</li> <li>Multi-marina support</li> </ul>"},{"location":"features/#booking-system","title":"Booking System","text":"<ul> <li>Instant booking capability</li> <li>Flexible scheduling</li> <li>Customer management</li> <li>Automated notifications</li> <li>Calendar integration</li> </ul>"},{"location":"features/#payment-processing","title":"Payment Processing","text":"<ul> <li>Multiple payment methods</li> <li>Automated billing</li> <li>Refund management</li> <li>Financial reporting</li> <li>Tax handling</li> </ul>"},{"location":"features/#authentication","title":"Authentication","text":"<ul> <li>Multi-factor authentication</li> <li>Role-based access control</li> <li>SSO integration</li> <li>API key management</li> <li>Audit logging</li> </ul>"},{"location":"features/#implementation","title":"Implementation","text":"<p>Check our API Documentation for detailed implementation guides.</p>"},{"location":"features/authentication/","title":"Authentication","text":"<p>This document details the authentication system implementation in the Dokkerr application.</p>"},{"location":"features/authentication/#authentication-architecture","title":"Authentication Architecture","text":"<pre><code>graph TB\n    subgraph \"Client Applications\"\n        WebApp[\"Web Application\"]\n        MobileApp[\"Mobile App\"]\n        ThirdParty[\"Third-party Apps\"]\n    end\n\n    subgraph \"Authentication Layer\"\n        AuthService[\"Authentication Service\"]\n        OAuthProviders[\"OAuth Providers&lt;br&gt;(Google, Facebook, Apple)\"]\n        TwoFactorService[\"2FA Service&lt;br&gt;(SMS, TOTP)\"]\n    end\n\n    subgraph \"Core Services\"\n        UserService[\"User Service\"]\n        TokenService[\"Token Service\"]\n    end\n\n    subgraph \"Data Layer\"\n        UserDB[(User Database)]\n        TokenDB[(Token Database)]\n    end\n\n    WebApp --&gt; AuthService\n    MobileApp --&gt; AuthService\n    ThirdParty --&gt; AuthService\n\n    AuthService --&gt; OAuthProviders\n    AuthService --&gt; TwoFactorService\n    AuthService --&gt; TokenService\n    AuthService --&gt; UserService\n\n    UserService --&gt; UserDB\n    TokenService --&gt; TokenDB</code></pre> <p>The authentication architecture follows a layered approach with separation of concerns. The Authentication Service acts as the central coordinator, handling requests from various client applications and delegating to specialized services as needed.</p>"},{"location":"features/authentication/#authentication-methods","title":"Authentication Methods","text":"<p>Dokkerr supports multiple authentication methods to accommodate different user preferences and security requirements:</p>"},{"location":"features/authentication/#email-and-password","title":"Email and Password","text":"<ul> <li>Standard email/password authentication</li> <li>Password requirements: minimum 8 characters, mix of letters, numbers, and special characters</li> <li>Password hashing using bcrypt with 12 rounds of salt</li> <li>Rate limiting to prevent brute force attacks</li> </ul>"},{"location":"features/authentication/#oauth-integration","title":"OAuth Integration","text":"<p>Social login options include:</p> <ul> <li>Google</li> <li>Facebook</li> <li>Apple (for iOS users)</li> </ul>"},{"location":"features/authentication/#sms-verification","title":"SMS Verification","text":"<p>Two-factor authentication is available via:</p> <ul> <li>SMS verification codes</li> <li>Time-based one-time passwords (TOTP)</li> </ul>"},{"location":"features/authentication/#token-management","title":"Token Management","text":"<p>Dokkerr uses JSON Web Tokens (JWT) for authentication:</p> Token Type Purpose Expiration Refresh Allowed Access Token API Authorization 1 hour No Refresh Token Getting new access tokens 7 days Yes Password Reset One-time password reset 15 minutes No Email Verification Verify user email 24 hours No"},{"location":"features/authentication/#registration-process","title":"Registration Process","text":"<ol> <li>User submits registration form with email and password</li> <li>System validates input and checks for existing accounts</li> <li>Account is created with pending verification status</li> <li>Verification email is sent to user</li> <li>User verifies email by clicking link</li> <li>Account is activated and available for use</li> </ol>"},{"location":"features/authentication/#login-flow","title":"Login Flow","text":"<pre><code>sequenceDiagram\n    actor User\n    participant Client as Client Application\n    participant Auth as Authentication Service\n    participant OAuth as OAuth Providers\n    participant 2FA as 2FA Service\n    participant Token as Token Service\n    participant DB as User Database\n\n    User-&gt;&gt;Client: Enter credentials\n\n    alt Email/Password Login\n        Client-&gt;&gt;Auth: Submit credentials\n        Auth-&gt;&gt;DB: Validate credentials\n        DB-&gt;&gt;Auth: Validation result\n\n        alt Valid Credentials\n            alt 2FA Enabled\n                Auth-&gt;&gt;2FA: Request 2FA challenge\n                2FA-&gt;&gt;User: Send verification code\n                User-&gt;&gt;Client: Submit verification code\n                Client-&gt;&gt;Auth: Forward verification code\n                Auth-&gt;&gt;2FA: Validate code\n                2FA-&gt;&gt;Auth: Validation result\n            end\n            Auth-&gt;&gt;Token: Generate tokens\n            Token-&gt;&gt;Auth: Access ## Login Flow refresh tokens\n            Auth-&gt;&gt;Client: Return tokens\n            Client-&gt;&gt;Client: Store tokens securely\n        else Invalid Credentials\n            Auth-&gt;&gt;Client: Authentication failed\n            Client-&gt;&gt;User: Show error message\n        end\n\n    else OAuth Login\n        Client-&gt;&gt;OAuth: Redirect to provider\n        User-&gt;&gt;OAuth: Authenticate with provider\n        OAuth-&gt;&gt;Client: Return authorization code\n        Client-&gt;&gt;Auth: Exchange code for tokens\n        Auth-&gt;&gt;OAuth: Verify code\n        OAuth-&gt;&gt;Auth: User information\n        Auth-&gt;&gt;DB: Find or create user\n        Auth-&gt;&gt;Token: Generate tokens\n        Token-&gt;&gt;Auth: Access ## Login Flow refresh tokens\n        Auth-&gt;&gt;Client: Return tokens\n        Client-&gt;&gt;Client: Store tokens securely\n    end\n\n    Client-&gt;&gt;User: Authenticated ## Login Flow redirected</code></pre> <p>The login flow supports multiple authentication methods and implements additional security layers like two-factor authentication when enabled. After successful authentication, the system issues access and refresh tokens that the client applications use for subsequent API requests.</p>"},{"location":"features/authentication/#security-considerations","title":"Security Considerations","text":""},{"location":"features/authentication/#protection-against-common-attacks","title":"Protection Against Common Attacks","text":"<ul> <li>CSRF Protection: Using double-submit cookie pattern</li> <li>XSS Protection: Content Security Policy and context-specific output encoding</li> <li>Brute Force Protection: Progressive delays and account lockouts</li> <li>Man-in-the-Middle: HTTPS only, HTTP Strict Transport Security (HSTS)</li> </ul>"},{"location":"features/authentication/#session-management","title":"Session Management","text":"<ul> <li>Secure, HTTP-Only, SameSite cookies for tokens</li> <li>Absolute and sliding expiration policies</li> <li>Session invalidation on password change</li> <li>Concurrent session limits (optional feature)</li> </ul>"},{"location":"features/authentication/#admin-authentication","title":"Admin Authentication","text":"<p>Admin accounts have additional security requirements:</p> <ul> <li>Mandatory 2FA</li> <li>Stronger password requirements</li> <li>IP address restrictions (optional)</li> <li>Session timeouts after 30 minutes of inactivity</li> </ul>"},{"location":"features/authentication/#related-documentation","title":"Related Documentation","text":"<ul> <li>Security Architecture</li> <li>API Authentication</li> <li>User Management</li> </ul>"},{"location":"features/booking/","title":"Booking System","text":"<p>This document details the booking system implementation in the Dokkerr application.</p>"},{"location":"features/booking/#booking-flow","title":"Booking Flow","text":"<pre><code>sequenceDiagram\n    participant User\n    participant App\n    participant API\n    participant Payment\n    participant Notification\n\n    User-&gt;&gt;App: Search Docks\n    App-&gt;&gt;API: GET /api/docks\n    API--&gt;&gt;App: Available Docks\n\n    User-&gt;&gt;App: Select Dock &amp; Dates\n    App-&gt;&gt;API: POST /api/bookings/check\n    API--&gt;&gt;App: Availability Confirmed\n\n    User-&gt;&gt;App: Initiate Booking\n    App-&gt;&gt;API: POST /api/bookings\n    API-&gt;&gt;Payment: Process Payment\n    Payment--&gt;&gt;API: Payment Success\n\n    API-&gt;&gt;Notification: Send Confirmation\n    Notification--&gt;&gt;User: Booking Confirmed</code></pre>"},{"location":"features/booking/#booking-states","title":"Booking States","text":"<pre><code>stateDiagram-v2\n    [*] --&gt; Pending\n    Pending --&gt; Confirmed: Payment Success\n    Pending --&gt; Cancelled: User Cancels\n    Confirmed --&gt; Active: Start Date\n    Active --&gt; Completed: End Date\n    Active --&gt; Cancelled: User Cancels\n    Confirmed --&gt; Cancelled: Admin Cancels\n    Active --&gt; Cancelled: Admin Cancels\n    Completed --&gt; [*]\n    Cancelled --&gt; [*]</code></pre>"},{"location":"features/booking/#booking-components","title":"Booking Components","text":""},{"location":"features/booking/#1-search-and-discovery","title":"1. Search and Discovery","text":"<ul> <li>Search Filters</li> <li>Location-based search</li> <li>Date range selection</li> <li>Price range</li> <li>Amenities</li> <li> <p>Rating filters</p> </li> <li> <p>Results Display</p> </li> <li>Map view</li> <li>List view</li> <li>Grid view</li> <li>Sort options</li> <li>Filter persistence</li> </ul>"},{"location":"features/booking/#2-availability-management","title":"2. Availability Management","text":"<ul> <li>Calendar System</li> <li>Real-time availability</li> <li>Blocked dates</li> <li>Seasonal pricing</li> <li> <p>Special rates</p> </li> <li> <p>Conflict Prevention</p> </li> <li>Double booking prevention</li> <li>Buffer time management</li> <li>Maintenance scheduling</li> <li>Emergency blocks</li> </ul>"},{"location":"features/booking/#3-pricing-system","title":"3. Pricing System","text":"<ul> <li>Rate Management</li> <li>Base rates</li> <li>Seasonal rates</li> <li>Special offers</li> <li> <p>Discount codes</p> </li> <li> <p>Fee Structure</p> </li> <li>Service fees</li> <li>Cleaning fees</li> <li>Security deposits</li> <li>Cancellation fees</li> </ul>"},{"location":"features/booking/#4-payment-processing","title":"4. Payment Processing","text":"<ul> <li>Payment Methods</li> <li>Credit cards</li> <li>Digital wallets</li> <li>Bank transfers</li> <li> <p>Cryptocurrency</p> </li> <li> <p>Payment Flow</p> </li> <li>Authorization</li> <li>Capture</li> <li>Refunds</li> <li>Disputes</li> </ul>"},{"location":"features/booking/#5-notification-system","title":"5. Notification System","text":"<ul> <li>Booking Notifications</li> <li>Confirmation</li> <li>Reminders</li> <li>Updates</li> <li> <p>Cancellations</p> </li> <li> <p>Communication Channels</p> </li> <li>Email</li> <li>SMS</li> <li>Push notifications</li> <li>In-app messages</li> </ul>"},{"location":"features/booking/#user-interface","title":"User Interface","text":""},{"location":"features/booking/#1-booking-flow","title":"1. Booking Flow","text":"<ul> <li>Step-by-Step Process</li> <li>Search</li> <li>Selection</li> <li>Details</li> <li>Payment</li> <li> <p>Confirmation</p> </li> <li> <p>User Experience</p> </li> <li>Progress indicators</li> <li>Form validation</li> <li>Error handling</li> <li>Help resources</li> </ul>"},{"location":"features/booking/#2-management-interface","title":"2. Management Interface","text":"<ul> <li>Booking Management</li> <li>View bookings</li> <li>Modify bookings</li> <li>Cancel bookings</li> <li> <p>Extend bookings</p> </li> <li> <p>Admin Controls</p> </li> <li>Override options</li> <li>Manual adjustments</li> <li>Bulk operations</li> <li>Reporting tools</li> </ul>"},{"location":"features/booking/#integration-points","title":"Integration Points","text":""},{"location":"features/booking/#1-external-services","title":"1. External Services","text":"<ul> <li>Payment Gateways</li> <li>Stripe integration</li> <li>PayPal integration</li> <li>Local payment methods</li> <li> <p>Currency conversion</p> </li> <li> <p>Mapping Services</p> </li> <li>Google Maps</li> <li>Location services</li> <li>Geocoding</li> <li>Distance calculation</li> </ul>"},{"location":"features/booking/#2-internal-systems","title":"2. Internal Systems","text":"<ul> <li>User System</li> <li>Profile integration</li> <li>Preferences</li> <li>History</li> <li> <p>Ratings</p> </li> <li> <p>Inventory System</p> </li> <li>Dock management</li> <li>Maintenance scheduling</li> <li>Equipment tracking</li> <li>Status updates</li> </ul>"},{"location":"features/booking/#business-rules","title":"Business Rules","text":""},{"location":"features/booking/#1-booking-rules","title":"1. Booking Rules","text":"<ul> <li>Time Constraints</li> <li>Minimum stay</li> <li>Maximum stay</li> <li>Check-in/out times</li> <li> <p>Buffer periods</p> </li> <li> <p>Cancellation Policy</p> </li> <li>Time windows</li> <li>Refund rules</li> <li>Penalties</li> <li>Exceptions</li> </ul>"},{"location":"features/booking/#2-pricing-rules","title":"2. Pricing Rules","text":"<ul> <li>Rate Calculation</li> <li>Base price</li> <li>Seasonal adjustments</li> <li>Special rates</li> <li> <p>Discounts</p> </li> <li> <p>Fee Application</p> </li> <li>Service fees</li> <li>Taxes</li> <li>Deposits</li> <li>Insurance</li> </ul>"},{"location":"features/booking/#reporting-and-analytics","title":"Reporting and Analytics","text":""},{"location":"features/booking/#1-booking-analytics","title":"1. Booking Analytics","text":"<ul> <li>Performance Metrics</li> <li>Occupancy rates</li> <li>Revenue</li> <li>Cancellation rates</li> <li> <p>Customer satisfaction</p> </li> <li> <p>Trend Analysis</p> </li> <li>Seasonal patterns</li> <li>Popular locations</li> <li>Peak times</li> <li>Customer behavior</li> </ul>"},{"location":"features/booking/#2-financial-reports","title":"2. Financial Reports","text":"<ul> <li>Revenue Tracking</li> <li>Daily/weekly/monthly</li> <li>By location</li> <li>By customer type</li> <li> <p>By payment method</p> </li> <li> <p>Cost Analysis</p> </li> <li>Operating costs</li> <li>Marketing spend</li> <li>Commission fees</li> <li>Maintenance costs </li> </ul>"},{"location":"features/dock-management/","title":"Dock Management","text":"<p>This document details the dock management system implementation in the Dokkerr application.</p>"},{"location":"features/dock-management/#dock-registration-flow","title":"Dock Registration Flow","text":"<pre><code>sequenceDiagram\n    participant Owner\n    participant App\n    participant API\n    participant Validation\n    participant DB\n\n    Owner-&gt;&gt;App: Register Dock\n    App-&gt;&gt;API: POST /api/docks\n    API-&gt;&gt;Validation: Validate Dock Info\n    Validation-&gt;&gt;DB: Check Location\n    DB--&gt;&gt;Validation: Location Available\n\n    Validation-&gt;&gt;DB: Create Dock\n    DB--&gt;&gt;Validation: Dock Created\n    Validation--&gt;&gt;API: Registration Success\n    API--&gt;&gt;App: Dock Created\n    App--&gt;&gt;Owner: Registration Complete</code></pre>"},{"location":"features/dock-management/#dock-states","title":"Dock States","text":"<pre><code>stateDiagram-v2\n    [*] --&gt; Draft\n    Draft --&gt; Pending: Submit for Review\n    Pending --&gt; Active: Approved\n    Pending --&gt; Rejected: Failed Review\n    Active --&gt; Maintenance: Maintenance Required\n    Active --&gt; Inactive: Owner Deactivates\n    Maintenance --&gt; Active: Maintenance Complete\n    Inactive --&gt; Active: Owner Reactivates\n    Rejected --&gt; Draft: Edit &amp; Resubmit\n    Active --&gt; [*]\n    Inactive --&gt; [*]\n    Rejected --&gt; [*]</code></pre>"},{"location":"features/dock-management/#dock-components","title":"Dock Components","text":""},{"location":"features/dock-management/#1-dock-information","title":"1. Dock Information","text":"<ul> <li>Basic Details</li> <li>Location</li> <li>Dimensions</li> <li>Capacity</li> <li> <p>Amenities</p> </li> <li> <p>Technical Specs</p> </li> <li>Power supply</li> <li>Water supply</li> <li>Security features</li> <li>Maintenance requirements</li> </ul>"},{"location":"features/dock-management/#2-pricing-management","title":"2. Pricing Management","text":"<ul> <li>Rate Structure</li> <li>Base rates</li> <li>Seasonal rates</li> <li>Special rates</li> <li> <p>Discounts</p> </li> <li> <p>Fee Management</p> </li> <li>Cleaning fees</li> <li>Security deposits</li> <li>Insurance fees</li> <li>Maintenance fees</li> </ul>"},{"location":"features/dock-management/#3-availability-management","title":"3. Availability Management","text":"<ul> <li>Calendar System</li> <li>Blocked dates</li> <li>Maintenance schedule</li> <li>Special events</li> <li> <p>Seasonal availability</p> </li> <li> <p>Booking Rules</p> </li> <li>Minimum stay</li> <li>Maximum stay</li> <li>Advance booking</li> <li>Cancellation policy</li> </ul>"},{"location":"features/dock-management/#4-maintenance-system","title":"4. Maintenance System","text":"<ul> <li>Maintenance Types</li> <li>Regular maintenance</li> <li>Emergency repairs</li> <li>Seasonal checks</li> <li> <p>Equipment updates</p> </li> <li> <p>Maintenance Process</p> </li> <li>Issue reporting</li> <li>Work scheduling</li> <li>Status tracking</li> <li>Cost management</li> </ul>"},{"location":"features/dock-management/#owner-interface","title":"Owner Interface","text":""},{"location":"features/dock-management/#1-dashboard","title":"1. Dashboard","text":"<ul> <li>Overview</li> <li>Booking status</li> <li>Revenue metrics</li> <li>Occupancy rate</li> <li> <p>Maintenance status</p> </li> <li> <p>Quick Actions</p> </li> <li>Update availability</li> <li>Manage bookings</li> <li>Handle maintenance</li> <li>Update pricing</li> </ul>"},{"location":"features/dock-management/#2-management-tools","title":"2. Management Tools","text":"<ul> <li>Booking Management</li> <li>View bookings</li> <li>Accept/reject requests</li> <li>Handle cancellations</li> <li> <p>Manage extensions</p> </li> <li> <p>Financial Tools</p> </li> <li>Revenue tracking</li> <li>Expense management</li> <li>Payment processing</li> <li>Financial reports</li> </ul>"},{"location":"features/dock-management/#dock-operations","title":"Dock Operations","text":""},{"location":"features/dock-management/#1-daily-operations","title":"1. Daily Operations","text":"<ul> <li>Check-in/out</li> <li>Process check-ins</li> <li>Handle check-outs</li> <li>Issue keys/access</li> <li> <p>Collect feedback</p> </li> <li> <p>Maintenance</p> </li> <li>Regular cleaning</li> <li>Equipment checks</li> <li>Safety inspections</li> <li>Emergency response</li> </ul>"},{"location":"features/dock-management/#2-emergency-procedures","title":"2. Emergency Procedures","text":"<ul> <li>Response Protocol</li> <li>Emergency contacts</li> <li>Response time</li> <li>Escalation process</li> <li> <p>Documentation</p> </li> <li> <p>Safety Measures</p> </li> <li>Emergency equipment</li> <li>Safety protocols</li> <li>Evacuation plans</li> <li>Insurance coverage</li> </ul>"},{"location":"features/dock-management/#dock-analytics","title":"Dock Analytics","text":""},{"location":"features/dock-management/#1-performance-metrics","title":"1. Performance Metrics","text":"<ul> <li>Occupancy</li> <li>Occupancy rate</li> <li>Peak times</li> <li>Seasonal patterns</li> <li> <p>Revenue per day</p> </li> <li> <p>Financial</p> </li> <li>Revenue analysis</li> <li>Cost tracking</li> <li>Profit margins</li> <li>ROI calculation</li> </ul>"},{"location":"features/dock-management/#2-customer-insights","title":"2. Customer Insights","text":"<ul> <li>Usage Patterns</li> <li>Popular times</li> <li>Customer types</li> <li>Booking patterns</li> <li> <p>Length of stay</p> </li> <li> <p>Feedback Analysis</p> </li> <li>Customer reviews</li> <li>Satisfaction scores</li> <li>Common issues</li> <li>Improvement areas</li> </ul>"},{"location":"features/dock-management/#integration-points","title":"Integration Points","text":""},{"location":"features/dock-management/#1-external-services","title":"1. External Services","text":"<ul> <li>Mapping Services</li> <li>Location services</li> <li>Navigation</li> <li>Geocoding</li> <li> <p>Distance calculation</p> </li> <li> <p>Weather Services</p> </li> <li>Weather forecasts</li> <li>Tide information</li> <li>Storm alerts</li> <li>Seasonal data</li> </ul>"},{"location":"features/dock-management/#2-internal-systems","title":"2. Internal Systems","text":"<ul> <li>Booking System</li> <li>Availability sync</li> <li>Booking updates</li> <li>Payment processing</li> <li> <p>Notification system</p> </li> <li> <p>User System</p> </li> <li>Owner profiles</li> <li>Customer profiles</li> <li>Access control</li> <li>Communication</li> </ul>"},{"location":"features/dock-management/#compliance-and-regulations","title":"Compliance and Regulations","text":""},{"location":"features/dock-management/#1-legal-requirements","title":"1. Legal Requirements","text":"<ul> <li>Licensing</li> <li>Business licenses</li> <li>Permits</li> <li>Insurance</li> <li> <p>Tax compliance</p> </li> <li> <p>Safety Standards</p> </li> <li>Building codes</li> <li>Safety regulations</li> <li>Environmental rules</li> <li>Zoning laws</li> </ul>"},{"location":"features/dock-management/#2-documentation","title":"2. Documentation","text":"<ul> <li>Required Documents</li> <li>Insurance policies</li> <li>Safety certificates</li> <li>Maintenance records</li> <li> <p>Inspection reports</p> </li> <li> <p>Record Keeping</p> </li> <li>Booking records</li> <li>Maintenance logs</li> <li>Incident reports</li> <li>Financial records</li> </ul>"},{"location":"features/dock-management/#reporting-system","title":"Reporting System","text":""},{"location":"features/dock-management/#1-operational-reports","title":"1. Operational Reports","text":"<ul> <li>Daily Reports</li> <li>Occupancy status</li> <li>Maintenance tasks</li> <li>Incident reports</li> <li> <p>Revenue summary</p> </li> <li> <p>Periodic Reports</p> </li> <li>Monthly performance</li> <li>Quarterly analysis</li> <li>Annual review</li> <li>Trend analysis</li> </ul>"},{"location":"features/dock-management/#2-financial-reports","title":"2. Financial Reports","text":"<ul> <li>Revenue Reports</li> <li>Daily revenue</li> <li>Monthly income</li> <li>Seasonal trends</li> <li> <p>Year-over-year</p> </li> <li> <p>Expense Reports</p> </li> <li>Maintenance costs</li> <li>Operating expenses</li> <li>Marketing spend</li> <li>Profit analysis </li> </ul>"},{"location":"features/payment/","title":"Payment Processing","text":"<p>This document details the payment processing system implementation in the Dokkerr application.</p>"},{"location":"features/payment/#payment-flow","title":"Payment Flow","text":"<pre><code>sequenceDiagram\n    participant User\n    participant App\n    participant API\n    participant Payment\n    participant Bank\n\n    User-&gt;&gt;App: Initiate Payment\n    App-&gt;&gt;API: POST /api/payments\n    API-&gt;&gt;Payment: Process Payment\n\n    Payment-&gt;&gt;Bank: Authorize Payment\n    Bank--&gt;&gt;Payment: Authorization Success\n\n    Payment-&gt;&gt;Bank: Capture Payment\n    Bank--&gt;&gt;Payment: Capture Success\n\n    Payment--&gt;&gt;API: Payment Success\n    API--&gt;&gt;App: Payment Confirmed\n    App--&gt;&gt;User: Payment Complete</code></pre>"},{"location":"features/payment/#payment-states","title":"Payment States","text":"<pre><code>stateDiagram-v2\n    [*] --&gt; Pending\n    Pending --&gt; Authorized: Bank Authorizes\n    Pending --&gt; Failed: Bank Rejects\n    Authorized --&gt; Captured: Payment Captured\n    Authorized --&gt; Failed: Capture Failed\n    Authorized --&gt; Cancelled: User Cancels\n    Captured --&gt; Refunded: Refund Requested\n    Captured --&gt; Disputed: Customer Disputes\n    Failed --&gt; [*]\n    Cancelled --&gt; [*]\n    Refunded --&gt; [*]\n    Disputed --&gt; [*]</code></pre>"},{"location":"features/payment/#payment-components","title":"Payment Components","text":""},{"location":"features/payment/#1-payment-methods","title":"1. Payment Methods","text":"<ul> <li>Supported Methods</li> <li>Credit/Debit Cards</li> <li>Digital Wallets</li> <li>Bank Transfers</li> <li> <p>Cryptocurrency</p> </li> <li> <p>Method Management</p> </li> <li>Method validation</li> <li>Tokenization</li> <li>Method storage</li> <li>Method updates</li> </ul>"},{"location":"features/payment/#2-payment-processing","title":"2. Payment Processing","text":"<ul> <li>Authorization</li> <li>Card validation</li> <li>Balance check</li> <li>Risk assessment</li> <li> <p>Fraud detection</p> </li> <li> <p>Capture</p> </li> <li>Amount verification</li> <li>Currency conversion</li> <li>Fee calculation</li> <li>Settlement</li> </ul>"},{"location":"features/payment/#3-refund-processing","title":"3. Refund Processing","text":"<ul> <li>Refund Types</li> <li>Full refund</li> <li>Partial refund</li> <li>Cancellation refund</li> <li> <p>Dispute refund</p> </li> <li> <p>Refund Flow</p> </li> <li>Refund request</li> <li>Amount validation</li> <li>Bank processing</li> <li>Status tracking</li> </ul>"},{"location":"features/payment/#4-dispute-handling","title":"4. Dispute Handling","text":"<ul> <li>Dispute Types</li> <li>Chargeback</li> <li>Dispute claim</li> <li>Fraud report</li> <li> <p>Quality issue</p> </li> <li> <p>Resolution Process</p> </li> <li>Dispute receipt</li> <li>Evidence collection</li> <li>Response submission</li> <li>Resolution tracking</li> </ul>"},{"location":"features/payment/#security-implementation","title":"Security Implementation","text":""},{"location":"features/payment/#1-payment-security","title":"1. Payment Security","text":"<ul> <li>Data Protection</li> <li>PCI compliance</li> <li>Encryption</li> <li>Tokenization</li> <li> <p>Secure storage</p> </li> <li> <p>Authentication</p> </li> <li>3D Secure</li> <li>Biometric auth</li> <li>Two-factor auth</li> <li>Session management</li> </ul>"},{"location":"features/payment/#2-fraud-prevention","title":"2. Fraud Prevention","text":"<ul> <li>Risk Assessment</li> <li>Transaction scoring</li> <li>IP analysis</li> <li>Device fingerprinting</li> <li> <p>Behavior analysis</p> </li> <li> <p>Fraud Detection</p> </li> <li>Pattern recognition</li> <li>Anomaly detection</li> <li>Velocity checks</li> <li>Geographic validation</li> </ul>"},{"location":"features/payment/#integration-points","title":"Integration Points","text":""},{"location":"features/payment/#1-payment-gateways","title":"1. Payment Gateways","text":"<ul> <li>Gateway Integration</li> <li>Stripe</li> <li>PayPal</li> <li>Local gateways</li> <li> <p>Alternative methods</p> </li> <li> <p>Gateway Management</p> </li> <li>Configuration</li> <li>Fallback options</li> <li>Error handling</li> <li>Status monitoring</li> </ul>"},{"location":"features/payment/#2-banking-systems","title":"2. Banking Systems","text":"<ul> <li>Bank Integration</li> <li>Account linking</li> <li>Balance checks</li> <li>Transfer processing</li> <li> <p>Reconciliation</p> </li> <li> <p>Settlement Process</p> </li> <li>Settlement timing</li> <li>Fee calculation</li> <li>Currency conversion</li> <li>Reporting</li> </ul>"},{"location":"features/payment/#business-rules","title":"Business Rules","text":""},{"location":"features/payment/#1-payment-rules","title":"1. Payment Rules","text":"<ul> <li>Amount Rules</li> <li>Minimum amount</li> <li>Maximum amount</li> <li>Currency limits</li> <li> <p>Fee structure</p> </li> <li> <p>Timing Rules</p> </li> <li>Processing time</li> <li>Hold periods</li> <li>Refund windows</li> <li>Dispute deadlines</li> </ul>"},{"location":"features/payment/#2-fee-structure","title":"2. Fee Structure","text":"<ul> <li>Fee Types</li> <li>Processing fees</li> <li>Currency fees</li> <li>Refund fees</li> <li> <p>Dispute fees</p> </li> <li> <p>Fee Calculation</p> </li> <li>Percentage based</li> <li>Fixed amount</li> <li>Tiered pricing</li> <li>Special rates</li> </ul>"},{"location":"features/payment/#reporting-and-analytics","title":"Reporting and Analytics","text":""},{"location":"features/payment/#1-payment-analytics","title":"1. Payment Analytics","text":"<ul> <li>Transaction Metrics</li> <li>Success rate</li> <li>Failure rate</li> <li>Average amount</li> <li> <p>Method distribution</p> </li> <li> <p>Financial Metrics</p> </li> <li>Revenue</li> <li>Fees</li> <li>Refunds</li> <li>Disputes</li> </ul>"},{"location":"features/payment/#2-risk-analytics","title":"2. Risk Analytics","text":"<ul> <li>Risk Metrics</li> <li>Fraud rate</li> <li>Dispute rate</li> <li>Chargeback rate</li> <li> <p>Risk score</p> </li> <li> <p>Trend Analysis</p> </li> <li>Method trends</li> <li>Geographic patterns</li> <li>Time patterns</li> <li>Risk patterns</li> </ul>"},{"location":"features/payment/#compliance-and-regulations","title":"Compliance and Regulations","text":""},{"location":"features/payment/#1-regulatory-compliance","title":"1. Regulatory Compliance","text":"<ul> <li>Standards</li> <li>PCI DSS</li> <li>GDPR</li> <li>PSD2</li> <li> <p>Local regulations</p> </li> <li> <p>Requirements</p> </li> <li>Data protection</li> <li>Reporting</li> <li>Auditing</li> <li>Documentation</li> </ul>"},{"location":"features/payment/#2-internal-controls","title":"2. Internal Controls","text":"<ul> <li>Process Controls</li> <li>Authorization limits</li> <li>Approval workflows</li> <li>Audit trails</li> <li> <p>Reconciliation</p> </li> <li> <p>System Controls</p> </li> <li>Access control</li> <li>Change management</li> <li>Backup procedures</li> <li>Monitoring </li> </ul>"},{"location":"features/user-management/","title":"User Management","text":"<p>This document details the user management system implementation in the Dokkerr application.</p>"},{"location":"features/user-management/#user-registration-flow","title":"User Registration Flow","text":"<pre><code>sequenceDiagram\n    participant User\n    participant App\n    participant API\n    participant Auth\n    participant DB\n\n    User-&gt;&gt;App: Register Request\n    App-&gt;&gt;API: POST /api/users/register\n    API-&gt;&gt;Auth: Validate Input\n    Auth-&gt;&gt;DB: Check Existing User\n    DB--&gt;&gt;Auth: User Available\n\n    Auth-&gt;&gt;DB: Create User\n    DB--&gt;&gt;Auth: User Created\n    Auth-&gt;&gt;Auth: Generate Token\n    Auth--&gt;&gt;API: Registration Success\n    API--&gt;&gt;App: User Created\n    App--&gt;&gt;User: Registration Complete</code></pre>"},{"location":"features/user-management/#user-roles-and-permissions","title":"User Roles and Permissions","text":"<pre><code>graph TB\n    subgraph User Types\n        A[Admin]\n        B[Dock Owner]\n        C[Renter]\n        D[Guest]\n    end\n\n    subgraph Permissions\n        E[System Admin]\n        F[Dock Management]\n        G[Booking Management]\n        H[User Management]\n        I[Payment Management]\n        J[Report Access]\n    end\n\n    A --&gt; E\n    A --&gt; F\n    A --&gt; G\n    A --&gt; H\n    A --&gt; I\n    A --&gt; J\n\n    B --&gt; F\n    B --&gt; G\n    B --&gt; J\n\n    C --&gt; G\n\n    D --&gt; J</code></pre>"},{"location":"features/user-management/#user-profile-management","title":"User Profile Management","text":""},{"location":"features/user-management/#1-profile-information","title":"1. Profile Information","text":"<ul> <li>Basic Information</li> <li>Personal details</li> <li>Contact information</li> <li>Profile picture</li> <li> <p>Preferences</p> </li> <li> <p>Verification</p> </li> <li>Email verification</li> <li>Phone verification</li> <li>Identity verification</li> <li>Address verification</li> </ul>"},{"location":"features/user-management/#2-account-settings","title":"2. Account Settings","text":"<ul> <li>Security Settings</li> <li>Password management</li> <li>Two-factor auth</li> <li>Login history</li> <li> <p>Device management</p> </li> <li> <p>Notification Settings</p> </li> <li>Email preferences</li> <li>Push notifications</li> <li>SMS notifications</li> <li>Marketing preferences</li> </ul>"},{"location":"features/user-management/#authentication-system","title":"Authentication System","text":""},{"location":"features/user-management/#1-login-methods","title":"1. Login Methods","text":"<ul> <li>Standard Login</li> <li>Email/password</li> <li>Phone/password</li> <li>Username/password</li> <li> <p>Remember me</p> </li> <li> <p>Social Login</p> </li> <li>Google</li> <li>Facebook</li> <li>Apple</li> <li>LinkedIn</li> </ul>"},{"location":"features/user-management/#2-password-management","title":"2. Password Management","text":"<ul> <li>Password Rules</li> <li>Complexity requirements</li> <li>Expiration policy</li> <li>History tracking</li> <li> <p>Reset process</p> </li> <li> <p>Recovery Options</p> </li> <li>Email recovery</li> <li>Phone recovery</li> <li>Security questions</li> <li>Admin reset</li> </ul>"},{"location":"features/user-management/#user-data-management","title":"User Data Management","text":""},{"location":"features/user-management/#1-data-storage","title":"1. Data Storage","text":"<ul> <li>Profile Data</li> <li>Personal information</li> <li>Contact details</li> <li>Preferences</li> <li> <p>Activity history</p> </li> <li> <p>Security Data</p> </li> <li>Authentication tokens</li> <li>Session data</li> <li>Security settings</li> <li>Access logs</li> </ul>"},{"location":"features/user-management/#2-data-privacy","title":"2. Data Privacy","text":"<ul> <li>Privacy Controls</li> <li>Data visibility</li> <li>Sharing settings</li> <li>Data export</li> <li> <p>Data deletion</p> </li> <li> <p>Compliance</p> </li> <li>GDPR compliance</li> <li>Data retention</li> <li>User consent</li> <li>Privacy policy</li> </ul>"},{"location":"features/user-management/#user-communication","title":"User Communication","text":""},{"location":"features/user-management/#1-notification-system","title":"1. Notification System","text":"<ul> <li>System Notifications</li> <li>Account updates</li> <li>Security alerts</li> <li>System maintenance</li> <li> <p>Policy changes</p> </li> <li> <p>Business Notifications</p> </li> <li>Booking updates</li> <li>Payment notifications</li> <li>Dock availability</li> <li>Special offers</li> </ul>"},{"location":"features/user-management/#2-communication-channels","title":"2. Communication Channels","text":"<ul> <li>Primary Channels</li> <li>Email</li> <li>SMS</li> <li>Push notifications</li> <li> <p>In-app messages</p> </li> <li> <p>Support Channels</p> </li> <li>Help center</li> <li>Live chat</li> <li>Support tickets</li> <li>FAQ</li> </ul>"},{"location":"features/user-management/#user-analytics","title":"User Analytics","text":""},{"location":"features/user-management/#1-user-behavior","title":"1. User Behavior","text":"<ul> <li>Activity Tracking</li> <li>Login patterns</li> <li>Feature usage</li> <li>Search patterns</li> <li> <p>Booking behavior</p> </li> <li> <p>Engagement Metrics</p> </li> <li>Session duration</li> <li>Feature adoption</li> <li>Return rate</li> <li>User satisfaction</li> </ul>"},{"location":"features/user-management/#2-performance-metrics","title":"2. Performance Metrics","text":"<ul> <li>User Metrics</li> <li>Registration rate</li> <li>Conversion rate</li> <li>Retention rate</li> <li> <p>Churn rate</p> </li> <li> <p>Business Impact</p> </li> <li>Revenue per user</li> <li>Customer lifetime value</li> <li>Support costs</li> <li>User acquisition cost</li> </ul>"},{"location":"features/user-management/#administrative-tools","title":"Administrative Tools","text":""},{"location":"features/user-management/#1-user-management","title":"1. User Management","text":"<ul> <li>Admin Controls</li> <li>User creation</li> <li>Role assignment</li> <li>Status management</li> <li> <p>Access control</p> </li> <li> <p>Bulk Operations</p> </li> <li>User import</li> <li>Role updates</li> <li>Status changes</li> <li>Data export</li> </ul>"},{"location":"features/user-management/#2-monitoring-tools","title":"2. Monitoring Tools","text":"<ul> <li>Activity Monitoring</li> <li>User sessions</li> <li>Login attempts</li> <li>Feature usage</li> <li> <p>Error tracking</p> </li> <li> <p>Security Monitoring</p> </li> <li>Suspicious activity</li> <li>Failed logins</li> <li>Access patterns</li> <li>Security alerts</li> </ul>"},{"location":"features/user-management/#integration-points","title":"Integration Points","text":""},{"location":"features/user-management/#1-external-services","title":"1. External Services","text":"<ul> <li>Identity Providers</li> <li>OAuth providers</li> <li>SSO systems</li> <li>Identity verification</li> <li> <p>Social networks</p> </li> <li> <p>Communication Services</p> </li> <li>Email service</li> <li>SMS service</li> <li>Push notification</li> <li>Chat service</li> </ul>"},{"location":"features/user-management/#2-internal-systems","title":"2. Internal Systems","text":"<ul> <li>Business Systems</li> <li>Booking system</li> <li>Payment system</li> <li>Inventory system</li> <li> <p>Reporting system</p> </li> <li> <p>Support Systems</p> </li> <li>Help desk</li> <li>Knowledge base</li> <li>Feedback system</li> <li>Analytics system </li> </ul>"},{"location":"operations/","title":"Operations Overview","text":""},{"location":"operations/#introduction","title":"Introduction","text":"<p>This section provides comprehensive documentation on operating and maintaining the Dokkerr platform. It covers essential operational aspects including deployment, monitoring, maintenance, scaling, and incident response procedures.</p> <p>Operations are a critical component of the Dokkerr platform, ensuring the service remains available, performant, and secure for all users. This documentation serves as a guide for operations teams, system administrators, and DevOps engineers responsible for the platform's day-to-day management.</p>"},{"location":"operations/#key-operational-areas","title":"Key Operational Areas","text":""},{"location":"operations/#deployment","title":"Deployment","text":"<p>Learn about the deployment process, environments, and continuous delivery pipeline for the Dokkerr platform. This section covers both manual and automated deployment procedures, rollback strategies, and deployment verification.</p>"},{"location":"operations/#monitoring","title":"Monitoring","text":"<p>Comprehensive documentation on our monitoring infrastructure, including metrics collection, log aggregation, dashboards, and visualization tools. Learn how we track system health, performance metrics, and user experience indicators.</p>"},{"location":"operations/#maintenance","title":"Maintenance","text":"<p>Guidelines for routine maintenance tasks, scheduled downtime procedures, database maintenance, and system updates. This section outlines best practices for minimizing service disruption during maintenance activities.</p>"},{"location":"operations/#backup-recovery","title":"Backup &amp; Recovery","text":"<p>Detailed information on backup procedures, disaster recovery planning, and data restoration processes. This section covers database backups, documentation backups, and business continuity measures.</p>"},{"location":"operations/#incident-response","title":"Incident Response","text":"<p>Procedures for responding to system incidents, outages, and security events. Learn about our incident classification, escalation paths, communication protocols, and post-incident review process.</p>"},{"location":"operations/#performance","title":"Performance","text":"<p>Documentation on performance optimization, benchmarking, and capacity planning. This section covers techniques for identifying bottlenecks, performance testing methodologies, and optimization strategies.</p>"},{"location":"operations/#scaling","title":"Scaling","text":"<p>Guidelines for horizontal and vertical scaling of the Dokkerr platform components. Learn about our auto-scaling configurations, load balancing strategies, and capacity planning methodologies.</p>"},{"location":"operations/#security","title":"Security","text":"<p>Operational security procedures, including access management, vulnerability scanning, patch management, and security monitoring. This section complements the main Security documentation.</p>"},{"location":"operations/#compliance","title":"Compliance","text":"<p>Information on maintaining regulatory compliance, audit procedures, and compliance monitoring. Learn about our approaches to GDPR, CCPA, PCI DSS, and other relevant regulations.</p>"},{"location":"operations/#operations-tooling","title":"Operations Tooling","text":"<p>The Dokkerr platform leverages several tools for operational management:</p> Tool Purpose Documentation Prometheus Metrics collection and alerting Monitoring Grafana Metrics visualization and dashboards Monitoring ELK Stack Log aggregation and analysis Monitoring PagerDuty Alert management and on-call rotation Incident Response Kubernetes Container orchestration Deployment Terraform Infrastructure as Code Deployment Backup Manager Automated backup scheduling Backup &amp; Recovery"},{"location":"operations/backup-recovery/","title":"Backup and Recovery","text":""},{"location":"operations/backup-recovery/#overview","title":"Overview","text":"<p>Dokkerr implements a comprehensive backup and recovery strategy to ensure data safety, business continuity, and minimal downtime in case of system failures.</p>"},{"location":"operations/backup-recovery/#backup-strategy","title":"Backup Strategy","text":""},{"location":"operations/backup-recovery/#database-backups","title":"Database Backups","text":"<pre><code># Automated daily backup script\n#!/bin/bash\nTIMESTAMP=$(date +%Y%m%d_%H%M%S)\nBACKUP_DIR=\"/backup/postgres\"\nDB_NAME=\"dokkerr\"\n\n# Full database backup\npg_dump -Fc $DB_NAME &gt; $BACKUP_DIR/full_backup_$TIMESTAMP.dump\n\n# Cleanup old backups (keep last 30 days)\nfind $BACKUP_DIR -type f -name \"full_backup_*.dump\" -mtime +30 -delete\n</code></pre>"},{"location":"operations/backup-recovery/#backup-schedule","title":"Backup Schedule","text":"<ol> <li>Full Backups</li> <li>Daily at 2 AM UTC</li> <li>Retention: 30 days</li> <li> <p>Location: AWS S3 (encrypted)</p> </li> <li> <p>Transaction Logs</p> </li> <li>Continuous archiving</li> <li>15-minute intervals</li> <li> <p>Retention: 7 days</p> </li> <li> <p>Snapshot Backups</p> </li> <li>Weekly on Sunday</li> <li>Retention: 3 months</li> <li>Cross-region replication</li> </ol>"},{"location":"operations/backup-recovery/#file-storage-backups","title":"File Storage Backups","text":"<pre><code>import { S3 } from '@aws-sdk/client-s3';\n\nclass StorageBackup {\n  static async backupUserFiles() {\n    const s3 = new S3({\n      region: process.env.AWS_REGION\n    });\n\n    // Sync user uploads to backup bucket\n    await s3.sync({\n      source: 'dokkerr-uploads',\n      destination: 'dokkerr-backups',\n      deleteOrphaned: false\n    });\n  }\n}\n</code></pre>"},{"location":"operations/backup-recovery/#backup-types","title":"Backup Types","text":"<ol> <li>User Uploads</li> <li>Real-time replication</li> <li>Cross-region backup</li> <li> <p>Versioning enabled</p> </li> <li> <p>System Files</p> </li> <li>Daily incremental backups</li> <li>Weekly full backups</li> <li>Configuration files</li> </ol>"},{"location":"operations/backup-recovery/#recovery-procedures","title":"Recovery Procedures","text":""},{"location":"operations/backup-recovery/#database-recovery","title":"Database Recovery","text":"<pre><code>class DatabaseRecovery {\n  static async restoreFromBackup(backupFile: string) {\n    // Stop application servers\n    await stopApplicationServers();\n\n    // Restore database\n    await executeCommand(`pg_restore -d dokkerr ${backupFile}`);\n\n    // Apply transaction logs\n    await applyTransactionLogs();\n\n    // Verify data integrity\n    await verifyDatabaseIntegrity();\n\n    // Start application servers\n    await startApplicationServers();\n  }\n}\n</code></pre>"},{"location":"operations/backup-recovery/#point-in-time-recovery","title":"Point-in-Time Recovery","text":"<pre><code>async function pointInTimeRecovery(targetTimestamp: Date) {\n  const recovery = new Recovery({\n    type: 'PITR',\n    timestamp: targetTimestamp,\n    validateOnly: false\n  });\n\n  await recovery.prepare();\n  await recovery.execute();\n  await recovery.verify();\n}\n</code></pre>"},{"location":"operations/backup-recovery/#disaster-recovery","title":"Disaster Recovery","text":""},{"location":"operations/backup-recovery/#recovery-time-objectives-rto","title":"Recovery Time Objectives (RTO)","text":"System Component RTO Target Core API 1 hour Database 2 hours File Storage 4 hours Full System 6 hours"},{"location":"operations/backup-recovery/#recovery-point-objectives-rpo","title":"Recovery Point Objectives (RPO)","text":"Data Type RPO Target Transactions 15 minutes User Files 1 hour System Config 24 hours"},{"location":"operations/backup-recovery/#failover-process","title":"Failover Process","text":"<pre><code>class DisasterRecovery {\n  static async initiateFailover() {\n    try {\n      // 1. Verify backup region health\n      await verifyBackupRegionHealth();\n\n      // 2. Switch DNS records\n      await updateDNSRecords();\n\n      // 3. Promote replica database\n      await promoteReplicaDatabase();\n\n      // 4. Update application configuration\n      await updateAppConfig();\n\n      // 5. Start backup region services\n      await startBackupServices();\n\n    } catch (error) {\n      await notifyEmergencyContacts(error);\n      throw error;\n    }\n  }\n}\n</code></pre>"},{"location":"operations/backup-recovery/#testing-and-verification","title":"Testing and Verification","text":""},{"location":"operations/backup-recovery/#backup-testing","title":"Backup Testing","text":"<pre><code>class BackupTesting {\n  static async verifyBackup(backupId: string) {\n    // 1. Create test environment\n    const testEnv = await createTestEnvironment();\n\n    // 2. Restore backup to test environment\n    await restoreBackup(backupId, testEnv);\n\n    // 3. Run verification tests\n    const results = await runVerificationTests();\n\n    // 4. Cleanup test environment\n    await cleanupTestEnvironment(testEnv);\n\n    return results;\n  }\n}\n</code></pre>"},{"location":"operations/backup-recovery/#recovery-testing-schedule","title":"Recovery Testing Schedule","text":"<ol> <li>Monthly Tests</li> <li>Database recovery</li> <li>File system recovery</li> <li> <p>Application restoration</p> </li> <li> <p>Quarterly Tests</p> </li> <li>Full disaster recovery</li> <li>Failover procedures</li> <li>Cross-region recovery</li> </ol>"},{"location":"operations/backup-recovery/#monitoring-and-alerts","title":"Monitoring and Alerts","text":""},{"location":"operations/backup-recovery/#backup-monitoring","title":"Backup Monitoring","text":"<pre><code>class BackupMonitor {\n  static async checkBackupHealth() {\n    return {\n      lastBackupStatus: await getLastBackupStatus(),\n      backupSize: await getBackupSize(),\n      retentionCompliance: await checkRetentionPolicy(),\n      encryptionStatus: await verifyEncryption()\n    };\n  }\n}\n</code></pre>"},{"location":"operations/backup-recovery/#alert-configuration","title":"Alert Configuration","text":"<pre><code>const backupAlerts = {\n  failedBackup: {\n    severity: 'critical',\n    notification: ['email', 'sms', 'slack'],\n    escalation: true\n  },\n  backupDelay: {\n    severity: 'warning',\n    notification: ['email', 'slack'],\n    escalation: false\n  }\n};\n</code></pre>"},{"location":"operations/backup-recovery/#security-measures","title":"Security Measures","text":""},{"location":"operations/backup-recovery/#backup-security","title":"Backup Security","text":"<ol> <li>Encryption</li> <li>At-rest encryption (AES-256)</li> <li>In-transit encryption (TLS 1.3)</li> <li> <p>Key rotation every 90 days</p> </li> <li> <p>Access Control</p> </li> <li>Role-based access</li> <li>Multi-factor authentication</li> <li>Audit logging</li> </ol>"},{"location":"operations/backup-recovery/#recovery-security","title":"Recovery Security","text":"<pre><code>class RecoverySecurity {\n  static async validateRecoveryRequest(request: RecoveryRequest) {\n    // Verify authorization\n    await verifyAuthorization(request.userId);\n\n    // Check security requirements\n    await validateSecurityRequirements(request);\n\n    // Log recovery attempt\n    await logRecoveryAttempt(request);\n  }\n}\n</code></pre>"},{"location":"operations/backup-recovery/#troubleshooting","title":"Troubleshooting","text":"<p>Common issues and solutions:</p> <ol> <li>Failed Backups</li> <li>Check storage capacity</li> <li>Verify permissions</li> <li> <p>Monitor backup logs</p> </li> <li> <p>Recovery Issues</p> </li> <li>Validate backup integrity</li> <li>Check system resources</li> <li> <p>Verify dependencies</p> </li> <li> <p>Replication Delays</p> </li> <li>Monitor network latency</li> <li>Check replication logs</li> <li>Verify bandwidth capacity </li> </ol>"},{"location":"operations/compliance/","title":"Compliance","text":""},{"location":"operations/compliance/#overview","title":"Overview","text":"<p>Dokkerr maintains compliance with various regulatory requirements and industry standards to ensure data protection, privacy, and security. This document outlines our compliance framework and implementation details.</p>"},{"location":"operations/compliance/#gdpr-compliance","title":"GDPR Compliance","text":""},{"location":"operations/compliance/#data-protection","title":"Data Protection","text":"<pre><code>class DataProtectionOfficer {\n  static async handleDataSubjectRequest(request: DataSubjectRequest) {\n    switch (request.type) {\n      case 'access':\n        return await this.handleAccessRequest(request);\n      case 'rectification':\n        return await this.handleRectificationRequest(request);\n      case 'erasure':\n        return await this.handleErasureRequest(request);\n      case 'portability':\n        return await this.handlePortabilityRequest(request);\n    }\n  }\n}\n</code></pre>"},{"location":"operations/compliance/#data-processing-records","title":"Data Processing Records","text":"<pre><code>interface DataProcessingRecord {\n  purpose: string;\n  categories: string[];\n  recipients: string[];\n  retention: string;\n  safeguards: string[];\n  dataController: string;\n}\n\nconst processingRecords: Record&lt;string, DataProcessingRecord&gt; = {\n  userRegistration: {\n    purpose: 'Account creation and management',\n    categories: ['Personal Data', 'Contact Information'],\n    recipients: ['Internal Teams', 'Cloud Service Providers'],\n    retention: '7 years after account closure',\n    safeguards: ['Encryption', 'Access Controls'],\n    dataController: 'Dokkerr Ltd'\n  }\n};\n</code></pre>"},{"location":"operations/compliance/#cookie-compliance","title":"Cookie Compliance","text":"<pre><code>class CookieManager {\n  static readonly COOKIE_CATEGORIES = {\n    necessary: {\n      required: true,\n      description: 'Essential for website functionality'\n    },\n    analytics: {\n      required: false,\n      description: 'Help us improve our services'\n    },\n    marketing: {\n      required: false,\n      description: 'Used for targeted advertising'\n    }\n  };\n\n  static async getUserConsent(userId: string) {\n    return await db.cookieConsent.findUnique({\n      where: { userId }\n    });\n  }\n\n  static async updateConsent(userId: string, categories: string[]) {\n    await db.cookieConsent.upsert({\n      where: { userId },\n      update: { categories },\n      create: { userId, categories }\n    });\n  }\n}\n</code></pre>"},{"location":"operations/compliance/#pci-dss-compliance","title":"PCI DSS Compliance","text":""},{"location":"operations/compliance/#card-data-handling","title":"Card Data Handling","text":"<pre><code>class PaymentCardHandler {\n  static validateCardData(card: PaymentCard) {\n    // Ensure PCI compliance\n    if (!this.isTokenized(card.number)) {\n      throw new Error('Must use tokenized card numbers');\n    }\n\n    // Validate expiry\n    if (!this.isValidExpiry(card.expiry)) {\n      throw new Error('Invalid card expiry');\n    }\n\n    return true;\n  }\n\n  static maskCardNumber(number: string) {\n    return `****-****-****-${number.slice(-4)}`;\n  }\n}\n</code></pre>"},{"location":"operations/compliance/#security-controls","title":"Security Controls","text":"<pre><code>class PCIControls {\n  static async performSecurityCheck() {\n    return {\n      networkSecurity: await this.checkNetworkSegmentation(),\n      encryption: await this.validateEncryption(),\n      accessControl: await this.auditAccessControls(),\n      monitoring: await this.verifyMonitoring()\n    };\n  }\n\n  static async generateComplianceReport() {\n    const checks = await this.performSecurityCheck();\n    return this.formatPCIReport(checks);\n  }\n}\n</code></pre>"},{"location":"operations/compliance/#soc-2-compliance","title":"SOC 2 Compliance","text":""},{"location":"operations/compliance/#security-controls_1","title":"Security Controls","text":"<pre><code>class SOC2Controls {\n  static async monitorSecurityControls() {\n    return {\n      accessControl: await this.checkAccessControls(),\n      changeManagement: await this.auditChangeManagement(),\n      incidentResponse: await this.verifyIncidentResponse(),\n      riskManagement: await this.assessRiskManagement()\n    };\n  }\n}\n</code></pre>"},{"location":"operations/compliance/#audit-logging","title":"Audit Logging","text":"<pre><code>class AuditLogger {\n  static async logSystemEvent(event: SystemEvent) {\n    await db.auditLogs.create({\n      data: {\n        eventType: event.type,\n        userId: event.userId,\n        resourceId: event.resourceId,\n        action: event.action,\n        timestamp: new Date(),\n        metadata: event.metadata\n      }\n    });\n  }\n\n  static async generateAuditReport(timeframe: DateRange) {\n    const logs = await db.auditLogs.findMany({\n      where: {\n        timestamp: {\n          gte: timeframe.start,\n          lte: timeframe.end\n        }\n      }\n    });\n\n    return this.formatAuditReport(logs);\n  }\n}\n</code></pre>"},{"location":"operations/compliance/#hipaa-compliance","title":"HIPAA Compliance","text":""},{"location":"operations/compliance/#phi-handling","title":"PHI Handling","text":"<pre><code>class PHIHandler {\n  static async processPHI(data: PHIData) {\n    // Ensure encryption\n    const encrypted = await this.encryptPHI(data);\n\n    // Log access\n    await this.logPHIAccess({\n      userId: getCurrentUser().id,\n      dataId: data.id,\n      action: 'access',\n      timestamp: new Date()\n    });\n\n    return encrypted;\n  }\n\n  static async auditPHIAccess(timeframe: DateRange) {\n    return await db.phiAccessLogs.findMany({\n      where: {\n        timestamp: {\n          gte: timeframe.start,\n          lte: timeframe.end\n        }\n      }\n    });\n  }\n}\n</code></pre>"},{"location":"operations/compliance/#security-measures","title":"Security Measures","text":"<pre><code>class HIPAAControls {\n  static readonly SECURITY_REQUIREMENTS = {\n    encryption: {\n      atRest: true,\n      inTransit: true,\n      algorithm: 'AES-256-GCM'\n    },\n    access: {\n      authentication: 'MFA',\n      authorization: 'RBAC',\n      audit: true\n    },\n    backup: {\n      frequency: 'daily',\n      encryption: true,\n      retention: '7 years'\n    }\n  };\n}\n</code></pre>"},{"location":"operations/compliance/#iso-27001-compliance","title":"ISO 27001 Compliance","text":""},{"location":"operations/compliance/#information-security","title":"Information Security","text":"<pre><code>class ISO27001Controls {\n  static async performSecurityAssessment() {\n    return {\n      assetManagement: await this.assessAssetManagement(),\n      accessControl: await this.assessAccessControl(),\n      cryptography: await this.assessCryptography(),\n      physicalSecurity: await this.assessPhysicalSecurity(),\n      operations: await this.assessOperations(),\n      communications: await this.assessCommunications()\n    };\n  }\n}\n</code></pre>"},{"location":"operations/compliance/#risk-management","title":"Risk Management","text":"<pre><code>class RiskManager {\n  static async assessRisk(asset: Asset) {\n    const threats = await this.identifyThreats(asset);\n    const vulnerabilities = await this.assessVulnerabilities(asset);\n\n    return threats.map(threat =&gt; ({\n      threat,\n      vulnerabilities: vulnerabilities.filter(v =&gt; v.appliesTo(threat)),\n      impact: this.calculateImpact(threat, asset),\n      likelihood: this.calculateLikelihood(threat, vulnerabilities),\n      mitigations: this.proposeMitigations(threat, vulnerabilities)\n    }));\n  }\n}\n</code></pre>"},{"location":"operations/compliance/#compliance-monitoring","title":"Compliance Monitoring","text":""},{"location":"operations/compliance/#automated-checks","title":"Automated Checks","text":"<pre><code>class ComplianceMonitor {\n  static async runComplianceChecks() {\n    return {\n      gdpr: await this.checkGDPRCompliance(),\n      pci: await this.checkPCICompliance(),\n      soc2: await this.checkSOC2Compliance(),\n      hipaa: await this.checkHIPAACompliance(),\n      iso27001: await this.checkISO27001Compliance()\n    };\n  }\n\n  static async generateComplianceReport() {\n    const checks = await this.runComplianceChecks();\n    return this.formatComplianceReport(checks);\n  }\n}\n</code></pre>"},{"location":"operations/compliance/#reporting","title":"Reporting","text":"<pre><code>class ComplianceReporting {\n  static async generateReport(type: ComplianceType, timeframe: DateRange) {\n    const data = await this.gatherComplianceData(type, timeframe);\n\n    return {\n      summary: this.generateSummary(data),\n      findings: this.analyzeFindigs(data),\n      recommendations: this.generateRecommendations(data),\n      metrics: this.calculateMetrics(data)\n    };\n  }\n}\n</code></pre>"},{"location":"operations/compliance/#training-and-awareness","title":"Training and Awareness","text":""},{"location":"operations/compliance/#employee-training","title":"Employee Training","text":"<pre><code>class ComplianceTraining {\n  static async assignTraining(employeeId: string) {\n    const requiredModules = await this.getRequiredModules(employeeId);\n\n    await db.trainingAssignments.create({\n      data: {\n        employeeId,\n        modules: requiredModules,\n        dueDate: new Date(Date.now() + 30 * 24 * 60 * 60 * 1000), // 30 days\n        status: 'assigned'\n      }\n    });\n  }\n\n  static async trackCompletion(employeeId: string, moduleId: string) {\n    await db.trainingCompletion.create({\n      data: {\n        employeeId,\n        moduleId,\n        completedAt: new Date(),\n        score: await this.calculateScore(employeeId, moduleId)\n      }\n    });\n  }\n}\n</code></pre>"},{"location":"operations/compliance/#troubleshooting","title":"Troubleshooting","text":"<p>Common compliance issues and solutions:</p> <ol> <li>GDPR Compliance</li> <li>Review data processing records</li> <li>Update privacy notices</li> <li> <p>Verify consent management</p> </li> <li> <p>PCI DSS Issues</p> </li> <li>Check card data handling</li> <li>Review security controls</li> <li> <p>Update documentation</p> </li> <li> <p>Audit Findings</p> </li> <li>Address control gaps</li> <li>Implement recommendations</li> <li>Update procedures </li> </ol>"},{"location":"operations/deployment/","title":"deployment","text":"<p>This page is under construction.</p>"},{"location":"operations/incident-response/","title":"Incident Response","text":""},{"location":"operations/incident-response/#overview","title":"Overview","text":"<p>This document outlines Dokkerr's incident response procedures, ensuring quick and effective handling of system incidents, outages, and security events.</p>"},{"location":"operations/incident-response/#incident-classification","title":"Incident Classification","text":""},{"location":"operations/incident-response/#severity-levels","title":"Severity Levels","text":"<pre><code>interface IncidentSeverity {\n  critical: {\n    description: 'System-wide outage or security breach',\n    response_time: '15 minutes',\n    update_frequency: '30 minutes',\n    escalation: 'Immediate to CTO'\n  };\n  high: {\n    description: 'Major feature unavailable or performance degradation',\n    response_time: '30 minutes',\n    update_frequency: '1 hour',\n    escalation: 'Engineering Manager'\n  };\n  medium: {\n    description: 'Non-critical feature unavailable',\n    response_time: '2 hours',\n    update_frequency: '4 hours',\n    escalation: 'Team Lead'\n  };\n  low: {\n    description: 'Minor issue with workaround available',\n    response_time: '24 hours',\n    update_frequency: '24 hours',\n    escalation: 'Developer on duty'\n  };\n}\n</code></pre>"},{"location":"operations/incident-response/#incident-types","title":"Incident Types","text":"<pre><code>class IncidentClassifier {\n  static readonly INCIDENT_TYPES = {\n    availability: {\n      symptoms: [\n        'Service unavailable',\n        'High error rates',\n        'Timeout increases'\n      ],\n      initial_actions: [\n        'Check system status',\n        'Review error logs',\n        'Monitor resource usage'\n      ]\n    },\n    performance: {\n      symptoms: [\n        'Slow response times',\n        'High latency',\n        'Resource exhaustion'\n      ],\n      initial_actions: [\n        'Review performance metrics',\n        'Check database load',\n        'Analyze resource usage'\n      ]\n    },\n    security: {\n      symptoms: [\n        'Unauthorized access',\n        'Data breach',\n        'Unusual traffic patterns'\n      ],\n      initial_actions: [\n        'Isolate affected systems',\n        'Enable enhanced logging',\n        'Block suspicious IPs'\n      ]\n    },\n    data: {\n      symptoms: [\n        'Data corruption',\n        'Inconsistent state',\n        'Failed backups'\n      ],\n      initial_actions: [\n        'Stop write operations',\n        'Verify backup integrity',\n        'Begin data recovery'\n      ]\n    }\n  };\n}\n</code></pre>"},{"location":"operations/incident-response/#response-procedures","title":"Response Procedures","text":""},{"location":"operations/incident-response/#initial-response","title":"Initial Response","text":"<pre><code>class IncidentResponder {\n  static readonly RESPONSE_CHECKLIST = {\n    immediate_actions: [\n      'Acknowledge incident alert',\n      'Assess severity and impact',\n      'Begin incident documentation',\n      'Notify required personnel'\n    ],\n    communication: {\n      internal: ['Slack #incidents', 'Email incident@dokkerr.com'],\n      external: ['Status page update', 'Customer notifications']\n    },\n    documentation: {\n      required_info: [\n        'Incident ID',\n        'Timestamp',\n        'Severity level',\n        'Initial assessment',\n        'Affected systems'\n      ]\n    }\n  };\n\n  static async initiateResponse(incident: Incident) {\n    const response = new IncidentResponse(incident);\n    await response.executeChecklist();\n    await response.notifyStakeholders();\n    return response.createWarRoom();\n  }\n}\n</code></pre>"},{"location":"operations/incident-response/#investigation-process","title":"Investigation Process","text":"<pre><code>class IncidentInvestigator {\n  static readonly INVESTIGATION_STEPS = {\n    data_collection: [\n      'System logs',\n      'Error reports',\n      'Metrics data',\n      'User reports'\n    ],\n    analysis: {\n      patterns: 'Review for recurring issues',\n      timeline: 'Establish event sequence',\n      impact: 'Assess affected users/systems'\n    },\n    tools: {\n      logging: ['CloudWatch', 'ELK Stack'],\n      metrics: ['Grafana', 'Prometheus'],\n      tracing: ['Jaeger', 'X-Ray']\n    }\n  };\n\n  static async investigate(incident: Incident) {\n    const data = await this.collectData();\n    const analysis = await this.analyzeData(data);\n    return this.generateReport(analysis);\n  }\n}\n</code></pre>"},{"location":"operations/incident-response/#mitigation-strategies","title":"Mitigation Strategies","text":""},{"location":"operations/incident-response/#immediate-actions","title":"Immediate Actions","text":"<pre><code>class IncidentMitigator {\n  static readonly MITIGATION_STRATEGIES = {\n    availability: {\n      actions: [\n        'Enable backup systems',\n        'Scale resources',\n        'Implement circuit breakers'\n      ],\n      rollback_plan: {\n        steps: ['Stop deployment', 'Revert changes', 'Verify stability'],\n        validation: ['System health', 'Error rates', 'Performance metrics']\n      }\n    },\n    performance: {\n      actions: [\n        'Optimize queries',\n        'Increase caching',\n        'Scale horizontally'\n      ],\n      monitoring: {\n        metrics: ['Response time', 'Resource usage', 'Error rates'],\n        thresholds: ['p95 &lt; 500ms', 'CPU &lt; 80%', 'Error rate &lt; 1%']\n      }\n    },\n    security: {\n      actions: [\n        'Block malicious traffic',\n        'Rotate compromised credentials',\n        'Enable additional security controls'\n      ],\n      validation: {\n        checks: ['Access logs', 'Security scans', 'Threat analysis'],\n        requirements: ['No unauthorized access', 'Clean security scan']\n      }\n    }\n  };\n}\n</code></pre>"},{"location":"operations/incident-response/#recovery-procedures","title":"Recovery Procedures","text":"<pre><code>class IncidentRecovery {\n  static readonly RECOVERY_STEPS = {\n    service_restoration: {\n      steps: [\n        'Verify system stability',\n        'Enable traffic gradually',\n        'Monitor key metrics'\n      ],\n      validation: {\n        checks: ['Service health', 'Data integrity', 'Performance'],\n        duration: '30 minutes'\n      }\n    },\n    data_recovery: {\n      steps: [\n        'Validate backup data',\n        'Restore from backup',\n        'Verify data consistency'\n      ],\n      validation: {\n        checks: ['Data completeness', 'System consistency'],\n        duration: '1 hour'\n      }\n    }\n  };\n\n  static async executeRecovery(plan: RecoveryPlan) {\n    await this.validatePlan(plan);\n    await this.executeSteps(plan.steps);\n    return this.verifyRecovery(plan);\n  }\n}\n</code></pre>"},{"location":"operations/incident-response/#post-incident-procedures","title":"Post-Incident Procedures","text":""},{"location":"operations/incident-response/#analysis-and-documentation","title":"Analysis and Documentation","text":"<pre><code>class PostIncidentAnalysis {\n  static readonly ANALYSIS_TEMPLATE = {\n    summary: {\n      incident_id: string,\n      duration: string,\n      impact: {\n        users_affected: number,\n        services_affected: string[],\n        business_impact: string\n      }\n    },\n    timeline: {\n      detection: string,\n      response: string,\n      resolution: string,\n      key_events: Array&lt;{\n        timestamp: string,\n        description: string,\n        action_taken: string\n      }&gt;\n    },\n    root_cause: {\n      technical_factors: string[],\n      process_factors: string[],\n      contributing_factors: string[]\n    },\n    lessons_learned: {\n      what_went_well: string[],\n      what_went_wrong: string[],\n      action_items: Array&lt;{\n        description: string,\n        owner: string,\n        deadline: string,\n        priority: 'high' | 'medium' | 'low'\n      }&gt;\n    }\n  };\n}\n</code></pre>"},{"location":"operations/incident-response/#improvement-plan","title":"Improvement Plan","text":"<pre><code>class IncidentPreventionPlan {\n  static readonly PREVENTION_MEASURES = {\n    technical: {\n      monitoring: [\n        'Enhanced alerting',\n        'Additional metrics',\n        'Improved logging'\n      ],\n      automation: [\n        'Automated recovery',\n        'Self-healing systems',\n        'Chaos engineering'\n      ],\n      infrastructure: [\n        'Redundancy improvements',\n        'Scaling enhancements',\n        'Security hardening'\n      ]\n    },\n    process: {\n      documentation: [\n        'Update runbooks',\n        'Improve procedures',\n        'Enhance training'\n      ],\n      training: [\n        'Incident response drills',\n        'Tool familiarity',\n        'Process workshops'\n      ],\n      communication: [\n        'Streamline notifications',\n        'Improve status updates',\n        'Enhance coordination'\n      ]\n    }\n  };\n}\n</code></pre>"},{"location":"operations/incident-response/#communication-guidelines","title":"Communication Guidelines","text":""},{"location":"operations/incident-response/#stakeholder-communication","title":"Stakeholder Communication","text":"<pre><code>class IncidentCommunication {\n  static readonly COMMUNICATION_PLAN = {\n    internal: {\n      channels: ['Slack', 'Email', 'Phone'],\n      templates: {\n        initial: 'Incident detected: {severity} - {description}',\n        update: 'Status update: {progress} - {next_steps}',\n        resolution: 'Incident resolved: {summary} - {prevention}'\n      },\n      stakeholders: [\n        'Engineering team',\n        'Product management',\n        'Customer support',\n        'Executive team'\n      ]\n    },\n    external: {\n      channels: ['Status page', 'Email', 'Social media'],\n      templates: {\n        initial: 'We are investigating an issue affecting {service}',\n        update: 'Update on {service}: {status} - {eta}',\n        resolution: 'Service restored: {summary}'\n      },\n      considerations: [\n        'Transparency',\n        'Timely updates',\n        'Clear language',\n        'Impact description'\n      ]\n    }\n  };\n}\n</code></pre>"},{"location":"operations/incident-response/#best-practices","title":"Best Practices","text":"<ol> <li>Preparation</li> <li>Maintain updated runbooks</li> <li>Regular incident drills</li> <li>Clear escalation paths</li> <li> <p>Tool familiarity</p> </li> <li> <p>Response</p> </li> <li>Quick acknowledgment</li> <li>Clear communication</li> <li>Systematic investigation</li> <li> <p>Regular updates</p> </li> <li> <p>Recovery</p> </li> <li>Validate solutions</li> <li>Gradual restoration</li> <li>Monitor stability</li> <li> <p>Document actions</p> </li> <li> <p>Prevention</p> </li> <li>Root cause analysis</li> <li>Implement fixes</li> <li>Update procedures</li> <li>Share learnings </li> </ol>"},{"location":"operations/maintenance/","title":"Maintenance Procedures","text":""},{"location":"operations/maintenance/#overview","title":"Overview","text":"<p>This document outlines Dokkerr's maintenance procedures, schedules, and best practices for ensuring system reliability and performance.</p>"},{"location":"operations/maintenance/#scheduled-maintenance","title":"Scheduled Maintenance","text":""},{"location":"operations/maintenance/#database-maintenance","title":"Database Maintenance","text":"<pre><code>class DatabaseMaintenance {\n  static readonly MAINTENANCE_SCHEDULE = {\n    vacuum: {\n      frequency: 'daily',\n      time: '03:00 UTC',\n      tables: ['listings', 'bookings', 'messages'],\n      options: {\n        full: false,\n        analyze: true,\n        verbose: true\n      }\n    },\n    backup: {\n      frequency: 'daily',\n      retention: '30 days',\n      type: 'incremental',\n      window: {\n        start: '01:00 UTC',\n        duration: '2 hours'\n      }\n    },\n    index_rebuild: {\n      frequency: 'weekly',\n      concurrent: true,\n      tables: {\n        high_priority: ['listings', 'users'],\n        normal: ['reviews', 'notifications']\n      }\n    }\n  };\n\n  static async performMaintenance(type: 'vacuum' | 'backup' | 'index_rebuild') {\n    const config = this.MAINTENANCE_SCHEDULE[type];\n    await this.notifyStakeholders(type);\n    await this.executeMaintenanceTask(type, config);\n    await this.validateResults(type);\n  }\n}\n</code></pre>"},{"location":"operations/maintenance/#cache-maintenance","title":"Cache Maintenance","text":"<pre><code>class CacheMaintenance {\n  static readonly CACHE_MAINTENANCE = {\n    eviction: {\n      frequency: 'hourly',\n      threshold: {\n        memory: '80%',\n        keys: 1000000\n      }\n    },\n    replication: {\n      sync_check: 'every 15 minutes',\n      max_lag: '5 seconds'\n    },\n    backup: {\n      frequency: 'daily',\n      time: '02:00 UTC',\n      retention: '7 days'\n    },\n    metrics: {\n      collection: 'every 1 minute',\n      retention: '30 days',\n      alerts: {\n        hit_rate: '&lt; 80%',\n        memory: '&gt; 90%',\n        latency: '&gt; 100ms'\n      }\n    }\n  };\n}\n</code></pre>"},{"location":"operations/maintenance/#system-updates","title":"System Updates","text":""},{"location":"operations/maintenance/#security-updates","title":"Security Updates","text":"<pre><code>class SecurityMaintenance {\n  static readonly SECURITY_PROCEDURES = {\n    patches: {\n      critical: {\n        sla: '24 hours',\n        approval: 'automatic',\n        notification: 'immediate'\n      },\n      high: {\n        sla: '72 hours',\n        approval: 'required',\n        notification: 'next business day'\n      },\n      medium: {\n        sla: '1 week',\n        approval: 'required',\n        notification: 'weekly'\n      }\n    },\n    scans: {\n      vulnerability: {\n        frequency: 'daily',\n        tool: 'Nessus',\n        scope: ['infrastructure', 'applications']\n      },\n      compliance: {\n        frequency: 'monthly',\n        standards: ['PCI-DSS', 'GDPR', 'SOC2']\n      }\n    }\n  };\n}\n</code></pre>"},{"location":"operations/maintenance/#dependency-updates","title":"Dependency Updates","text":"<pre><code>class DependencyMaintenance {\n  static readonly UPDATE_POLICY = {\n    npm: {\n      frequency: 'weekly',\n      auto_merge: {\n        patch: true,\n        minor: false,\n        major: false\n      },\n      security: {\n        auto_merge: true,\n        priority: 'high'\n      }\n    },\n    system: {\n      frequency: 'monthly',\n      packages: ['os', 'runtime', 'tools'],\n      testing: {\n        required: true,\n        environment: 'staging'\n      }\n    },\n    docker: {\n      frequency: 'monthly',\n      images: ['node', 'redis', 'postgres'],\n      scan: {\n        tool: 'Trivy',\n        threshold: 'high'\n      }\n    }\n  };\n}\n</code></pre>"},{"location":"operations/maintenance/#infrastructure-maintenance","title":"Infrastructure Maintenance","text":""},{"location":"operations/maintenance/#server-maintenance","title":"Server Maintenance","text":"<pre><code>class ServerMaintenance {\n  static readonly MAINTENANCE_TASKS = {\n    health_check: {\n      frequency: 'every 5 minutes',\n      checks: [\n        'disk_usage',\n        'memory_usage',\n        'cpu_load',\n        'service_status'\n      ]\n    },\n    cleanup: {\n      frequency: 'daily',\n      tasks: [\n        'log_rotation',\n        'temp_files',\n        'old_deployments'\n      ],\n      retention: {\n        logs: '30 days',\n        deployments: '5 versions'\n      }\n    },\n    monitoring: {\n      metrics: {\n        collection: 'every 1 minute',\n        retention: '90 days'\n      },\n      alerts: {\n        disk: '&gt; 80%',\n        memory: '&gt; 85%',\n        cpu: '&gt; 90%'\n      }\n    }\n  };\n}\n</code></pre>"},{"location":"operations/maintenance/#network-maintenance","title":"Network Maintenance","text":"<pre><code>class NetworkMaintenance {\n  static readonly NETWORK_PROCEDURES = {\n    firewall: {\n      review: 'monthly',\n      updates: {\n        emergency: 'immediate',\n        planned: 'weekly'\n      }\n    },\n    dns: {\n      health_check: 'hourly',\n      propagation: {\n        check: 'every 15 minutes',\n        timeout: '24 hours'\n      }\n    },\n    ssl: {\n      renewal: {\n        threshold: '30 days',\n        automatic: true\n      },\n      validation: {\n        frequency: 'daily',\n        alerts: ['expiration', 'configuration']\n      }\n    }\n  };\n}\n</code></pre>"},{"location":"operations/maintenance/#backup-and-recovery","title":"Backup and Recovery","text":""},{"location":"operations/maintenance/#backup-procedures","title":"Backup Procedures","text":"<pre><code>class BackupProcedures {\n  static readonly BACKUP_CONFIG = {\n    database: {\n      full: {\n        frequency: 'daily',\n        time: '01:00 UTC',\n        retention: '30 days'\n      },\n      incremental: {\n        frequency: 'hourly',\n        retention: '24 hours'\n      },\n      validation: {\n        restore_test: 'weekly',\n        integrity_check: 'daily'\n      }\n    },\n    files: {\n      user_uploads: {\n        frequency: 'daily',\n        retention: '90 days'\n      },\n      configuration: {\n        frequency: 'on change',\n        versioning: true\n      }\n    },\n    monitoring: {\n      success_rate: {\n        threshold: '99.9%',\n        window: '30 days'\n      },\n      alerts: {\n        failure: 'immediate',\n        size_change: '&gt; 20%'\n      }\n    }\n  };\n}\n</code></pre>"},{"location":"operations/maintenance/#maintenance-windows","title":"Maintenance Windows","text":""},{"location":"operations/maintenance/#scheduled-downtime","title":"Scheduled Downtime","text":"<pre><code>class MaintenanceWindows {\n  static readonly MAINTENANCE_SCHEDULE = {\n    regular: {\n      window: {\n        day: 'Sunday',\n        time: '02:00-06:00 UTC',\n        frequency: 'monthly'\n      },\n      notification: {\n        advance: '7 days',\n        reminder: '24 hours'\n      }\n    },\n    emergency: {\n      approval: ['CTO', 'Head of Operations'],\n      notification: {\n        minimum: '1 hour',\n        channels: ['email', 'sms', 'status_page']\n      }\n    },\n    blackout: {\n      periods: [\n        'holiday_season',\n        'major_events',\n        'business_hours'\n      ],\n      exceptions: {\n        security: true,\n        critical_bugs: true\n      }\n    }\n  };\n}\n</code></pre>"},{"location":"operations/maintenance/#best-practices","title":"Best Practices","text":"<ol> <li>Planning</li> <li>Schedule maintenance during low-traffic periods</li> <li>Communicate maintenance windows in advance</li> <li>Have rollback plans ready</li> <li> <p>Test procedures in staging first</p> </li> <li> <p>Execution</p> </li> <li>Follow change management procedures</li> <li>Document all maintenance activities</li> <li>Monitor system during maintenance</li> <li> <p>Have personnel on standby</p> </li> <li> <p>Validation</p> </li> <li>Verify system health post-maintenance</li> <li>Check all critical services</li> <li>Monitor for unexpected issues</li> <li> <p>Update documentation if needed</p> </li> <li> <p>Communication</p> </li> <li>Notify stakeholders of maintenance</li> <li>Provide status updates</li> <li>Document outcomes</li> <li>Share lessons learned </li> </ol>"},{"location":"operations/monitoring/","title":"Monitoring and Alerting","text":""},{"location":"operations/monitoring/#overview","title":"Overview","text":"<p>Dokkerr implements a comprehensive monitoring and alerting system to ensure system health, performance, and reliability. This document outlines our monitoring infrastructure, alerting rules, and incident response procedures.</p>"},{"location":"operations/monitoring/#infrastructure-monitoring","title":"Infrastructure Monitoring","text":""},{"location":"operations/monitoring/#system-metrics","title":"System Metrics","text":"<pre><code>class SystemMonitor {\n  static async collectMetrics() {\n    return {\n      cpu: await this.getCPUMetrics(),\n      memory: await this.getMemoryMetrics(),\n      disk: await this.getDiskMetrics(),\n      network: await this.getNetworkMetrics()\n    };\n  }\n\n  static async getCPUMetrics() {\n    return {\n      usage: await this.measureCPUUsage(),\n      load: await this.getLoadAverage(),\n      processes: await this.getProcessStats()\n    };\n  }\n}\n</code></pre>"},{"location":"operations/monitoring/#application-metrics","title":"Application Metrics","text":"<pre><code>class ApplicationMetrics {\n  static async collect() {\n    return {\n      activeUsers: await this.countActiveUsers(),\n      requestRate: await this.calculateRequestRate(),\n      responseTime: await this.measureResponseTime(),\n      errorRate: await this.calculateErrorRate(),\n      queueSize: await this.getQueueSize()\n    };\n  }\n}\n</code></pre>"},{"location":"operations/monitoring/#performance-monitoring","title":"Performance Monitoring","text":""},{"location":"operations/monitoring/#api-performance","title":"API Performance","text":"<pre><code>class APIMonitor {\n  static async trackEndpoint(endpoint: string, method: string) {\n    const metrics = {\n      latency: new Histogram({\n        name: `api_latency_${method}_${endpoint}`,\n        help: 'API endpoint latency in milliseconds',\n        buckets: [10, 50, 100, 200, 500, 1000]\n      }),\n      requests: new Counter({\n        name: `api_requests_${method}_${endpoint}`,\n        help: 'Total API requests'\n      }),\n      errors: new Counter({\n        name: `api_errors_${method}_${endpoint}`,\n        help: 'Total API errors'\n      })\n    };\n\n    return metrics;\n  }\n}\n</code></pre>"},{"location":"operations/monitoring/#database-performance","title":"Database Performance","text":"<pre><code>class DatabaseMonitor {\n  static async monitorQueries() {\n    return {\n      activeConnections: await this.getActiveConnections(),\n      queryLatency: await this.measureQueryLatency(),\n      slowQueries: await this.identifySlowQueries(),\n      deadlocks: await this.checkDeadlocks(),\n      connectionPool: await this.monitorConnectionPool()\n    };\n  }\n}\n</code></pre>"},{"location":"operations/monitoring/#real-time-monitoring","title":"Real-Time Monitoring","text":""},{"location":"operations/monitoring/#websocket-monitoring","title":"WebSocket Monitoring","text":"<pre><code>class WebSocketMonitor {\n  static async trackConnections() {\n    return {\n      activeConnections: this.countActiveConnections(),\n      messageRate: this.calculateMessageRate(),\n      latency: this.measureLatency(),\n      errors: this.trackErrors()\n    };\n  }\n\n  static async monitorRooms() {\n    return {\n      activeRooms: this.countActiveRooms(),\n      usersPerRoom: this.calculateUsersPerRoom(),\n      messageRatePerRoom: this.getMessageRatePerRoom()\n    };\n  }\n}\n</code></pre>"},{"location":"operations/monitoring/#user-activity","title":"User Activity","text":"<pre><code>class UserActivityMonitor {\n  static async trackActivity() {\n    return {\n      activeUsers: await this.getActiveUsers(),\n      userActions: await this.trackUserActions(),\n      sessionDuration: await this.calculateSessionDuration(),\n      conversionRate: await this.measureConversionRate()\n    };\n  }\n}\n</code></pre>"},{"location":"operations/monitoring/#alert-configuration","title":"Alert Configuration","text":""},{"location":"operations/monitoring/#alert-rules","title":"Alert Rules","text":"<pre><code>const alertRules = {\n  highCPUUsage: {\n    condition: 'cpu_usage &gt; 80%',\n    duration: '5m',\n    severity: 'warning',\n    escalation: {\n      warning: ['slack'],\n      critical: ['slack', 'email', 'sms']\n    }\n  },\n  highErrorRate: {\n    condition: 'error_rate &gt; 5%',\n    duration: '1m',\n    severity: 'critical',\n    escalation: {\n      warning: ['slack'],\n      critical: ['slack', 'email', 'pagerduty']\n    }\n  },\n  databaseLatency: {\n    condition: 'query_latency &gt; 1000ms',\n    duration: '2m',\n    severity: 'warning',\n    escalation: {\n      warning: ['slack'],\n      critical: ['slack', 'email']\n    }\n  }\n};\n</code></pre>"},{"location":"operations/monitoring/#alert-handlers","title":"Alert Handlers","text":"<pre><code>class AlertHandler {\n  static async processAlert(alert: Alert) {\n    // 1. Evaluate severity\n    const severity = await this.evaluateSeverity(alert);\n\n    // 2. Determine escalation path\n    const escalation = this.getEscalationPath(severity);\n\n    // 3. Send notifications\n    await this.sendNotifications(alert, escalation);\n\n    // 4. Track alert\n    await this.trackAlert(alert);\n  }\n\n  static async evaluateSeverity(alert: Alert) {\n    const metrics = await this.getRelatedMetrics(alert);\n    return this.calculateSeverity(metrics);\n  }\n}\n</code></pre>"},{"location":"operations/monitoring/#logging-and-tracing","title":"Logging and Tracing","text":""},{"location":"operations/monitoring/#log-aggregation","title":"Log Aggregation","text":"<pre><code>class LogAggregator {\n  static async aggregateLogs() {\n    return {\n      applicationLogs: await this.collectApplicationLogs(),\n      systemLogs: await this.collectSystemLogs(),\n      accessLogs: await this.collectAccessLogs(),\n      errorLogs: await this.collectErrorLogs()\n    };\n  }\n\n  static async searchLogs(query: LogQuery) {\n    return await elasticsearch.search({\n      index: 'logs-*',\n      body: {\n        query: {\n          bool: {\n            must: [\n              { match: { level: query.level } },\n              { range: { timestamp: { gte: query.startTime, lte: query.endTime } } }\n            ]\n          }\n        }\n      }\n    });\n  }\n}\n</code></pre>"},{"location":"operations/monitoring/#distributed-tracing","title":"Distributed Tracing","text":"<pre><code>class TracingSystem {\n  static initializeTracing() {\n    return {\n      serviceName: 'dokkerr-api',\n      sampler: {\n        type: 'probabilistic',\n        param: 0.1\n      },\n      reporter: {\n        logSpans: true,\n        agentHost: process.env.JAEGER_AGENT_HOST\n      }\n    };\n  }\n\n  static async traceRequest(req: Request) {\n    const span = tracer.startSpan('http_request');\n\n    span.setTag('http.method', req.method);\n    span.setTag('http.url', req.url);\n\n    return span;\n  }\n}\n</code></pre>"},{"location":"operations/monitoring/#visualization-and-dashboards","title":"Visualization and Dashboards","text":""},{"location":"operations/monitoring/#metrics-dashboard","title":"Metrics Dashboard","text":"<pre><code>class DashboardConfig {\n  static readonly DASHBOARD_PANELS = {\n    system: {\n      cpu: {\n        title: 'CPU Usage',\n        type: 'gauge',\n        query: 'avg(cpu_usage)',\n        thresholds: [50, 80]\n      },\n      memory: {\n        title: 'Memory Usage',\n        type: 'graph',\n        query: 'memory_usage',\n        timeRange: '24h'\n      }\n    },\n    application: {\n      requests: {\n        title: 'Request Rate',\n        type: 'graph',\n        query: 'sum(rate(http_requests_total[5m]))',\n        timeRange: '1h'\n      },\n      errors: {\n        title: 'Error Rate',\n        type: 'graph',\n        query: 'sum(rate(http_errors_total[5m]))',\n        timeRange: '1h'\n      }\n    }\n  };\n}\n</code></pre>"},{"location":"operations/monitoring/#incident-response","title":"Incident Response","text":""},{"location":"operations/monitoring/#automated-response","title":"Automated Response","text":"<pre><code>class IncidentResponse {\n  static async handleIncident(incident: Incident) {\n    // 1. Collect diagnostic information\n    const diagnostics = await this.collectDiagnostics(incident);\n\n    // 2. Apply mitigation steps\n    await this.applyMitigation(incident, diagnostics);\n\n    // 3. Notify stakeholders\n    await this.notifyStakeholders(incident);\n\n    // 4. Track resolution\n    await this.trackResolution(incident);\n  }\n\n  static async collectDiagnostics(incident: Incident) {\n    return {\n      metrics: await this.getRelevantMetrics(incident),\n      logs: await this.getRelevantLogs(incident),\n      traces: await this.getRelevantTraces(incident)\n    };\n  }\n}\n</code></pre>"},{"location":"operations/monitoring/#troubleshooting","title":"Troubleshooting","text":"<p>Common monitoring issues and solutions:</p> <ol> <li>High Resource Usage</li> <li>Check system metrics</li> <li>Identify resource-intensive processes</li> <li> <p>Review scaling configuration</p> </li> <li> <p>Performance Degradation</p> </li> <li>Analyze response times</li> <li>Check database performance</li> <li> <p>Review caching effectiveness</p> </li> <li> <p>Alert Storms</p> </li> <li>Review alert thresholds</li> <li>Implement alert grouping</li> <li>Update escalation policies </li> </ol>"},{"location":"operations/performance/","title":"Performance Tuning","text":""},{"location":"operations/performance/#overview","title":"Overview","text":"<p>Dokkerr's performance tuning guidelines ensure optimal system performance, response times, and resource utilization. This document outlines our performance optimization strategies and best practices.</p>"},{"location":"operations/performance/#database-optimization","title":"Database Optimization","text":""},{"location":"operations/performance/#query-optimization","title":"Query Optimization","text":"<pre><code>class QueryOptimizer {\n  static readonly QUERY_GUIDELINES = {\n    // Use specific columns instead of SELECT *\n    selectColumns: {\n      bad: 'SELECT * FROM listings',\n      good: 'SELECT id, title, price FROM listings'\n    },\n\n    // Use appropriate indexes\n    indexUsage: {\n      createIndex: 'CREATE INDEX idx_listings_location ON listings USING GIST (location)',\n      queryWithIndex: 'SELECT * FROM listings WHERE location &amp;&amp; ST_MakeEnvelope($1, $2, $3, $4)'\n    },\n\n    // Optimize JOIN operations\n    joinOptimization: {\n      bad: 'SELECT * FROM listings l LEFT JOIN users u ON l.owner_id = u.id',\n      good: 'SELECT l.id, l.title, u.name FROM listings l INNER JOIN users u ON l.owner_id = u.id'\n    }\n  };\n\n  static async analyzeQueryPerformance(query: string) {\n    return {\n      executionTime: await this.measureExecutionTime(query),\n      planAnalysis: await this.explainAnalyze(query),\n      indexUsage: await this.checkIndexUsage(query)\n    };\n  }\n}\n</code></pre>"},{"location":"operations/performance/#connection-pooling","title":"Connection Pooling","text":"<pre><code>class DatabasePool {\n  static readonly POOL_CONFIG = {\n    min: 2,\n    max: 10,\n    idleTimeoutMillis: 30000,\n    connectionTimeoutMillis: 2000,\n    statement_timeout: 5000\n  };\n\n  static configurePool() {\n    return {\n      ...this.POOL_CONFIG,\n      afterCreate: async (conn: any, done: Function) =&gt; {\n        // Set session parameters\n        await conn.query('SET statement_timeout = $1', [this.POOL_CONFIG.statement_timeout]);\n        done(null, conn);\n      }\n    };\n  }\n}\n</code></pre>"},{"location":"operations/performance/#caching-strategy","title":"Caching Strategy","text":""},{"location":"operations/performance/#multi-level-caching","title":"Multi-Level Caching","text":"<pre><code>class CacheManager {\n  static readonly CACHE_LEVELS = {\n    memory: {\n      provider: 'Node.js Memory Cache',\n      ttl: '1m',\n      maxSize: '100MB'\n    },\n    redis: {\n      provider: 'Redis',\n      ttl: '1h',\n      maxSize: '1GB'\n    },\n    cdn: {\n      provider: 'CloudFront',\n      ttl: '24h',\n      maxSize: 'unlimited'\n    }\n  };\n\n  static async getCachedData(key: string) {\n    // Try memory cache first\n    const memoryResult = await this.getFromMemory(key);\n    if (memoryResult) return memoryResult;\n\n    // Try Redis next\n    const redisResult = await this.getFromRedis(key);\n    if (redisResult) {\n      await this.setInMemory(key, redisResult);\n      return redisResult;\n    }\n\n    // Fallback to database\n    const dbResult = await this.getFromDatabase(key);\n    await this.setInCache(key, dbResult);\n    return dbResult;\n  }\n}\n</code></pre>"},{"location":"operations/performance/#cache-invalidation","title":"Cache Invalidation","text":"<pre><code>class CacheInvalidator {\n  static readonly INVALIDATION_RULES = {\n    listings: {\n      events: ['create', 'update', 'delete'],\n      patterns: ['listing:*', 'search:*']\n    },\n    users: {\n      events: ['update', 'delete'],\n      patterns: ['user:*', 'profile:*']\n    },\n    bookings: {\n      events: ['create', 'update', 'cancel'],\n      patterns: ['booking:*', 'listing:availability:*']\n    }\n  };\n\n  static async invalidateCache(event: CacheEvent) {\n    const patterns = this.INVALIDATION_RULES[event.type].patterns;\n    await Promise.all([\n      this.invalidateMemoryCache(patterns),\n      this.invalidateRedisCache(patterns),\n      this.invalidateCDN(patterns)\n    ]);\n  }\n}\n</code></pre>"},{"location":"operations/performance/#api-optimization","title":"API Optimization","text":""},{"location":"operations/performance/#response-optimization","title":"Response Optimization","text":"<pre><code>class ResponseOptimizer {\n  static readonly OPTIMIZATION_RULES = {\n    pagination: {\n      defaultLimit: 20,\n      maxLimit: 100,\n      useKeyset: true\n    },\n    fields: {\n      selection: true,\n      maxDepth: 3\n    },\n    compression: {\n      enabled: true,\n      threshold: '1kb'\n    }\n  };\n\n  static optimizeResponse(data: any, options: ResponseOptions) {\n    return {\n      // Select requested fields only\n      data: this.selectFields(data, options.fields),\n\n      // Add pagination metadata\n      meta: this.getPaginationMeta(data, options),\n\n      // Compress if needed\n      ...(this.shouldCompress(data) &amp;&amp; {\n        compressed: true,\n        encoding: 'gzip'\n      })\n    };\n  }\n}\n</code></pre>"},{"location":"operations/performance/#rate-limiting","title":"Rate Limiting","text":"<pre><code>class RateLimiter {\n  static readonly RATE_LIMITS = {\n    public: {\n      window: '15m',\n      max: 100\n    },\n    authenticated: {\n      window: '15m',\n      max: 1000\n    },\n    search: {\n      window: '1m',\n      max: 30\n    },\n    booking: {\n      window: '1h',\n      max: 10\n    }\n  };\n\n  static async checkRateLimit(req: Request) {\n    const limit = this.getLimit(req);\n    const key = this.generateKey(req);\n\n    const current = await this.getCurrentUsage(key);\n    if (current &gt;= limit.max) {\n      throw new RateLimitError('Rate limit exceeded');\n    }\n\n    await this.incrementUsage(key);\n  }\n}\n</code></pre>"},{"location":"operations/performance/#frontend-optimization","title":"Frontend Optimization","text":""},{"location":"operations/performance/#bundle-optimization","title":"Bundle Optimization","text":"<pre><code>class BundleOptimizer {\n  static readonly WEBPACK_CONFIG = {\n    optimization: {\n      splitChunks: {\n        chunks: 'all',\n        maxSize: 244000,\n        cacheGroups: {\n          vendor: {\n            test: /[\\\\/]node_modules[\\\\/]/,\n            name: 'vendors',\n            chunks: 'all'\n          }\n        }\n      },\n      runtimeChunk: 'single'\n    },\n    performance: {\n      hints: 'warning',\n      maxEntrypointSize: 512000,\n      maxAssetSize: 512000\n    }\n  };\n\n  static analyzeBundle() {\n    return {\n      size: this.measureBundleSize(),\n      splits: this.analyzeSplitPoints(),\n      coverage: this.analyzeCodeCoverage()\n    };\n  }\n}\n</code></pre>"},{"location":"operations/performance/#image-optimization","title":"Image Optimization","text":"<pre><code>class ImageOptimizer {\n  static readonly IMAGE_RULES = {\n    formats: ['webp', 'avif', 'jpeg'],\n    sizes: {\n      thumbnail: { width: 150, height: 150 },\n      preview: { width: 300, height: 300 },\n      full: { width: 1200, height: 800 }\n    },\n    compression: {\n      jpeg: { quality: 80 },\n      webp: { quality: 75 },\n      avif: { quality: 70 }\n    }\n  };\n\n  static async optimizeImage(file: ImageFile) {\n    const optimized = await Promise.all(\n      this.IMAGE_RULES.formats.map(format =&gt;\n        this.convertAndOptimize(file, format)\n      )\n    );\n\n    return {\n      original: file,\n      variants: optimized,\n      sizes: this.generateSrcSet(optimized)\n    };\n  }\n}\n</code></pre>"},{"location":"operations/performance/#resource-management","title":"Resource Management","text":""},{"location":"operations/performance/#memory-management","title":"Memory Management","text":"<pre><code>class MemoryManager {\n  static readonly MEMORY_LIMITS = {\n    heap: {\n      max: '1.5GB',\n      warning: '1.2GB'\n    },\n    rss: {\n      max: '2GB',\n      warning: '1.7GB'\n    },\n    gc: {\n      threshold: '75%',\n      type: 'adaptive'\n    }\n  };\n\n  static monitorMemory() {\n    const usage = process.memoryUsage();\n\n    if (usage.heapUsed &gt; this.parseSize(this.MEMORY_LIMITS.heap.warning)) {\n      this.triggerGC();\n    }\n\n    return {\n      heap: this.formatMemoryUsage(usage.heapUsed),\n      rss: this.formatMemoryUsage(usage.rss),\n      external: this.formatMemoryUsage(usage.external)\n    };\n  }\n}\n</code></pre>"},{"location":"operations/performance/#cpu-optimization","title":"CPU Optimization","text":"<pre><code>class CPUOptimizer {\n  static readonly CPU_SETTINGS = {\n    workers: {\n      min: 2,\n      max: 8,\n      autoScale: true\n    },\n    tasks: {\n      priority: {\n        high: ['payment', 'booking'],\n        medium: ['search', 'update'],\n        low: ['analytics', 'cleanup']\n      }\n    }\n  };\n\n  static async optimizeWorkload() {\n    const metrics = await this.getCPUMetrics();\n\n    if (metrics.usage &gt; 80) {\n      await this.scaleWorkers(this.CPU_SETTINGS.workers.max);\n    }\n\n    return this.distributeLoad(metrics);\n  }\n}\n</code></pre>"},{"location":"operations/performance/#monitoring-and-profiling","title":"Monitoring and Profiling","text":""},{"location":"operations/performance/#performance-metrics","title":"Performance Metrics","text":"<pre><code>class PerformanceMonitor {\n  static readonly METRICS = {\n    response: {\n      p50: 100,  // ms\n      p95: 300,  // ms\n      p99: 500   // ms\n    },\n    database: {\n      queryTime: 50,    // ms\n      connections: 80,  // %\n      deadlocks: 0     // count\n    },\n    cache: {\n      hitRate: 85,     // %\n      missRate: 15,    // %\n      evictions: 100   // count/hour\n    }\n  };\n\n  static async collectMetrics() {\n    return {\n      api: await this.measureAPIMetrics(),\n      database: await this.measureDBMetrics(),\n      cache: await this.measureCacheMetrics(),\n      system: await this.measureSystemMetrics()\n    };\n  }\n}\n</code></pre>"},{"location":"operations/performance/#performance-alerts","title":"Performance Alerts","text":"<pre><code>class PerformanceAlerts {\n  static readonly ALERT_THRESHOLDS = {\n    responseTime: {\n      warning: 500,   // ms\n      critical: 1000  // ms\n    },\n    errorRate: {\n      warning: 1,    // %\n      critical: 5    // %\n    },\n    cpuUsage: {\n      warning: 70,   // %\n      critical: 90   // %\n    },\n    memoryUsage: {\n      warning: 80,   // %\n      critical: 90   // %\n    }\n  };\n\n  static async checkThresholds() {\n    const metrics = await PerformanceMonitor.collectMetrics();\n\n    return Object.entries(this.ALERT_THRESHOLDS).map(([metric, thresholds]) =&gt; ({\n      metric,\n      value: metrics[metric],\n      status: this.evaluateThreshold(metrics[metric], thresholds)\n    }));\n  }\n}\n</code></pre>"},{"location":"operations/performance/#best-practices","title":"Best Practices","text":"<ol> <li>Database Optimization</li> <li>Use appropriate indexes</li> <li>Optimize query patterns</li> <li>Implement connection pooling</li> <li> <p>Regular maintenance</p> </li> <li> <p>Caching Strategy</p> </li> <li>Implement multi-level caching</li> <li>Use appropriate TTLs</li> <li>Smart invalidation</li> <li> <p>Monitor hit rates</p> </li> <li> <p>API Performance</p> </li> <li>Implement pagination</li> <li>Use compression</li> <li>Rate limiting</li> <li> <p>Response optimization</p> </li> <li> <p>Resource Management</p> </li> <li>Monitor memory usage</li> <li>Optimize CPU utilization</li> <li>Scale resources appropriately</li> <li>Regular cleanup </li> </ol>"},{"location":"operations/scaling/","title":"Scaling and Load Balancing","text":""},{"location":"operations/scaling/#overview","title":"Overview","text":"<p>This document outlines Dokkerr's scaling strategies and load balancing configurations to ensure high availability and optimal performance under varying loads.</p>"},{"location":"operations/scaling/#infrastructure-architecture","title":"Infrastructure Architecture","text":""},{"location":"operations/scaling/#load-balancing-configuration","title":"Load Balancing Configuration","text":"<pre><code>class LoadBalancerConfig {\n  static readonly LB_SETTINGS = {\n    algorithm: 'least_connections',\n    health_check: {\n      path: '/health',\n      interval: '30s',\n      timeout: '5s',\n      healthy_threshold: 2,\n      unhealthy_threshold: 3\n    },\n    ssl: {\n      certificate: 'ACM',\n      policy: 'TLS1.2',\n      forward: true\n    },\n    routing: {\n      rules: [\n        {\n          path: '/api/*',\n          target: 'api-servers',\n          sticky: false\n        },\n        {\n          path: '/websocket',\n          target: 'ws-servers',\n          sticky: true\n        },\n        {\n          path: '/*',\n          target: 'frontend-servers',\n          sticky: false\n        }\n      ]\n    }\n  };\n}\n</code></pre>"},{"location":"operations/scaling/#auto-scaling-groups","title":"Auto Scaling Groups","text":"<pre><code>class AutoScalingConfig {\n  static readonly SCALING_POLICIES = {\n    api_servers: {\n      min: 2,\n      max: 10,\n      desired: 4,\n      metrics: {\n        cpu_utilization: {\n          target: 70,\n          scale_up: '+2',\n          scale_down: '-1'\n        },\n        request_count: {\n          target: 1000,\n          per: 'instance'\n        }\n      },\n      cooldown: {\n        scale_up: '3m',\n        scale_down: '5m'\n      }\n    },\n    worker_nodes: {\n      min: 1,\n      max: 5,\n      desired: 2,\n      metrics: {\n        queue_length: {\n          target: 100,\n          scale_up: '+1',\n          scale_down: '-1'\n        }\n      }\n    }\n  };\n}\n</code></pre>"},{"location":"operations/scaling/#database-scaling","title":"Database Scaling","text":""},{"location":"operations/scaling/#read-replicas","title":"Read Replicas","text":"<pre><code>class DatabaseScaling {\n  static readonly DB_CONFIGURATION = {\n    primary: {\n      instance_class: 'db.r6g.xlarge',\n      storage: {\n        type: 'gp3',\n        size: '100GB',\n        iops: 3000\n      }\n    },\n    replicas: {\n      count: 2,\n      regions: ['us-east-1', 'us-west-2'],\n      promotion_tier: [1, 2],\n      instance_class: 'db.r6g.large'\n    },\n    connection: {\n      read_preference: 'nearest',\n      write_concern: 'majority',\n      max_connections: 1000\n    }\n  };\n\n  static readonly QUERY_ROUTING = {\n    reads: ['SELECT', 'SHOW'],\n    writes: ['INSERT', 'UPDATE', 'DELETE'],\n    routing_strategy: 'weighted_round_robin'\n  };\n}\n</code></pre>"},{"location":"operations/scaling/#sharding-strategy","title":"Sharding Strategy","text":"<pre><code>class ShardingConfig {\n  static readonly SHARD_SETTINGS = {\n    shard_key: {\n      listings: { location: 'geohash', created_at: -1 },\n      bookings: { user_id: 'hash', booking_date: -1 },\n      messages: { conversation_id: 'hash' }\n    },\n    chunk_size: '64MB',\n    zones: [\n      {\n        name: 'us_east',\n        regions: ['us-east-1', 'us-east-2']\n      },\n      {\n        name: 'us_west',\n        regions: ['us-west-1', 'us-west-2']\n      }\n    ]\n  };\n}\n</code></pre>"},{"location":"operations/scaling/#caching-architecture","title":"Caching Architecture","text":""},{"location":"operations/scaling/#distributed-caching","title":"Distributed Caching","text":"<pre><code>class CacheArchitecture {\n  static readonly CACHE_TOPOLOGY = {\n    redis_cluster: {\n      shards: 3,\n      replicas_per_shard: 2,\n      instance_type: 'cache.r6g.large',\n      automatic_failover: true\n    },\n    regions: {\n      primary: 'us-east-1',\n      replicas: ['us-west-2', 'eu-west-1']\n    },\n    data_types: {\n      session: { ttl: '24h', max_size: '10KB' },\n      listing: { ttl: '1h', max_size: '100KB' },\n      search: { ttl: '15m', max_size: '1MB' }\n    }\n  };\n}\n</code></pre>"},{"location":"operations/scaling/#application-scaling","title":"Application Scaling","text":""},{"location":"operations/scaling/#microservices-architecture","title":"Microservices Architecture","text":"<pre><code>class ServiceScaling {\n  static readonly SERVICE_CONFIG = {\n    api_gateway: {\n      rate_limit: 10000,\n      burst: 1000,\n      timeout: '30s'\n    },\n    services: {\n      auth: {\n        instances: 4,\n        cpu: '1 vCPU',\n        memory: '2GB'\n      },\n      listings: {\n        instances: 6,\n        cpu: '2 vCPU',\n        memory: '4GB'\n      },\n      bookings: {\n        instances: 4,\n        cpu: '2 vCPU',\n        memory: '4GB'\n      },\n      notifications: {\n        instances: 2,\n        cpu: '1 vCPU',\n        memory: '2GB'\n      }\n    }\n  };\n}\n</code></pre>"},{"location":"operations/scaling/#container-orchestration","title":"Container Orchestration","text":"<pre><code>class KubernetesConfig {\n  static readonly K8S_SETTINGS = {\n    cluster: {\n      version: '1.25',\n      node_groups: [\n        {\n          name: 'general',\n          instance_type: 't3.large',\n          min_size: 2,\n          max_size: 10\n        },\n        {\n          name: 'cpu-optimized',\n          instance_type: 'c6g.xlarge',\n          min_size: 1,\n          max_size: 5\n        }\n      ]\n    },\n    deployments: {\n      strategy: 'RollingUpdate',\n      max_surge: '25%',\n      max_unavailable: '25%'\n    },\n    hpa: {\n      metrics: ['cpu', 'memory', 'custom.metrics/requests'],\n      behavior: {\n        scale_up: {\n          stabilization: '30s',\n          policies: [{ type: 'Pods', value: 4, period: '60s' }]\n        },\n        scale_down: {\n          stabilization: '300s',\n          policies: [{ type: 'Pods', value: 1, period: '60s' }]\n        }\n      }\n    }\n  };\n}\n</code></pre>"},{"location":"operations/scaling/#monitoring-and-alerts","title":"Monitoring and Alerts","text":""},{"location":"operations/scaling/#scaling-metrics","title":"Scaling Metrics","text":"<pre><code>class ScalingMetrics {\n  static readonly METRICS_CONFIG = {\n    system: {\n      cpu: { threshold: 80, window: '5m' },\n      memory: { threshold: 85, window: '5m' },\n      disk: { threshold: 75, window: '15m' }\n    },\n    application: {\n      response_time: { p95: 500, window: '5m' },\n      error_rate: { threshold: 1, window: '5m' },\n      requests: { rps: 1000, window: '1m' }\n    },\n    database: {\n      connections: { threshold: 80, window: '5m' },\n      replication_lag: { threshold: '10s', window: '5m' },\n      query_performance: { p95: 100, window: '5m' }\n    }\n  };\n}\n</code></pre>"},{"location":"operations/scaling/#best-practices","title":"Best Practices","text":"<ol> <li>Infrastructure</li> <li>Use auto-scaling groups</li> <li>Implement health checks</li> <li>Configure proper thresholds</li> <li> <p>Monitor scaling events</p> </li> <li> <p>Database</p> </li> <li>Implement read replicas</li> <li>Use connection pooling</li> <li>Configure proper sharding</li> <li> <p>Monitor replication lag</p> </li> <li> <p>Caching</p> </li> <li>Distribute cache nodes</li> <li>Implement cache invalidation</li> <li>Monitor hit rates</li> <li> <p>Configure proper TTLs</p> </li> <li> <p>Application</p> </li> <li>Use microservices architecture</li> <li>Implement circuit breakers</li> <li>Configure proper timeouts</li> <li>Monitor service health </li> </ol>"},{"location":"operations/security/","title":"Security","text":""},{"location":"operations/security/#overview","title":"Overview","text":"<p>Dokkerr implements comprehensive security measures to protect user data, prevent unauthorized access, and ensure system integrity. This document outlines our security practices, policies, and implementation details.</p>"},{"location":"operations/security/#authentication","title":"Authentication","text":""},{"location":"operations/security/#jwt-implementation","title":"JWT Implementation","text":"<pre><code>import jwt from 'jsonwebtoken';\nimport { createHash } from 'crypto';\n\nclass AuthenticationService {\n  private static readonly JWT_SECRET = process.env.JWT_SECRET;\n  private static readonly JWT_EXPIRY = '24h';\n\n  static async generateToken(user: User) {\n    const payload = {\n      id: user.id,\n      email: user.email,\n      role: user.role,\n      sessionId: createHash('sha256').update(Date.now().toString()).digest('hex')\n    };\n\n    return jwt.sign(payload, this.JWT_SECRET, {\n      expiresIn: this.JWT_EXPIRY\n    });\n  }\n\n  static async verifyToken(token: string) {\n    try {\n      const decoded = jwt.verify(token, this.JWT_SECRET);\n      return decoded;\n    } catch (error) {\n      throw new AuthenticationError('Invalid or expired token');\n    }\n  }\n}\n</code></pre>"},{"location":"operations/security/#multi-factor-authentication","title":"Multi-Factor Authentication","text":"<pre><code>class MFAService {\n  static async enableMFA(userId: string) {\n    const secret = generateTOTPSecret();\n    const qrCode = await generateQRCode(secret);\n\n    await db.users.update({\n      where: { id: userId },\n      data: {\n        mfaEnabled: true,\n        mfaSecret: encryptSecret(secret)\n      }\n    });\n\n    return { secret, qrCode };\n  }\n\n  static async verifyMFACode(userId: string, code: string) {\n    const user = await db.users.findUnique({\n      where: { id: userId },\n      select: { mfaSecret: true }\n    });\n\n    return verifyTOTP(decryptSecret(user.mfaSecret), code);\n  }\n}\n</code></pre>"},{"location":"operations/security/#authorization","title":"Authorization","text":""},{"location":"operations/security/#role-based-access-control","title":"Role-Based Access Control","text":"<pre><code>enum UserRole {\n  ADMIN = 'admin',\n  DOCK_OWNER = 'dock_owner',\n  BOATER = 'boater',\n  GUEST = 'guest'\n}\n\nconst permissions = {\n  [UserRole.ADMIN]: ['*'],\n  [UserRole.DOCK_OWNER]: [\n    'listings:create',\n    'listings:update',\n    'listings:delete',\n    'bookings:manage'\n  ],\n  [UserRole.BOATER]: [\n    'listings:view',\n    'bookings:create',\n    'bookings:cancel'\n  ],\n  [UserRole.GUEST]: [\n    'listings:view'\n  ]\n};\n</code></pre>"},{"location":"operations/security/#permission-middleware","title":"Permission Middleware","text":"<pre><code>function requirePermission(permission: string) {\n  return async (req, res, next) =&gt; {\n    const userRole = req.user.role;\n    const userPermissions = permissions[userRole];\n\n    if (userPermissions.includes('*') || \n        userPermissions.includes(permission)) {\n      return next();\n    }\n\n    throw new AuthorizationError('Insufficient permissions');\n  };\n}\n</code></pre>"},{"location":"operations/security/#data-protection","title":"Data Protection","text":""},{"location":"operations/security/#encryption","title":"Encryption","text":"<pre><code>import { createCipheriv, createDecipheriv } from 'crypto';\n\nclass Encryption {\n  private static readonly ALGORITHM = 'aes-256-gcm';\n  private static readonly KEY = Buffer.from(process.env.ENCRYPTION_KEY, 'hex');\n\n  static encrypt(data: string) {\n    const iv = crypto.randomBytes(12);\n    const cipher = createCipheriv(this.ALGORITHM, this.KEY, iv);\n\n    const encrypted = Buffer.concat([\n      cipher.update(data, 'utf8'),\n      cipher.final()\n    ]);\n\n    const tag = cipher.getAuthTag();\n\n    return {\n      encrypted: encrypted.toString('hex'),\n      iv: iv.toString('hex'),\n      tag: tag.toString('hex')\n    };\n  }\n\n  static decrypt(data: EncryptedData) {\n    const decipher = createDecipheriv(\n      this.ALGORITHM,\n      this.KEY,\n      Buffer.from(data.iv, 'hex')\n    );\n\n    decipher.setAuthTag(Buffer.from(data.tag, 'hex'));\n\n    return Buffer.concat([\n      decipher.update(Buffer.from(data.encrypted, 'hex')),\n      decipher.final()\n    ]).toString('utf8');\n  }\n}\n</code></pre>"},{"location":"operations/security/#data-masking","title":"Data Masking","text":"<pre><code>class DataMasking {\n  static maskCreditCard(number: string) {\n    return `****-****-****-${number.slice(-4)}`;\n  }\n\n  static maskEmail(email: string) {\n    const [local, domain] = email.split('@');\n    return `${local[0]}***@${domain}`;\n  }\n\n  static maskPhoneNumber(phone: string) {\n    return phone.replace(/(\\d{3})\\d{4}(\\d{4})/, '$1****$2');\n  }\n}\n</code></pre>"},{"location":"operations/security/#network-security","title":"Network Security","text":""},{"location":"operations/security/#api-rate-limiting","title":"API Rate Limiting","text":"<pre><code>import rateLimit from 'express-rate-limit';\n\nconst rateLimiter = rateLimit({\n  windowMs: 15 * 60 * 1000, // 15 minutes\n  max: 100, // limit each IP to 100 requests per windowMs\n  message: 'Too many requests, please try again later',\n  headers: true,\n  handler: (req, res) =&gt; {\n    logRateLimitViolation(req);\n    res.status(429).json({\n      status: 'error',\n      message: 'Rate limit exceeded'\n    });\n  }\n});\n</code></pre>"},{"location":"operations/security/#cors-configuration","title":"CORS Configuration","text":"<pre><code>const corsOptions = {\n  origin: process.env.ALLOWED_ORIGINS.split(','),\n  methods: ['GET', 'POST', 'PUT', 'DELETE'],\n  allowedHeaders: ['Content-Type', 'Authorization'],\n  exposedHeaders: ['X-Total-Count'],\n  credentials: true,\n  maxAge: 86400 // 24 hours\n};\n</code></pre>"},{"location":"operations/security/#audit-logging","title":"Audit Logging","text":""},{"location":"operations/security/#security-events","title":"Security Events","text":"<pre><code>class SecurityAudit {\n  static async logSecurityEvent(event: SecurityEvent) {\n    await db.securityLogs.create({\n      data: {\n        type: event.type,\n        userId: event.userId,\n        ipAddress: event.ipAddress,\n        userAgent: event.userAgent,\n        details: event.details,\n        timestamp: new Date()\n      }\n    });\n  }\n\n  static async getSecurityEvents(filters: SecurityEventFilters) {\n    return await db.securityLogs.findMany({\n      where: filters,\n      orderBy: { timestamp: 'desc' }\n    });\n  }\n}\n</code></pre>"},{"location":"operations/security/#access-logs","title":"Access Logs","text":"<pre><code>const accessLogMiddleware = (req, res, next) =&gt; {\n  const startTime = Date.now();\n\n  res.on('finish', () =&gt; {\n    const duration = Date.now() - startTime;\n\n    db.accessLogs.create({\n      data: {\n        method: req.method,\n        path: req.path,\n        statusCode: res.statusCode,\n        duration,\n        ipAddress: req.ip,\n        userAgent: req.get('user-agent'),\n        userId: req.user?.id\n      }\n    });\n  });\n\n  next();\n};\n</code></pre>"},{"location":"operations/security/#vulnerability-management","title":"Vulnerability Management","text":""},{"location":"operations/security/#security-scanning","title":"Security Scanning","text":"<pre><code>class SecurityScanner {\n  static async runSecurityScan() {\n    return {\n      dependencies: await this.scanDependencies(),\n      codeAnalysis: await this.runStaticAnalysis(),\n      networkScan: await this.scanNetwork(),\n      configAudit: await this.auditConfigurations()\n    };\n  }\n\n  static async scanDependencies() {\n    // Run npm audit\n    const { stdout } = await exec('npm audit --json');\n    return JSON.parse(stdout);\n  }\n}\n</code></pre>"},{"location":"operations/security/#automated-updates","title":"Automated Updates","text":"<pre><code>class DependencyUpdater {\n  static async updateDependencies() {\n    // Check for updates\n    const updates = await this.checkForUpdates();\n\n    // Run tests\n    await this.runSecurityTests();\n\n    // Apply updates\n    await this.applyUpdates(updates);\n\n    return updates;\n  }\n}\n</code></pre>"},{"location":"operations/security/#incident-response","title":"Incident Response","text":""},{"location":"operations/security/#response-procedures","title":"Response Procedures","text":"<pre><code>class IncidentResponse {\n  static async handleSecurityIncident(incident: SecurityIncident) {\n    // 1. Contain the incident\n    await this.containIncident(incident);\n\n    // 2. Investigate\n    const investigation = await this.investigateIncident(incident);\n\n    // 3. Remediate\n    await this.remediateIncident(investigation);\n\n    // 4. Report\n    await this.reportIncident(incident, investigation);\n  }\n}\n</code></pre>"},{"location":"operations/security/#alert-system","title":"Alert System","text":"<pre><code>const securityAlerts = {\n  unauthorizedAccess: {\n    severity: 'critical',\n    notification: ['email', 'sms', 'slack'],\n    escalation: true\n  },\n  suspiciousActivity: {\n    severity: 'warning',\n    notification: ['email', 'slack'],\n    escalation: false\n  }\n};\n</code></pre>"},{"location":"operations/security/#compliance","title":"Compliance","text":""},{"location":"operations/security/#gdpr-compliance","title":"GDPR Compliance","text":"<pre><code>class GDPRCompliance {\n  static async handleDataRequest(userId: string, requestType: 'export' | 'delete') {\n    if (requestType === 'export') {\n      return await this.exportUserData(userId);\n    } else {\n      return await this.deleteUserData(userId);\n    }\n  }\n\n  static async exportUserData(userId: string) {\n    const userData = await this.collectUserData(userId);\n    return this.formatDataExport(userData);\n  }\n}\n</code></pre>"},{"location":"operations/security/#pci-compliance","title":"PCI Compliance","text":"<pre><code>class PCICompliance {\n  static validateCardData(card: PaymentCard) {\n    // Never store full card numbers\n    if (card.number.length &gt; 4) {\n      throw new Error('Cannot store full card numbers');\n    }\n\n    // Validate security standards\n    return this.validatePCIRequirements(card);\n  }\n}\n</code></pre>"},{"location":"operations/security/#troubleshooting","title":"Troubleshooting","text":"<p>Common security issues and solutions:</p> <ol> <li>Authentication Issues</li> <li>Check token expiration</li> <li>Verify MFA setup</li> <li> <p>Monitor failed attempts</p> </li> <li> <p>Authorization Problems</p> </li> <li>Review role assignments</li> <li>Check permission mappings</li> <li> <p>Audit access logs</p> </li> <li> <p>Security Alerts</p> </li> <li>Investigate root cause</li> <li>Apply security patches</li> <li>Update security rules </li> </ol>"},{"location":"security/authentication/","title":"authentication","text":"<p>This page is under construction.</p>"},{"location":"security/compliance/","title":"compliance","text":"<p>This page is under construction.</p>"},{"location":"security/data-protection/","title":"data protection","text":"<p>This page is under construction.</p>"},{"location":"security/guidelines/","title":"Security Guidelines","text":""},{"location":"security/guidelines/#overview","title":"Overview","text":"<p>This document outlines Dokkerr's security guidelines, best practices, and requirements to ensure the safety and protection of our platform, users, and data.</p>"},{"location":"security/guidelines/#authentication-and-authorization","title":"Authentication and Authorization","text":""},{"location":"security/guidelines/#user-authentication","title":"User Authentication","text":"<pre><code>class AuthenticationConfig {\n  static readonly AUTH_REQUIREMENTS = {\n    password: {\n      min_length: 12,\n      complexity: {\n        uppercase: true,\n        lowercase: true,\n        numbers: true,\n        special_chars: true\n      },\n      expiry: '90 days',\n      history: 'last 5 passwords'\n    },\n    mfa: {\n      required: true,\n      methods: [\n        'Authenticator app',\n        'SMS',\n        'Email',\n        'Security key'\n      ],\n      grace_period: '7 days'\n    },\n    session: {\n      duration: '24 hours',\n      extend_on_activity: true,\n      max_concurrent: 5,\n      ip_binding: true\n    }\n  };\n}\n</code></pre>"},{"location":"security/guidelines/#authorization-controls","title":"Authorization Controls","text":"<pre><code>class AuthorizationConfig {\n  static readonly ACCESS_CONTROLS = {\n    roles: {\n      admin: {\n        permissions: 'full_access',\n        requires: 'background_check'\n      },\n      dock_owner: {\n        permissions: [\n          'manage_listings',\n          'view_bookings',\n          'message_users'\n        ],\n        requires: 'verified_identity'\n      },\n      boater: {\n        permissions: [\n          'search_listings',\n          'make_bookings',\n          'message_owners'\n        ],\n        requires: 'verified_email'\n      }\n    },\n    resource_access: {\n      listings: {\n        read: 'public',\n        create: 'dock_owner',\n        update: 'owner_only',\n        delete: 'owner_only'\n      },\n      bookings: {\n        read: 'involved_parties',\n        create: 'authenticated',\n        update: 'involved_parties',\n        cancel: 'involved_parties'\n      }\n    }\n  };\n}\n</code></pre>"},{"location":"security/guidelines/#data-protection","title":"Data Protection","text":""},{"location":"security/guidelines/#data-classification","title":"Data Classification","text":"<pre><code>class DataClassification {\n  static readonly DATA_LEVELS = {\n    public: {\n      examples: [\n        'Listing descriptions',\n        'Public reviews',\n        'Location data'\n      ],\n      handling: 'No restrictions'\n    },\n    internal: {\n      examples: [\n        'User profiles',\n        'Booking history',\n        'Messages'\n      ],\n      handling: 'Authenticated access only'\n    },\n    sensitive: {\n      examples: [\n        'Payment details',\n        'Identity documents',\n        'Insurance info'\n      ],\n      handling: 'Encrypted, limited access'\n    },\n    restricted: {\n      examples: [\n        'Security credentials',\n        'Audit logs',\n        'Financial records'\n      ],\n      handling: 'Strictly controlled access'\n    }\n  };\n}\n</code></pre>"},{"location":"security/guidelines/#encryption-standards","title":"Encryption Standards","text":"<pre><code>class EncryptionConfig {\n  static readonly ENCRYPTION_REQUIREMENTS = {\n    at_rest: {\n      algorithm: 'AES-256-GCM',\n      key_management: 'AWS KMS',\n      rotation: 'yearly'\n    },\n    in_transit: {\n      protocol: 'TLS 1.3',\n      minimum_strength: '256-bit',\n      perfect_forward_secrecy: true\n    },\n    key_management: {\n      storage: 'Hardware Security Module',\n      access_control: 'Role-based',\n      backup: 'Geographically distributed'\n    }\n  };\n}\n</code></pre>"},{"location":"security/guidelines/#network-security","title":"Network Security","text":""},{"location":"security/guidelines/#infrastructure-protection","title":"Infrastructure Protection","text":"<pre><code>class NetworkSecurity {\n  static readonly SECURITY_CONTROLS = {\n    firewall: {\n      default_policy: 'deny-all',\n      allowed_ports: [\n        { port: 443, service: 'HTTPS' },\n        { port: 80, service: 'HTTP -&gt; HTTPS redirect' }\n      ],\n      geo_blocking: {\n        enabled: true,\n        whitelist: ['US', 'CA', 'EU']\n      }\n    },\n    ddos_protection: {\n      provider: 'Cloudflare',\n      threshold: {\n        requests: '10000/minute',\n        bandwidth: '1Gbps'\n      },\n      mitigation: {\n        automatic: true,\n        notification: true\n      }\n    },\n    waf: {\n      rules: [\n        'OWASP Top 10',\n        'Custom rules',\n        'Rate limiting'\n      ],\n      monitoring: {\n        alerts: true,\n        logging: true\n      }\n    }\n  };\n}\n</code></pre>"},{"location":"security/guidelines/#api-security","title":"API Security","text":"<pre><code>class APISecurityConfig {\n  static readonly API_PROTECTION = {\n    authentication: {\n      method: 'JWT',\n      expiry: '1 hour',\n      refresh: true\n    },\n    rate_limiting: {\n      public: '100/hour',\n      authenticated: '1000/hour',\n      grace: '10%'\n    },\n    input_validation: {\n      sanitization: true,\n      max_payload: '10MB',\n      allowed_content: ['application/json']\n    },\n    monitoring: {\n      logging: {\n        requests: true,\n        responses: false,\n        errors: true\n      },\n      alerts: {\n        threshold: '5% error rate',\n        response_time: '&gt; 2 seconds'\n      }\n    }\n  };\n}\n</code></pre>"},{"location":"security/guidelines/#incident-response","title":"Incident Response","text":""},{"location":"security/guidelines/#security-incidents","title":"Security Incidents","text":"<pre><code>class IncidentResponse {\n  static readonly INCIDENT_PROCEDURES = {\n    detection: {\n      monitoring: [\n        'SIEM alerts',\n        'Anomaly detection',\n        'User reports'\n      ],\n      classification: {\n        critical: 'Data breach, System compromise',\n        high: 'Unauthorized access, Data leak',\n        medium: 'Policy violation, Suspicious activity',\n        low: 'Minor security events'\n      }\n    },\n    response: {\n      immediate_actions: [\n        'Isolate affected systems',\n        'Preserve evidence',\n        'Notify security team'\n      ],\n      communication: {\n        internal: ['Security team', 'Management', 'Legal'],\n        external: ['Affected users', 'Authorities', 'Public']\n      }\n    }\n  };\n}\n</code></pre>"},{"location":"security/guidelines/#compliance-and-auditing","title":"Compliance and Auditing","text":""},{"location":"security/guidelines/#compliance-requirements","title":"Compliance Requirements","text":"<pre><code>class ComplianceConfig {\n  static readonly COMPLIANCE_FRAMEWORK = {\n    standards: {\n      pci_dss: {\n        scope: 'Payment processing',\n        requirements: ['Encryption', 'Access control', 'Monitoring']\n      },\n      gdpr: {\n        scope: 'User data protection',\n        requirements: ['Consent', 'Data rights', 'Breach notification']\n      },\n      sox: {\n        scope: 'Financial controls',\n        requirements: ['Audit trails', 'Access controls', 'Change management']\n      }\n    },\n    auditing: {\n      frequency: 'quarterly',\n      scope: [\n        'Security controls',\n        'Access logs',\n        'Configuration changes'\n      ],\n      reporting: {\n        internal: 'monthly',\n        external: 'annually'\n      }\n    }\n  };\n}\n</code></pre>"},{"location":"security/guidelines/#security-training","title":"Security Training","text":""},{"location":"security/guidelines/#employee-training","title":"Employee Training","text":"<pre><code>class SecurityTraining {\n  static readonly TRAINING_REQUIREMENTS = {\n    new_employees: {\n      timing: 'Within 30 days',\n      topics: [\n        'Security policies',\n        'Password management',\n        'Incident reporting',\n        'Data handling'\n      ],\n      verification: 'Quiz and acknowledgment'\n    },\n    ongoing: {\n      frequency: 'quarterly',\n      topics: [\n        'Security updates',\n        'Threat awareness',\n        'Best practices',\n        'Case studies'\n      ],\n      tracking: {\n        completion: true,\n        performance: true\n      }\n    },\n    specialized: {\n      developers: [\n        'Secure coding',\n        'OWASP Top 10',\n        'Code review'\n      ],\n      operations: [\n        'System hardening',\n        'Monitoring',\n        'Incident response'\n      ]\n    }\n  };\n}\n</code></pre>"},{"location":"security/guidelines/#best-practices","title":"Best Practices","text":"<ol> <li>Access Control</li> <li>Use principle of least privilege</li> <li>Regular access reviews</li> <li>Strong password policies</li> <li> <p>Multi-factor authentication</p> </li> <li> <p>Data Security</p> </li> <li>Encrypt sensitive data</li> <li>Secure backup procedures</li> <li>Data retention policies</li> <li> <p>Secure disposal methods</p> </li> <li> <p>Network Security</p> </li> <li>Regular security scans</li> <li>Patch management</li> <li>Network segmentation</li> <li> <p>Intrusion detection</p> </li> <li> <p>Application Security</p> </li> <li>Secure development practices</li> <li>Regular security testing</li> <li>Vulnerability management</li> <li>Code review procedures </li> </ol>"},{"location":"security/overview/","title":"overview","text":"<p>This page is under construction.</p>"},{"location":"technical/","title":"Dokkerr System Architecture","text":"<p>This document provides a comprehensive overview of the Dokkerr system architecture, explaining the design decisions, component interactions, and technology choices that shape our platform.</p>"},{"location":"technical/#architectural-overview","title":"Architectural Overview","text":"<p>Dokkerr follows a microservices architecture with a clear separation of concerns. This approach enables our team to develop, deploy, and scale individual components independently.</p> <pre><code>graph TB\n    subgraph \"Client Layer\"\n        A[Mobile App]\n        B[Web App]\n        C[Admin Dashboard]\n    end\n\n    subgraph \"API Gateway Layer\"\n        D[API Gateway]\n        D1[Authentication]\n        D2[Rate Limiting]\n        D3[Load Balancing]\n        D4[Request Routing]\n    end\n\n    subgraph \"Service Layer\"\n        E[User Service]\n        F[Listing Service]\n        G[Booking Service]\n        H[Payment Service]\n        I[Messaging Service]\n        J[Review Service]\n        K[Search Service]\n        L[Notification Service]\n    end\n\n    subgraph \"Data Layer\"\n        M[(PostgreSQL)]\n        N[(Redis)]\n        O[File Storage]\n    end\n\n    A --&gt; D\n    B --&gt; D\n    C --&gt; D\n\n    D --&gt; D1\n    D --&gt; D2\n    D --&gt; D3\n    D --&gt; D4\n\n    D --&gt; E\n    D --&gt; F\n    D --&gt; G\n    D --&gt; H\n    D --&gt; I\n    D --&gt; J\n    D --&gt; K\n    D --&gt; L\n\n    E --&gt; M\n    F --&gt; M\n    G --&gt; M\n    H --&gt; M\n    I --&gt; M\n    J --&gt; M\n\n    E --&gt; N\n    F --&gt; N\n    G --&gt; N\n    K --&gt; N\n\n    F --&gt; O</code></pre>"},{"location":"technical/#key-architecture-principles","title":"Key Architecture Principles","text":"<p>Dokkerr's architecture is guided by the following principles:</p> <ol> <li>Separation of Concerns: Each service has a distinct responsibility and domain.</li> <li>Scalability: Services can be scaled independently based on load requirements.</li> <li>Resiliency: The system is designed to handle failures gracefully.</li> <li>Security: Multiple layers of security controls protect user data and system integrity.</li> <li>Maintainability: Code is organized to facilitate maintenance and extension.</li> <li>Performance: The architecture optimizes for response time and resource efficiency.</li> </ol>"},{"location":"technical/#system-component-details","title":"System Component Details","text":""},{"location":"technical/#client-layer","title":"Client Layer","text":"<p>The client layer consists of applications that users interact with directly:</p> <ul> <li>Mobile Application: Native iOS and Android applications built with React Native</li> <li>Web Application: React-based web application providing the same functionality as the mobile app</li> <li>Admin Dashboard: Internal tool for system administrators and support staff</li> </ul>"},{"location":"technical/#api-gateway-layer","title":"API Gateway Layer","text":"<p>The API Gateway serves as the entry point for all client requests:</p> <ul> <li>Authentication: Validates user identity and issues JWT tokens</li> <li>Rate Limiting: Protects services from excessive requests</li> <li>Load Balancing: Distributes traffic across service instances</li> <li>Request Routing: Directs requests to appropriate services</li> </ul>"},{"location":"technical/#service-layer","title":"Service Layer","text":"<p>The service layer contains the core business logic of the application:</p> <ul> <li>User Service: Manages user accounts, profiles, and authentication</li> <li>Listing Service: Handles dock listings, availability, and search</li> <li>Booking Service: Processes booking requests and manages reservations</li> <li>Payment Service: Handles payment processing and financial transactions</li> <li>Messaging Service: Manages conversations between users</li> <li>Review Service: Handles ratings and reviews for listings and users</li> <li>Search Service: Provides optimized search functionality with geospatial capabilities</li> <li>Notification Service: Manages email, SMS, and push notifications</li> </ul>"},{"location":"technical/#data-layer","title":"Data Layer","text":"<p>The data layer stores and manages application data:</p> <ul> <li>PostgreSQL: Primary relational database for structured data</li> <li>Redis: In-memory data store for caching and real-time functionality</li> <li>File Storage: S3-compatible storage for images and documents</li> </ul>"},{"location":"technical/#communication-patterns","title":"Communication Patterns","text":"<p>Services communicate using a combination of synchronous and asynchronous patterns:</p>"},{"location":"technical/#synchronous-communication","title":"Synchronous Communication","text":"<ul> <li>REST APIs: Standard HTTP-based communication between services</li> <li>GraphQL: Used for complex data queries from client applications</li> </ul>"},{"location":"technical/#asynchronous-communication","title":"Asynchronous Communication","text":"<ul> <li>Event Bus: For propagating events between services</li> <li>Message Queues: For handling background processing tasks</li> <li>WebSockets: For real-time communication with clients</li> </ul> <pre><code>sequenceDiagram\n    participant Client\n    participant API Gateway\n    participant Service A\n    participant Service B\n    participant EventBus\n\n    Client-&gt;&gt;API Gateway: Request\n    API Gateway-&gt;&gt;Service A: Forward Request\n    Service A-&gt;&gt;Service A: Process Request\n    Service A-&gt;&gt;EventBus: Publish Event\n    Service A-&gt;&gt;API Gateway: Response\n    API Gateway-&gt;&gt;Client: Response\n    EventBus-&gt;&gt;Service B: Consume Event\n    Service B-&gt;&gt;Service B: Process Event</code></pre>"},{"location":"technical/#scalability-strategy","title":"Scalability Strategy","text":"<p>Dokkerr's architecture is designed to scale horizontally to handle increased load:</p> <ul> <li>Stateless Services: All services are designed to be stateless, allowing for easy horizontal scaling</li> <li>Database Sharding: For distributing database load across multiple instances</li> <li>Caching Strategy: Multi-level caching to reduce database load</li> <li>Auto-scaling: Services automatically scale based on predefined metrics</li> </ul>"},{"location":"technical/#scaling-dimensions","title":"Scaling Dimensions","text":"<ul> <li>Geographic Scaling: Deployment across multiple regions for lower latency</li> <li>Load Scaling: Increasing capacity to handle more concurrent users</li> <li>Storage Scaling: Expanding storage capacity for growing data needs</li> </ul>"},{"location":"technical/#security-architecture","title":"Security Architecture","text":"<p>Security is implemented at multiple levels:</p> <ul> <li>Authentication: JWT-based authentication with secure token management</li> <li>Authorization: Role-based access control for all resources</li> <li>API Security: Input validation, rate limiting, and request signing</li> <li>Data Protection: Encryption at rest and in transit</li> <li>Infrastructure Security: Network isolation, firewalls, and intrusion detection</li> </ul>"},{"location":"technical/#deployment-architecture","title":"Deployment Architecture","text":"<p>Dokkerr is deployed using containerization and orchestration:</p> <pre><code>graph TD\n    subgraph \"CI/CD Pipeline\"\n        A[Source Code]\n        B[Build]\n        C[Test]\n        D[Package]\n        E[Deploy]\n    end\n\n    subgraph \"Kubernetes Cluster\"\n        F[Ingress Controller]\n        G[Service Mesh]\n        H[Microservices Pods]\n        I[Database Operators]\n    end\n\n    subgraph \"Monitoring\"\n        J[Metrics Collection]\n        K[Logging]\n        L[Alerting]\n        M[Dashboards]\n    end\n\n    A --&gt; B\n    B --&gt; C\n    C --&gt; D\n    D --&gt; E\n    E --&gt; F\n    F --&gt; G\n    G --&gt; H\n    H --&gt; I\n    H --&gt; J\n    H --&gt; K\n    J --&gt; L\n    J --&gt; M\n    K --&gt; L\n    K --&gt; M</code></pre>"},{"location":"technical/#deployment-process","title":"Deployment Process","text":"<ol> <li>CI/CD Pipeline: Automated testing and deployment pipeline</li> <li>Container Orchestration: Kubernetes for managing container deployment</li> <li>Infrastructure as Code: All infrastructure defined and versioned as code</li> <li>Multiple Environments: Development, staging, and production environments</li> </ol>"},{"location":"technical/#technology-stack","title":"Technology Stack","text":""},{"location":"technical/#frontend-technologies","title":"Frontend Technologies","text":"<ul> <li>React / React Native</li> <li>TypeScript</li> <li>Redux</li> <li>Material UI / React Native Elements</li> </ul>"},{"location":"technical/#backend-technologies","title":"Backend Technologies","text":"<ul> <li>Node.js</li> <li>Express</li> <li>TypeScript</li> <li>PostgreSQL</li> <li>Redis</li> <li>Socket.IO</li> </ul>"},{"location":"technical/#infrastructure-technologies","title":"Infrastructure Technologies","text":"<ul> <li>Docker</li> <li>Kubernetes</li> <li>AWS/GCP/Azure</li> <li>Terraform</li> <li>CI/CD: GitHub Actions</li> </ul>"},{"location":"technical/#monitoring-and-observability","title":"Monitoring and Observability","text":"<p>The system includes comprehensive monitoring:</p> <ul> <li>Application Metrics: Response times, error rates, throughput</li> <li>Infrastructure Metrics: CPU, memory, disk usage</li> <li>Business Metrics: Bookings, listings, revenue</li> <li>Logging: Centralized logging with structured log formats</li> <li>Tracing: Distributed tracing for request flows</li> <li>Alerting: Automated alerts for critical issues</li> </ul>"},{"location":"technical/#disaster-recovery","title":"Disaster Recovery","text":"<p>The disaster recovery strategy includes:</p> <ul> <li>Regular Backups: Automated database backups</li> <li>Multi-region Deployment: For high availability</li> <li>Failover Mechanisms: Automatic recovery from failures</li> <li>Recovery Testing: Regular testing of recovery procedures</li> </ul>"},{"location":"technical/#evolution-future-architecture","title":"Evolution &amp; Future Architecture","text":"<p>The architecture is designed to evolve over time:</p> <ul> <li>Service Extraction: Breaking down larger services as needed</li> <li>New Capabilities: Adding new services for emerging requirements</li> <li>Performance Optimization: Continuous improvement based on metrics</li> <li>Technology Upgrades: Adopting new technologies as appropriate</li> </ul>"},{"location":"technical/#architecture-decision-records","title":"Architecture Decision Records","text":"<p>Key architectural decisions are documented in Architecture Decision Records (ADRs):</p> <ul> <li>ADR-001: Service Decomposition Strategy</li> <li>ADR-002: Authentication Mechanism</li> <li>ADR-003: Database Technology Selection</li> <li>ADR-004: API Design Philosophy</li> </ul>"},{"location":"technical/#resources","title":"Resources","text":"<ul> <li>System Design</li> <li>Design Patterns</li> <li>Scalability</li> <li>API Documentation</li> <li>Database Schema </li> </ul>"},{"location":"technical/api-endpoints/","title":"API Endpoints","text":"<p>This document details the REST API endpoints and WebSocket events in the Dokkerr application.</p>"},{"location":"technical/api-endpoints/#api-architecture","title":"API Architecture","text":"<pre><code>graph TB\n    subgraph Client Layer\n        A[Mobile App]\n        B[Web App]\n        C[Admin Dashboard]\n    end\n\n    subgraph API Gateway\n        D[Load Balancer]\n        E[Rate Limiter]\n        F[Request Router]\n    end\n\n    subgraph API Services\n        G[Auth Service]\n        H[Booking Service]\n        I[Payment Service]\n        J[Dock Service]\n        K[User Service]\n        L[Messages Service]\n        M[Reviews Service]\n    end\n\n    subgraph Data Layer\n        N[(PostgreSQL)]\n        O[(Redis)]\n    end\n\n    A --&gt; D\n    B --&gt; D\n    C --&gt; D\n\n    D --&gt; E\n    E --&gt; F\n\n    F --&gt; G\n    F --&gt; H\n    F --&gt; I\n    F --&gt; J\n    F --&gt; K\n    F --&gt; L\n    F --&gt; M\n\n    G --&gt; N\n    H --&gt; N\n    I --&gt; N\n    J --&gt; N\n    K --&gt; N\n    L --&gt; N\n    M --&gt; N\n\n    G --&gt; O\n    H --&gt; O\n    I --&gt; O\n    J --&gt; O</code></pre>"},{"location":"technical/api-endpoints/#authentication-endpoints","title":"Authentication Endpoints","text":"<pre><code>sequenceDiagram\n    participant Client\n    participant API\n    participant Auth\n    participant DB\n\n    Client-&gt;&gt;API: POST /auth/register\n    API-&gt;&gt;Auth: Validate Input\n    Auth-&gt;&gt;DB: Create User\n    DB--&gt;&gt;Auth: User Created\n    Auth--&gt;&gt;API: Registration Success\n    API--&gt;&gt;Client: User Created\n\n    Client-&gt;&gt;API: POST /auth/login\n    API-&gt;&gt;Auth: Validate Credentials\n    Auth-&gt;&gt;DB: Check User\n    DB--&gt;&gt;Auth: Valid User\n    Auth-&gt;&gt;Auth: Generate Token\n    Auth--&gt;&gt;API: Login Success\n    API--&gt;&gt;Client: JWT Token</code></pre>"},{"location":"technical/api-endpoints/#rest-api-endpoints","title":"REST API Endpoints","text":""},{"location":"technical/api-endpoints/#1-authentication","title":"1. Authentication","text":"<ul> <li> <p>User Registration <pre><code>POST /api/v1/auth/register\nContent-Type: application/json\n\n{\n  \"email\": \"string\",\n  \"password\": \"string\",\n  \"name\": \"string\",\n  \"phone\": \"string\"\n}\n</code></pre></p> </li> <li> <p>User Login <pre><code>POST /api/v1/auth/login\nContent-Type: application/json\n\n{\n  \"email\": \"string\",\n  \"password\": \"string\"\n}\n</code></pre></p> </li> <li> <p>Token Refresh <pre><code>POST /api/v1/auth/refresh\nAuthorization: Bearer {token}\n</code></pre></p> </li> </ul>"},{"location":"technical/api-endpoints/#2-dock-management","title":"2. Dock Management","text":"<ul> <li> <p>List Docks <pre><code>GET /api/v1/docks\nQuery Parameters:\n  - location: string\n  - startDate: date\n  - endDate: date\n  - amenities: string[]\n  - priceRange: number[]\n</code></pre></p> </li> <li> <p>Get Dock Details <pre><code>GET /api/v1/docks/{dockId}\n</code></pre></p> </li> <li> <p>Create Dock <pre><code>POST /api/v1/docks\nAuthorization: Bearer {token}\nContent-Type: application/json\n\n{\n  \"name\": \"string\",\n  \"location\": \"string\",\n  \"description\": \"string\",\n  \"amenities\": \"string[]\",\n  \"pricing\": \"object\"\n}\n</code></pre></p> </li> </ul>"},{"location":"technical/api-endpoints/#3-booking-management","title":"3. Booking Management","text":"<ul> <li> <p>Create Booking <pre><code>POST /api/v1/bookings\nAuthorization: Bearer {token}\nContent-Type: application/json\n\n{\n  \"dockId\": \"string\",\n  \"startDate\": \"date\",\n  \"endDate\": \"date\",\n  \"guests\": \"number\"\n}\n</code></pre></p> </li> <li> <p>Get Booking Details <pre><code>GET /api/v1/bookings/{bookingId}\nAuthorization: Bearer {token}\n</code></pre></p> </li> <li> <p>Cancel Booking <pre><code>POST /api/v1/bookings/{bookingId}/cancel\nAuthorization: Bearer {token}\n</code></pre></p> </li> </ul>"},{"location":"technical/api-endpoints/#4-payment-processing","title":"4. Payment Processing","text":"<ul> <li> <p>Initiate Payment <pre><code>POST /api/v1/payments\nAuthorization: Bearer {token}\nContent-Type: application/json\n\n{\n  \"bookingId\": \"string\",\n  \"amount\": \"number\",\n  \"currency\": \"string\"\n}\n</code></pre></p> </li> <li> <p>Confirm Payment <pre><code>POST /api/v1/payments/{paymentId}/confirm\nAuthorization: Bearer {token}\n</code></pre></p> </li> <li> <p>Process Refund <pre><code>POST /api/v1/payments/{paymentId}/refund\nAuthorization: Bearer {token}\nContent-Type: application/json\n\n{\n  \"amount\": \"number\",\n  \"reason\": \"string\"\n}\n</code></pre></p> </li> </ul>"},{"location":"technical/api-endpoints/#websocket-events","title":"WebSocket Events","text":""},{"location":"technical/api-endpoints/#1-real-time-updates","title":"1. Real-time Updates","text":"<ul> <li> <p>Booking Events <pre><code>// Subscribe to booking updates\nsocket.on('booking:update', (data) =&gt; {\n  // Handle booking update\n});\n\n// Subscribe to booking status changes\nsocket.on('booking:status', (data) =&gt; {\n  // Handle status change\n});\n</code></pre></p> </li> <li> <p>Payment Events <pre><code>// Subscribe to payment updates\nsocket.on('payment:update', (data) =&gt; {\n  // Handle payment update\n});\n\n// Subscribe to payment status changes\nsocket.on('payment:status', (data) =&gt; {\n  // Handle status change\n});\n</code></pre></p> </li> </ul>"},{"location":"technical/api-endpoints/#2-chat-system","title":"2. Chat System","text":"<ul> <li>Message Events <pre><code>// Send message\nsocket.emit('chat:message', {\n  roomId: 'string',\n  message: 'string',\n  timestamp: 'date'\n});\n\n// Receive message\nsocket.on('chat:message', (data) =&gt; {\n  // Handle incoming message\n});\n</code></pre></li> </ul>"},{"location":"technical/api-endpoints/#api-security","title":"API Security","text":""},{"location":"technical/api-endpoints/#1-authentication_1","title":"1. Authentication","text":"<ul> <li>JWT Implementation</li> <li>Token-based authentication</li> <li>Refresh token mechanism</li> <li>Token revocation</li> <li> <p>Token rotation</p> </li> <li> <p>Rate Limiting</p> </li> <li>Request limits</li> <li>IP-based limiting</li> <li>User-based limiting</li> <li>Endpoint-specific limits</li> </ul>"},{"location":"technical/api-endpoints/#2-authorization","title":"2. Authorization","text":"<ul> <li>Role-Based Access</li> <li>User roles</li> <li>Resource permissions</li> <li>API access control</li> <li> <p>Method restrictions</p> </li> <li> <p>Resource Protection</p> </li> <li>Data isolation</li> <li>Access control lists</li> <li>Resource ownership</li> <li>Permission inheritance</li> </ul>"},{"location":"technical/api-endpoints/#api-documentation","title":"API Documentation","text":""},{"location":"technical/api-endpoints/#1-openapi-specification","title":"1. OpenAPI Specification","text":"<ul> <li>API Versioning</li> <li>Version headers</li> <li>URL versioning</li> <li>Deprecation notices</li> <li> <p>Migration guides</p> </li> <li> <p>Schema Definitions</p> </li> <li>Request schemas</li> <li>Response schemas</li> <li>Error schemas</li> <li>Validation rules</li> </ul>"},{"location":"technical/api-endpoints/#2-developer-resources","title":"2. Developer Resources","text":"<ul> <li>API Reference</li> <li>Endpoint documentation</li> <li>Authentication guide</li> <li>Rate limiting info</li> <li> <p>Error handling</p> </li> <li> <p>Integration Guide</p> </li> <li>Getting started</li> <li>Best practices</li> <li>Code examples</li> <li>SDK documentation</li> </ul>"},{"location":"technical/api-endpoints/#monitoring-and-analytics","title":"Monitoring and Analytics","text":""},{"location":"technical/api-endpoints/#1-api-metrics","title":"1. API Metrics","text":"<ul> <li>Performance Metrics</li> <li>Response times</li> <li>Error rates</li> <li>Throughput</li> <li> <p>Cache hit rates</p> </li> <li> <p>Usage Analytics</p> </li> <li>Endpoint usage</li> <li>User patterns</li> <li>Geographic distribution</li> <li>Peak times</li> </ul>"},{"location":"technical/api-endpoints/#2-health-monitoring","title":"2. Health Monitoring","text":"<ul> <li>System Health</li> <li>Service status</li> <li>Resource usage</li> <li>Error tracking</li> <li> <p>Performance alerts</p> </li> <li> <p>Security Monitoring</p> </li> <li>Authentication attempts</li> <li>Authorization failures</li> <li>Rate limit breaches</li> <li>Security incidents </li> </ul>"},{"location":"technical/api-endpoints/#api-documentation_1","title":"API Documentation","text":"<p>This document provides detailed information about the REST API endpoints available in the Dokkerr application.</p>"},{"location":"technical/api-endpoints/#api-architecture_1","title":"API Architecture","text":"<pre><code>graph TB\n    subgraph Client Layer\n        A[Mobile App]\n        B[Web App]\n        C[Admin Dashboard]\n    end\n\n    subgraph API Gateway\n        D[Load Balancer]\n        E[Rate Limiter]\n        F[Request Router]\n    end\n\n    subgraph API Services\n        G[Auth Service]\n        H[Booking Service]\n        I[Payment Service]\n        J[Dock Service]\n        K[User Service]\n        L[Messages Service]\n        M[Reviews Service]\n    end\n\n    subgraph Data Layer\n        N[(PostgreSQL)]\n        O[(Redis)]\n    end\n\n    A --&gt; D\n    B --&gt; D\n    C --&gt; D\n\n    D --&gt; E\n    E --&gt; F\n\n    F --&gt; G\n    F --&gt; H\n    F --&gt; I\n    F --&gt; J\n    F --&gt; K\n    F --&gt; L\n    F --&gt; M\n\n    G --&gt; N\n    H --&gt; N\n    I --&gt; N\n    J --&gt; N\n    K --&gt; N\n    L --&gt; N\n    M --&gt; N\n\n    G --&gt; O\n    H --&gt; O\n    I --&gt; O\n    J --&gt; O</code></pre>"},{"location":"technical/api-endpoints/#authentication-flow","title":"Authentication Flow","text":"<pre><code>sequenceDiagram\n    participant Client\n    participant API\n    participant Auth\n    participant DB\n\n    Client-&gt;&gt;API: POST /api/auth/register\n    API-&gt;&gt;Auth: Validate Input\n    Auth-&gt;&gt;DB: Create User\n    DB--&gt;&gt;Auth: User Created\n    Auth--&gt;&gt;API: Registration Success\n    API--&gt;&gt;Client: User Created &amp; JWT Token\n\n    Client-&gt;&gt;API: POST /api/auth/login\n    API-&gt;&gt;Auth: Validate Credentials\n    Auth-&gt;&gt;DB: Check User\n    DB--&gt;&gt;Auth: Valid User\n    Auth-&gt;&gt;Auth: Generate Token\n    Auth--&gt;&gt;API: Login Success\n    API--&gt;&gt;Client: JWT Token</code></pre>"},{"location":"technical/api-endpoints/#rest-api-endpoints_1","title":"REST API Endpoints","text":""},{"location":"technical/api-endpoints/#authentication","title":"Authentication","text":"POST <code>/api/auth/register</code> <p>Register a new user.</p>  **Request Body** <pre><code>{\n  \"email\": \"user@example.com\",\n  \"password\": \"password123\",\n  \"name\": \"John Doe\",\n  \"userType\": \"boater\" or \"dock_owner\",\n  \"phoneNumber\": \"+1234567890\" (optional)\n}\n</code></pre>  **Response** <pre><code>{\n  \"token\": \"jwt_token\",\n  \"user\": {\n    \"id\": \"user_id\",\n    \"email\": \"user@example.com\",\n    \"name\": \"John Doe\",\n    \"userType\": \"boater\",\n    \"phoneNumber\": \"+1234567890\"\n  }\n}\n</code></pre> POST <code>/api/auth/login</code> <p>Login a user.</p>  **Request Body** <pre><code>{\n  \"email\": \"user@example.com\",\n  \"password\": \"password123\"\n}\n</code></pre>  **Response** <pre><code>{\n  \"token\": \"jwt_token\",\n  \"user\": {\n    \"id\": \"user_id\",\n    \"email\": \"user@example.com\",\n    \"name\": \"John Doe\",\n    \"userType\": \"boater\",\n    \"phoneNumber\": \"+1234567890\"\n  }\n}\n</code></pre> POST <code>/api/auth/forgot-password</code> <p>Send a password reset email.</p>  **Request Body** <pre><code>{\n  \"email\": \"user@example.com\"\n}\n</code></pre>  **Response** <pre><code>{\n  \"message\": \"Password reset email sent\"\n}\n</code></pre> POST <code>/api/auth/reset-password</code> <p>Reset password using token from email.</p>  **Request Body** <pre><code>{\n  \"token\": \"reset_token\",\n  \"password\": \"new_password\"\n}\n</code></pre>  **Response** <pre><code>{\n  \"message\": \"Password reset successful\"\n}\n</code></pre> GET <code>/api/auth/me</code> <p>Get current user profile.</p>  **Headers** <pre><code>Authorization: Bearer {token}\n</code></pre>  **Response** <pre><code>{\n  \"id\": \"user_id\",\n  \"email\": \"user@example.com\",\n  \"name\": \"John Doe\",\n  \"userType\": \"boater\",\n  \"phoneNumber\": \"+1234567890\",\n  \"role\": \"user\"\n}\n</code></pre>"},{"location":"technical/api-endpoints/#listings","title":"Listings","text":"GET <code>/api/listings</code> <p>Get all listings with optional filtering.</p>  **Query Parameters** | Parameter | Type | Description | |-----------|------|-------------| | latitude | number | Latitude for location-based search | | longitude | number | Longitude for location-based search | | radius | number | Search radius in kilometers | | startDate | date | Start date for availability | | endDate | date | End date for availability | | maxLength | number | Maximum boat length | | maxBeam | number | Maximum boat beam | | maxDraft | number | Maximum boat draft | | minPrice | number | Minimum price | | maxPrice | number | Maximum price | | amenities | array | Array of amenities to filter by | | limit | number | Maximum number of results to return (1-100) | | offset | number | Number of results to skip |  **Response** <pre><code>[\n  {\n    \"id\": \"listing_id\",\n    \"title\": \"Luxury Dock Slip\",\n    \"description\": \"Beautiful dock with views\",\n    \"location\": {\n      \"latitude\": 25.7617,\n      \"longitude\": -80.1918,\n      \"address\": \"123 Marina Way\"\n    },\n    \"pricing\": {\n      \"basePrice\": 100,\n      \"currency\": \"USD\",\n      \"unit\": \"day\"\n    },\n    \"amenities\": [\"power\", \"water\", \"wifi\"],\n    \"images\": [\"image1.jpg\", \"image2.jpg\"],\n    \"availability\": {\n      \"start\": \"2023-07-01T00:00:00.000Z\",\n      \"end\": \"2023-08-31T00:00:00.000Z\"\n    },\n    \"specifications\": {\n      \"maxLength\": 50,\n      \"maxBeam\": 15,\n      \"maxDraft\": 6,\n      \"power\": true,\n      \"water\": true,\n      \"fuel\": false\n    },\n    \"owner\": {\n      \"id\": \"owner_id\",\n      \"name\": \"Marina Owner\",\n      \"rating\": 4.5\n    }\n  }\n]\n</code></pre> GET <code>/api/listings/:id</code> <p>Get a specific listing by ID.</p>  **Response** <pre><code>{\n  \"id\": \"listing_id\",\n  \"title\": \"Luxury Dock Slip\",\n  \"description\": \"Beautiful dock with views\",\n  \"location\": {\n    \"latitude\": 25.7617,\n    \"longitude\": -80.1918,\n    \"address\": \"123 Marina Way\"\n  },\n  \"pricing\": {\n    \"basePrice\": 100,\n    \"currency\": \"USD\",\n    \"unit\": \"day\"\n  },\n  \"amenities\": [\"power\", \"water\", \"wifi\"],\n  \"images\": [\"image1.jpg\", \"image2.jpg\"],\n  \"availability\": {\n    \"start\": \"2023-07-01T00:00:00.000Z\",\n    \"end\": \"2023-08-31T00:00:00.000Z\"\n  },\n  \"specifications\": {\n    \"maxLength\": 50,\n    \"maxBeam\": 15,\n    \"maxDraft\": 6,\n    \"power\": true,\n    \"water\": true,\n    \"fuel\": false\n  },\n  \"owner\": {\n    \"id\": \"owner_id\",\n    \"name\": \"Marina Owner\",\n    \"rating\": 4.5\n  },\n  \"reviews\": [\n    {\n      \"id\": \"review_id\",\n      \"rating\": 5,\n      \"comment\": \"Great place to dock!\",\n      \"reviewer\": {\n        \"id\": \"reviewer_id\",\n        \"name\": \"John\"\n      },\n      \"createdAt\": \"2023-06-15T12:00:00.000Z\"\n    }\n  ]\n}\n</code></pre> POST <code>/api/listings</code> <p>Create a new listing (dock owner only).</p>  **Headers** <pre><code>Authorization: Bearer {token}\n</code></pre>  **Request Body** <pre><code>{\n  \"title\": \"Luxury Dock Slip\",\n  \"description\": \"Beautiful dock with views\",\n  \"address\": \"123 Marina Way\",\n  \"latitude\": 25.7617, \n  \"longitude\": -80.1918,\n  \"basePrice\": 100,\n  \"currency\": \"USD\",\n  \"pricingUnit\": \"day\",\n  \"amenities\": [\"power\", \"water\", \"wifi\"],\n  \"maxLength\": 50,\n  \"maxBeam\": 15,\n  \"maxDraft\": 6,\n  \"hasPower\": true,\n  \"hasWater\": true,\n  \"hasFuel\": false,\n  \"availableFrom\": \"2023-07-01T00:00:00.000Z\",\n  \"availableTo\": \"2023-08-31T00:00:00.000Z\"\n}\n</code></pre>  **Response** <pre><code>{\n  \"id\": \"new_listing_id\",\n  \"title\": \"Luxury Dock Slip\",\n  \"description\": \"Beautiful dock with views\",\n  \"location\": {\n    \"latitude\": 25.7617,\n    \"longitude\": -80.1918,\n    \"address\": \"123 Marina Way\"\n  },\n  \"pricing\": {\n    \"basePrice\": 100,\n    \"currency\": \"USD\",\n    \"unit\": \"day\"\n  },\n  \"amenities\": [\"power\", \"water\", \"wifi\"],\n  \"images\": [],\n  \"availability\": {\n    \"start\": \"2023-07-01T00:00:00.000Z\",\n    \"end\": \"2023-08-31T00:00:00.000Z\"\n  },\n  \"specifications\": {\n    \"maxLength\": 50,\n    \"maxBeam\": 15,\n    \"maxDraft\": 6,\n    \"power\": true,\n    \"water\": true,\n    \"fuel\": false\n  },\n  \"createdAt\": \"2023-06-01T10:00:00.000Z\",\n  \"updatedAt\": \"2023-06-01T10:00:00.000Z\"\n}\n</code></pre>"},{"location":"technical/api-endpoints/#bookings","title":"Bookings","text":"POST <code>/api/bookings/create</code> <p>Create a new booking.</p>  **Headers** <pre><code>Authorization: Bearer {token}\n</code></pre>  **Request Body** <pre><code>{\n  \"listingId\": \"listing_id\",\n  \"startDate\": \"2023-07-10T10:00:00.000Z\",\n  \"endDate\": \"2023-07-15T10:00:00.000Z\"\n}\n</code></pre>  **Response** <pre><code>{\n  \"id\": \"booking_id\",\n  \"listingId\": \"listing_id\",\n  \"boaterId\": \"boater_id\",\n  \"ownerId\": \"owner_id\",\n  \"startDate\": \"2023-07-10T10:00:00.000Z\",\n  \"endDate\": \"2023-07-15T10:00:00.000Z\",\n  \"status\": \"pending\",\n  \"totalPrice\": 500,\n  \"currency\": \"USD\",\n  \"paymentStatus\": \"pending\",\n  \"createdAt\": \"2023-06-01T10:00:00.000Z\",\n  \"updatedAt\": \"2023-06-01T10:00:00.000Z\"\n}\n</code></pre> GET <code>/api/bookings</code> <p>Get all bookings for the current user.</p>  **Headers** <pre><code>Authorization: Bearer {token}\n</code></pre>  **Response** <pre><code>[\n  {\n    \"id\": \"booking_id\",\n    \"listing\": {\n      \"id\": \"listing_id\",\n      \"title\": \"Luxury Dock Slip\",\n      \"location\": {\n        \"address\": \"123 Marina Way\"\n      },\n      \"images\": [\"image1.jpg\"]\n    },\n    \"startDate\": \"2023-07-10T10:00:00.000Z\",\n    \"endDate\": \"2023-07-15T10:00:00.000Z\",\n    \"status\": \"confirmed\",\n    \"totalPrice\": 500,\n    \"currency\": \"USD\",\n    \"paymentStatus\": \"paid\",\n    \"owner\": {\n      \"id\": \"owner_id\",\n      \"name\": \"Marina Owner\"\n    },\n    \"createdAt\": \"2023-06-01T10:00:00.000Z\"\n  }\n]\n</code></pre> PUT <code>/api/bookings/:id/status</code> <p>Update a booking status.</p>  **Headers** <pre><code>Authorization: Bearer {token}\n</code></pre>  **Request Body** <pre><code>{\n  \"status\": \"cancelled\"\n}\n</code></pre>  **Response** <pre><code>{\n  \"id\": \"booking_id\",\n  \"status\": \"cancelled\",\n  \"updatedAt\": \"2023-06-02T10:00:00.000Z\"\n}\n</code></pre>"},{"location":"technical/api-endpoints/#messages","title":"Messages","text":"GET <code>/api/conversations</code> <p>Get all conversations for the current user.</p>  **Headers** <pre><code>Authorization: Bearer {token}\n</code></pre>  **Response** <pre><code>[\n  {\n    \"id\": \"conversation_id\",\n    \"otherUser\": {\n      \"id\": \"other_user_id\",\n      \"name\": \"Other User\",\n      \"profileImage\": \"profile.jpg\"\n    },\n    \"lastMessage\": {\n      \"content\": \"Hello there!\",\n      \"createdAt\": \"2023-06-15T12:00:00.000Z\"\n    },\n    \"unreadCount\": 2\n  }\n]\n</code></pre> GET <code>/api/conversations/:id/messages</code> <p>Get messages for a specific conversation.</p>  **Headers** <pre><code>Authorization: Bearer {token}\n</code></pre>  **Response** <pre><code>[\n  {\n    \"id\": \"message_id\",\n    \"senderId\": \"sender_id\",\n    \"content\": \"Hello there!\",\n    \"readAt\": null,\n    \"createdAt\": \"2023-06-15T12:00:00.000Z\"\n  },\n  {\n    \"id\": \"message_id_2\",\n    \"senderId\": \"other_user_id\",\n    \"content\": \"Hi! How are you?\",\n    \"readAt\": \"2023-06-15T12:05:00.000Z\",\n    \"createdAt\": \"2023-06-15T12:03:00.000Z\"\n  }\n]\n</code></pre> POST <code>/api/conversations/:id/messages</code> <p>Send a message in a conversation.</p>  **Headers** <pre><code>Authorization: Bearer {token}\n</code></pre>  **Request Body** <pre><code>{\n  \"content\": \"Hello there!\"\n}\n</code></pre>  **Response** <pre><code>{\n  \"id\": \"message_id\",\n  \"senderId\": \"sender_id\",\n  \"content\": \"Hello there!\",\n  \"readAt\": null,\n  \"createdAt\": \"2023-06-15T12:00:00.000Z\"\n}\n</code></pre>"},{"location":"technical/api-endpoints/#websocket-api","title":"WebSocket API","text":"<p>The Dokkerr application uses WebSockets for real-time communication:</p> <pre><code>// Connect to WebSocket\nconst socket = io('wss://api.dokkerr.com');\n\n// Authentication\nsocket.emit('authenticate', { token: 'jwt_token' });\n\n// Listen for connection status\nsocket.on('connect', () =&gt; {\n  console.log('Connected to WebSocket');\n});\n\n// Listen for messages\nsocket.on('message', (data) =&gt; {\n  console.log('New message:', data);\n});\n\n// Send a message\nsocket.emit('send_message', {\n  conversationId: 'conversation_id',\n  content: 'Hello there!'\n});\n\n// Listen for booking updates\nsocket.on('booking:update', (data) =&gt; {\n  console.log('Booking updated:', data);\n});\n</code></pre>"},{"location":"technical/api-endpoints/#error-handling","title":"Error Handling","text":"<p>All API endpoints follow a consistent error response format:</p> <pre><code>{\n  \"status\": \"error\",\n  \"message\": \"Error message\",\n  \"errors\": {\n    \"field1\": \"Error for field1\",\n    \"field2\": \"Error for field2\"\n  }\n}\n</code></pre> <p>Common HTTP status codes:</p> Status Code Description 400 Bad Request - The request was malformed or contained invalid parameters 401 Unauthorized - Missing or invalid authentication token 403 Forbidden - The user does not have permission to access the resource 404 Not Found - The requested resource was not found 429 Too Many Requests - Rate limit exceeded 500 Internal Server Error - Something went wrong on the server"},{"location":"technical/api-reference/","title":"Dokkerr API Reference","text":""},{"location":"technical/api-reference/#introduction","title":"Introduction","text":"<p>The Dokkerr API provides programmatic access to the Dokkerr platform. This document outlines all available endpoints, request formats, and response structures.</p>"},{"location":"technical/api-reference/#authentication","title":"Authentication","text":"<p>Most API endpoints require authentication. Include a valid JWT token in the Authorization header:</p> <pre><code>Authorization: Bearer your_jwt_token\n</code></pre>"},{"location":"technical/api-reference/#id-formats","title":"ID Formats","text":"<p>All resource endpoints accept both full UUIDs and shortened IDs:</p> <ul> <li>Full UUID format: <code>123e4567-e89b-12d3-a456-426614174000</code> (36 characters)</li> <li>Short ID format: <code>123e4567</code> (8 characters)</li> </ul> <p>Example: <pre><code>GET /api/users/123e4567      // Using short ID\nGET /api/users/123e4567-e89b-12d3-a456-426614174000  // Using UUID\n</code></pre></p> <p>Both requests will return the same resource if the identifiers match.</p>"},{"location":"technical/api-reference/#response-format","title":"Response Format","text":"<p>All API responses follow a consistent format:</p> <pre><code>{\n  \"status\": \"success\",\n  \"data\": {\n    // Resource data\n  }\n}\n</code></pre> <p>Or in case of an error:</p> <pre><code>{\n  \"status\": \"error\",\n  \"message\": \"Error description\"\n}\n</code></pre>"},{"location":"technical/api-reference/#user-endpoints","title":"User Endpoints","text":""},{"location":"technical/api-reference/#get-user","title":"Get User","text":"<p>Retrieve user information.</p> <p>Request: <pre><code>GET /api/users/:id\n</code></pre></p> <p>URL Parameters: - <code>id</code>: User ID (UUID or short ID)</p> <p>Response: <pre><code>{\n  \"status\": \"success\",\n  \"data\": {\n    \"id\": \"123e4567-e89b-12d3-a456-426614174000\",\n    \"shortId\": \"123e4567\",\n    \"name\": \"John Doe\",\n    \"email\": \"john@example.com\",\n    \"userType\": \"boater\",\n    \"role\": \"user\",\n    \"createdAt\": \"2023-01-15T12:00:00Z\"\n  }\n}\n</code></pre></p>"},{"location":"technical/api-reference/#listing-endpoints","title":"Listing Endpoints","text":""},{"location":"technical/api-reference/#get-listing","title":"Get Listing","text":"<p>Retrieve listing information.</p> <p>Request: <pre><code>GET /api/listings/:id\n</code></pre></p> <p>URL Parameters: - <code>id</code>: Listing ID (UUID or short ID)</p> <p>Response: <pre><code>{\n  \"status\": \"success\",\n  \"data\": {\n    \"id\": \"234f6789-f90a-34e5-b678-537725285000\",\n    \"shortId\": \"234f6789\",\n    \"title\": \"Premium Dock Slip in Miami\",\n    \"description\": \"Spacious dock slip with amenities\",\n    \"location\": \"Miami, FL\",\n    \"pricePerDay\": 75.00,\n    \"ownerId\": \"345g7890-g01b-45f6-c789-648836396001\",\n    \"ownerName\": \"Jane Smith\",\n    \"imageUrl\": \"https://example.com/images/dock1.jpg\",\n    \"length\": 40,\n    \"width\": 15,\n    \"amenities\": {\n      \"power\": true,\n      \"water\": true,\n      \"wifi\": true\n    },\n    \"createdAt\": \"2023-02-20T14:30:00Z\"\n  }\n}\n</code></pre></p>"},{"location":"technical/api-reference/#booking-endpoints","title":"Booking Endpoints","text":""},{"location":"technical/api-reference/#get-booking","title":"Get Booking","text":"<p>Retrieve booking information.</p> <p>Request: <pre><code>GET /api/bookings/:id\n</code></pre></p> <p>URL Parameters: - <code>id</code>: Booking ID (UUID or short ID)</p> <p>Response: <pre><code>{\n  \"status\": \"success\",\n  \"data\": {\n    \"id\": \"456h8901-h12c-56g7-d890-759947407002\",\n    \"shortId\": \"456h8901\",\n    \"listingId\": \"234f6789-f90a-34e5-b678-537725285000\",\n    \"listingTitle\": \"Premium Dock Slip in Miami\",\n    \"boaterId\": \"123e4567-e89b-12d3-a456-426614174000\",\n    \"boaterName\": \"John Doe\",\n    \"startDate\": \"2023-07-01T00:00:00Z\",\n    \"endDate\": \"2023-07-07T00:00:00Z\",\n    \"totalPrice\": 525.00,\n    \"status\": \"confirmed\",\n    \"createdAt\": \"2023-06-15T10:45:00Z\"\n  }\n}\n</code></pre></p>"},{"location":"technical/api-reference/#error-codes","title":"Error Codes","text":"Status Code Description 400 Bad Request - The request was malformed 401 Unauthorized - Authentication required 403 Forbidden - You don't have permission 404 Not Found - Resource doesn't exist 500 Server Error - Something went wrong on our end"},{"location":"technical/api-reference/#rate-limiting","title":"Rate Limiting","text":"<p>API requests are limited to 100 requests per IP address per hour. Exceeding this limit will result in a 429 (Too Many Requests) response.</p>"},{"location":"technical/api-reference/#versioning","title":"Versioning","text":"<p>The current API version is v1. Include the version in the URL path:</p> <pre><code>/api/v1/users/123e4567\n</code></pre>"},{"location":"technical/api-reference/#websocket-events","title":"WebSocket Events","text":"<p>Real-time communication is handled through WebSocket connections. Connect to the WebSocket server at:</p> <pre><code>ws://localhost:5174/ws\n</code></pre>"},{"location":"technical/api-reference/#available-events","title":"Available Events","text":"Event Description Payload <code>message.new</code> New message received <code>{ messageId, senderId, content, timestamp }</code> <code>booking.status</code> Booking status update <code>{ bookingId, status, timestamp }</code> <code>payment.status</code> Payment status update <code>{ paymentId, status, amount }</code> <code>notification</code> System notification <code>{ type, message, timestamp }</code>"},{"location":"technical/api-reference/#example-websocket-usage","title":"Example WebSocket Usage","text":"<pre><code>const socket = new WebSocket('ws://localhost:5174/ws');\n\nsocket.onmessage = (event) =&gt; {\n  const data = JSON.parse(event.data);\n  console.log('Received:', data);\n};\n\n// Send a message\nsocket.send(JSON.stringify({\n  type: 'message',\n  content: 'Hello',\n  recipientId: '123e4567'\n}));\n</code></pre>"},{"location":"technical/api-reference/#payment-endpoints","title":"Payment Endpoints","text":""},{"location":"technical/api-reference/#create-payment-intent","title":"Create Payment Intent","text":"<p>Create a new payment intent for a booking.</p> <p>Request: <pre><code>POST /api/payments/intent\n</code></pre></p> <p>Body: <pre><code>{\n  \"bookingId\": \"456h8901\",\n  \"amount\": 525.00,\n  \"currency\": \"usd\"\n}\n</code></pre></p> <p>Response: <pre><code>{\n  \"status\": \"success\",\n  \"data\": {\n    \"clientSecret\": \"pi_..._secret_...\",\n    \"amount\": 525.00,\n    \"currency\": \"usd\"\n  }\n}\n</code></pre></p>"},{"location":"technical/api-reference/#confirm-payment","title":"Confirm Payment","text":"<p>Confirm a completed payment.</p> <p>Request: <pre><code>POST /api/payments/confirm\n</code></pre></p> <p>Body: <pre><code>{\n  \"paymentIntentId\": \"pi_...\",\n  \"bookingId\": \"456h8901\"\n}\n</code></pre></p>"},{"location":"technical/api-reference/#notification-endpoints","title":"Notification Endpoints","text":""},{"location":"technical/api-reference/#get-notifications","title":"Get Notifications","text":"<p>Retrieve user notifications.</p> <p>Request: <pre><code>GET /api/notifications\n</code></pre></p> <p>Response: <pre><code>{\n  \"status\": \"success\",\n  \"data\": {\n    \"notifications\": [\n      {\n        \"id\": \"567i9012\",\n        \"type\": \"booking_confirmed\",\n        \"message\": \"Your booking has been confirmed\",\n        \"read\": false,\n        \"createdAt\": \"2024-03-05T14:30:00Z\"\n      }\n    ]\n  }\n}\n</code></pre></p>"},{"location":"technical/api-reference/#mark-notification-as-read","title":"Mark Notification as Read","text":"<p>Mark a notification as read.</p> <p>Request: <pre><code>PUT /api/notifications/:id/read\n</code></pre></p>"},{"location":"technical/api-reference/#review-endpoints","title":"Review Endpoints","text":""},{"location":"technical/api-reference/#create-review","title":"Create Review","text":"<p>Create a new review for a listing or user.</p> <p>Request: <pre><code>POST /api/reviews\n</code></pre></p> <p>Body: <pre><code>{\n  \"targetId\": \"234f6789\",\n  \"targetType\": \"listing\",\n  \"rating\": 5,\n  \"comment\": \"Great experience!\"\n}\n</code></pre></p>"},{"location":"technical/api-reference/#get-reviews","title":"Get Reviews","text":"<p>Get reviews for a listing or user.</p> <p>Request: <pre><code>GET /api/reviews?targetId=234f6789&amp;targetType=listing\n</code></pre></p> <p>Response: <pre><code>{\n  \"status\": \"success\",\n  \"data\": {\n    \"reviews\": [\n      {\n        \"id\": \"678j0123\",\n        \"rating\": 5,\n        \"comment\": \"Great experience!\",\n        \"authorId\": \"123e4567\",\n        \"authorName\": \"John Doe\",\n        \"createdAt\": \"2024-03-05T15:00:00Z\"\n      }\n    ],\n    \"averageRating\": 4.8,\n    \"totalReviews\": 25\n  }\n}\n</code></pre></p>"},{"location":"technical/api-reference/#search-endpoints","title":"Search Endpoints","text":""},{"location":"technical/api-reference/#location-based-search","title":"Location-Based Search","text":"<p>Search for listings near a location.</p> <p>Request: <pre><code>GET /api/listings/search?lat=25.7617&amp;lng=-80.1918&amp;radius=10\n</code></pre></p> <p>Parameters: - <code>lat</code>: Latitude - <code>lng</code>: Longitude - <code>radius</code>: Search radius in miles (optional, default: 10) - <code>amenities</code>: Comma-separated list of required amenities (optional) - <code>dates</code>: Date range for availability (optional)</p> <p>Response: <pre><code>{\n  \"status\": \"success\",\n  \"data\": {\n    \"listings\": [\n      {\n        \"id\": \"234f6789\",\n        \"title\": \"Premium Dock Slip in Miami\",\n        \"location\": \"Miami, FL\",\n        \"distance\": 2.5,\n        \"pricePerDay\": 75.00,\n        \"rating\": 4.8\n      }\n    ],\n    \"total\": 15\n  }\n}\n</code></pre></p>"},{"location":"technical/data-flow/","title":"Data Flow","text":"<p>This document describes the data flow patterns and processes within the Dokkerr application.</p>"},{"location":"technical/data-flow/#system-data-flow","title":"System Data Flow","text":"<pre><code>graph TB\n    subgraph Client Layer\n        A[User Interface]\n        B[Local Storage]\n        C[Offline Cache]\n    end\n\n    subgraph Network Layer\n        D[API Gateway]\n        E[Load Balancer]\n        F[CDN]\n    end\n\n    subgraph Application Layer\n        G[Request Handler]\n        H[Business Logic]\n        I[Data Validator]\n    end\n\n    subgraph Data Layer\n        J[(Primary DB)]\n        K[(Cache)]\n        L[(File Storage)]\n    end\n\n    A --&gt; D\n    B --&gt; A\n    C --&gt; A\n\n    D --&gt; E\n    E --&gt; F\n\n    F --&gt; G\n    G --&gt; H\n    H --&gt; I\n\n    I --&gt; J\n    I --&gt; K\n    I --&gt; L</code></pre>"},{"location":"technical/data-flow/#booking-flow-data","title":"Booking Flow Data","text":"<pre><code>sequenceDiagram\n    participant User\n    participant App\n    participant API\n    participant Cache\n    participant DB\n\n    User-&gt;&gt;App: Search Available Docks\n    App-&gt;&gt;API: GET /api/docks\n    API-&gt;&gt;Cache: Check Cache\n    Cache--&gt;&gt;API: Cache Miss\n    API-&gt;&gt;DB: Query Available Docks\n    DB--&gt;&gt;API: Dock List\n    API-&gt;&gt;Cache: Update Cache\n    API--&gt;&gt;App: Dock Results\n\n    User-&gt;&gt;App: Select Dock &amp; Dates\n    App-&gt;&gt;API: POST /api/bookings\n    API-&gt;&gt;DB: Validate Availability\n    DB--&gt;&gt;API: Available\n    API-&gt;&gt;DB: Create Booking\n    DB--&gt;&gt;API: Booking Created\n    API--&gt;&gt;App: Booking Confirmation</code></pre>"},{"location":"technical/data-flow/#real-time-data-flow","title":"Real-time Data Flow","text":"<pre><code>flowchart LR\n    subgraph WebSocket Server\n        A[Connection Manager]\n        B[Event Handler]\n        C[State Manager]\n    end\n\n    subgraph Client Apps\n        D[Mobile App]\n        E[Web App]\n        F[Admin Dashboard]\n    end\n\n    subgraph Data Sources\n        G[Booking Updates]\n        H[Payment Status]\n        I[Chat Messages]\n    end\n\n    A --&gt; D\n    A --&gt; E\n    A --&gt; F\n\n    B --&gt; C\n    C --&gt; A\n\n    G --&gt; B\n    H --&gt; B\n    I --&gt; B</code></pre>"},{"location":"technical/data-flow/#data-processing-pipeline","title":"Data Processing Pipeline","text":""},{"location":"technical/data-flow/#1-data-ingestion","title":"1. Data Ingestion","text":"<ul> <li>Input Sources</li> <li>User interactions</li> <li>API requests</li> <li>WebSocket events</li> <li>Background jobs</li> <li> <p>External integrations</p> </li> <li> <p>Validation Layer</p> </li> <li>Schema validation</li> <li>Business rule validation</li> <li>Security validation</li> <li>Rate limiting</li> </ul>"},{"location":"technical/data-flow/#2-processing-layer","title":"2. Processing Layer","text":"<ul> <li>Business Logic</li> <li>Booking processing</li> <li>Payment handling</li> <li>Notification generation</li> <li> <p>Analytics computation</p> </li> <li> <p>Data Transformation</p> </li> <li>Format conversion</li> <li>Data enrichment</li> <li>Aggregation</li> <li>Normalization</li> </ul>"},{"location":"technical/data-flow/#3-storage-layer","title":"3. Storage Layer","text":"<ul> <li>Primary Storage</li> <li>Relational data (PostgreSQL)</li> <li>Document data (MongoDB)</li> <li> <p>File storage (AWS S3)</p> </li> <li> <p>Caching Strategy</p> </li> <li>In-memory cache (Redis)</li> <li>CDN caching</li> <li>Browser caching</li> <li>Application cache</li> </ul>"},{"location":"technical/data-flow/#data-consistency","title":"Data Consistency","text":""},{"location":"technical/data-flow/#1-transaction-management","title":"1. Transaction Management","text":"<ul> <li>ACID compliance</li> <li>Distributed transactions</li> <li>Rollback mechanisms</li> <li>Deadlock prevention</li> </ul>"},{"location":"technical/data-flow/#2-data-replication","title":"2. Data Replication","text":"<ul> <li>Primary-replica setup</li> <li>Read replicas</li> <li>Write sharding</li> <li>Data synchronization</li> </ul>"},{"location":"technical/data-flow/#3-conflict-resolution","title":"3. Conflict Resolution","text":"<ul> <li>Optimistic locking</li> <li>Version control</li> <li>Merge strategies</li> <li>Conflict detection</li> </ul>"},{"location":"technical/data-flow/#performance-optimization","title":"Performance Optimization","text":""},{"location":"technical/data-flow/#1-query-optimization","title":"1. Query Optimization","text":"<ul> <li>Index management</li> <li>Query caching</li> <li>Connection pooling</li> <li>Query rewriting</li> </ul>"},{"location":"technical/data-flow/#2-data-access-patterns","title":"2. Data Access Patterns","text":"<ul> <li>Batch processing</li> <li>Bulk operations</li> <li>Lazy loading</li> <li>Pagination</li> </ul>"},{"location":"technical/data-flow/#3-resource-management","title":"3. Resource Management","text":"<ul> <li>Memory optimization</li> <li>CPU utilization</li> <li>Network efficiency</li> <li>Storage optimization</li> </ul>"},{"location":"technical/data-flow/#monitoring-and-analytics","title":"Monitoring and Analytics","text":""},{"location":"technical/data-flow/#1-data-flow-metrics","title":"1. Data Flow Metrics","text":"<ul> <li>Request latency</li> <li>Throughput</li> <li>Error rates</li> <li>Cache hit rates</li> </ul>"},{"location":"technical/data-flow/#2-system-health","title":"2. System Health","text":"<ul> <li>Resource utilization</li> <li>Connection status</li> <li>Queue lengths</li> <li>Processing times</li> </ul>"},{"location":"technical/data-flow/#3-business-analytics","title":"3. Business Analytics","text":"<ul> <li>User behavior</li> <li>Booking patterns</li> <li>Revenue metrics</li> </ul>"},{"location":"technical/database-schema/","title":"Database Schema","text":"<p>This document outlines the database structure for the Dokkerr application.</p>"},{"location":"technical/database-schema/#database-architecture","title":"Database Architecture","text":"<p>Dokkerr uses PostgreSQL as its primary data store with a carefully designed schema to support the application's features and ensure optimal performance.</p> <pre><code>erDiagram\n    USERS ||--o{ DOCK_OWNER_PROFILES : has\n    USERS ||--o{ BOATER_PROFILES : has\n    USERS ||--o{ LISTINGS : creates\n    USERS ||--o{ BOOKINGS : makes\n    USERS ||--o{ REVIEWS : writes\n    USERS ||--|| CONVERSATIONS : participates\n\n    LISTINGS ||--o{ BOOKINGS : receives\n    LISTINGS ||--o{ REVIEWS : receives\n\n    BOOKINGS ||--o{ REVIEWS : generates\n\n    CONVERSATIONS ||--o{ MESSAGES : contains\n\n    USERS {\n        uuid id PK\n        string email\n        string password_hash\n        string name\n        string user_type\n        string role\n        string phone_number\n        boolean is_admin\n        boolean is_verified\n        string verification_token\n        string reset_token\n        datetime reset_token_expires\n        datetime created_at\n        datetime updated_at\n    }\n\n    DOCK_OWNER_PROFILES {\n        uuid id PK\n        uuid user_id FK\n        string business_name\n        string business_address\n        string tax_id\n        string business_license\n        datetime created_at\n        datetime updated_at\n    }\n\n    BOATER_PROFILES {\n        uuid id PK\n        uuid user_id FK\n        string boat_name\n        string boat_type\n        decimal boat_length\n        decimal boat_beam\n        decimal boat_draft\n        datetime created_at\n        datetime updated_at\n    }\n\n    LISTINGS {\n        uuid id PK\n        uuid owner_id FK\n        string title\n        string description\n        string address\n        decimal latitude\n        decimal longitude\n        decimal base_price\n        string currency\n        string pricing_unit\n        string[] amenities\n        string[] images\n        decimal max_length\n        decimal max_beam\n        decimal max_draft\n        boolean has_power\n        boolean has_water\n        boolean has_fuel\n        date available_from\n        date available_to\n        datetime created_at\n        datetime updated_at\n    }\n\n    BOOKINGS {\n        uuid id PK\n        uuid listing_id FK\n        uuid boater_id FK\n        uuid owner_id FK\n        datetime start_date\n        datetime end_date\n        string status\n        decimal total_price\n        string currency\n        string payment_status\n        datetime created_at\n        datetime updated_at\n    }\n\n    REVIEWS {\n        uuid id PK\n        uuid booking_id FK\n        uuid reviewer_id FK\n        uuid listing_id FK\n        integer rating\n        string comment\n        datetime created_at\n        datetime updated_at\n    }\n\n    CONVERSATIONS {\n        uuid id PK\n        uuid user1_id FK\n        uuid user2_id FK\n        string last_message\n        datetime last_message_at\n        datetime created_at\n        datetime updated_at\n    }\n\n    MESSAGES {\n        uuid id PK\n        uuid conversation_id FK\n        uuid sender_id FK\n        text content\n        datetime read_at\n        datetime created_at\n        datetime updated_at\n    }</code></pre>"},{"location":"technical/database-schema/#table-descriptions","title":"Table Descriptions","text":""},{"location":"technical/database-schema/#users","title":"Users","text":"<p>Stores user authentication and basic profile information. - Added <code>role</code> column to distinguish between regular users and administrators.</p>"},{"location":"technical/database-schema/#dock-owner-profiles","title":"Dock Owner Profiles","text":"<p>Stores additional information specific to dock owners.</p>"},{"location":"technical/database-schema/#boater-profiles","title":"Boater Profiles","text":"<p>Stores information about the boater's vessel.</p>"},{"location":"technical/database-schema/#listings","title":"Listings","text":"<p>Contains dock listing information including location, pricing, and specifications.</p>"},{"location":"technical/database-schema/#bookings","title":"Bookings","text":"<p>Tracks reservations of dock slips by boaters.</p>"},{"location":"technical/database-schema/#reviews","title":"Reviews","text":"<p>Stores ratings and feedback for listings based on completed bookings.</p>"},{"location":"technical/database-schema/#conversations","title":"Conversations","text":"<p>Represents a conversation between two users.</p>"},{"location":"technical/database-schema/#messages","title":"Messages","text":"<p>Contains individual messages within a conversation.</p>"},{"location":"technical/database-schema/#indexes-and-performance-optimizations","title":"Indexes and Performance Optimizations","text":"<p>To ensure optimal query performance, the database includes the following indexes:</p>"},{"location":"technical/database-schema/#location-based-search-indexes","title":"Location-Based Search Indexes","text":"<p><pre><code>CREATE INDEX idx_listings_location ON listings USING gist (\n  ll_to_earth(latitude, longitude)\n);\n</code></pre> This spatial index enables efficient proximity searches for listings near a specified location.</p>"},{"location":"technical/database-schema/#common-query-pattern-indexes","title":"Common Query Pattern Indexes","text":"<pre><code>-- User lookup by email (login/registration)\nCREATE INDEX idx_users_email ON users(email);\n\n-- Listings by owner\nCREATE INDEX idx_listings_owner_id ON listings(owner_id);\n\n-- Listings by availability dates\nCREATE INDEX idx_listings_availability ON listings(available_from, available_to);\n\n-- Bookings by status\nCREATE INDEX idx_bookings_status ON bookings(status);\n\n-- Bookings by date range\nCREATE INDEX idx_bookings_dates ON bookings(start_date, end_date);\n\n-- Bookings by user\nCREATE INDEX idx_bookings_boater_id ON bookings(boater_id);\nCREATE INDEX idx_bookings_owner_id ON bookings(owner_id);\n\n-- Messages by conversation\nCREATE INDEX idx_messages_conversation_id ON messages(conversation_id);\n\n-- Unread messages\nCREATE INDEX idx_messages_read_at ON messages(read_at) WHERE read_at IS NULL;\n\n-- Reviews by listing\nCREATE INDEX idx_reviews_listing_id ON reviews(listing_id);\n</code></pre>"},{"location":"technical/database-schema/#database-triggers","title":"Database Triggers","text":""},{"location":"technical/database-schema/#updated-timestamp-triggers","title":"Updated Timestamp Triggers","text":"<p>Each table includes triggers to automatically update the <code>updated_at</code> timestamp when a record is modified:</p> <pre><code>CREATE OR REPLACE FUNCTION update_updated_at_column()\nRETURNS TRIGGER AS $$\nBEGIN\n    NEW.updated_at = NOW();\n    RETURN NEW;\nEND;\n$$ LANGUAGE plpgsql;\n\nCREATE TRIGGER update_users_updated_at BEFORE UPDATE ON users\nFOR EACH ROW EXECUTE FUNCTION update_updated_at_column();\n</code></pre> <p>Similar triggers exist for all tables.</p>"},{"location":"technical/database-schema/#data-integrity","title":"Data Integrity","text":"<p>The database schema enforces data integrity through:</p> <ol> <li>Foreign Key Constraints: Ensures relationships between tables are maintained</li> <li>Check Constraints: Validates data values (e.g., rating values between 1-5)</li> <li>Not Null Constraints: Ensures required data is provided</li> <li>Unique Constraints: Prevents duplicate records where appropriate</li> </ol>"},{"location":"technical/database-schema/#database-migrations","title":"Database Migrations","text":"<p>Database changes are managed through migration scripts found in <code>src/migrations/</code>. The migration system ensures:</p> <ol> <li>Schema changes are versioned</li> <li>Migrations can be applied sequentially</li> <li>The development environment matches production</li> </ol>"},{"location":"technical/database-schema/#connection-pooling","title":"Connection Pooling","text":"<p>The application uses connection pooling to efficiently manage database connections:</p> <pre><code>const pool = new Pool({\n  connectionString: process.env.DATABASE_URL,\n  ssl: process.env.NODE_ENV === 'production' \n    ? { rejectUnauthorized: false } \n    : false,\n  max: 20, // Maximum number of clients\n  idleTimeoutMillis: 30000,\n  connectionTimeoutMillis: 2000,\n});\n</code></pre>"},{"location":"technical/database/","title":"datauase","text":"<p>This page is under construction.</p>"},{"location":"technical/error-handling/","title":"Error Handling","text":"<p>This document details the error handling strategy and implementation in the Dokkerr application.</p>"},{"location":"technical/error-handling/#error-handling-architecture","title":"Error Handling Architecture","text":"<pre><code>graph TB\n    subgraph Client Layer\n        A[Mobile App]\n        B[Web App]\n        C[Admin Dashboard]\n    end\n\n    subgraph Error Handling Layer\n        D[Error Boundary]\n        E[Error Logger]\n        F[Error Reporter]\n    end\n\n    subgraph Backend Layer\n        G[API Gateway]\n        H[Service Layer]\n        I[Data Layer]\n    end\n\n    subgraph Monitoring Layer\n        J[Error Tracking]\n        K[Alert System]\n        L[Analytics]\n    end\n\n    A --&gt; D\n    B --&gt; D\n    C --&gt; D\n\n    D --&gt; E\n    E --&gt; F\n\n    F --&gt; G\n    G --&gt; H\n    H --&gt; I\n\n    F --&gt; J\n    J --&gt; K\n    J --&gt; L</code></pre>"},{"location":"technical/error-handling/#error-flow","title":"Error Flow","text":"<pre><code>sequenceDiagram\n    participant Client\n    participant ErrorBoundary\n    participant Logger\n    participant Reporter\n    participant Backend\n    participant Monitoring\n\n    Client-&gt;&gt;ErrorBoundary: Error Occurs\n    ErrorBoundary-&gt;&gt;Logger: Log Error\n    Logger-&gt;&gt;Reporter: Report Error\n    Reporter-&gt;&gt;Backend: Send Error Data\n    Reporter-&gt;&gt;Monitoring: Track Error\n    Monitoring-&gt;&gt;Monitoring: Analyze Error\n    Monitoring-&gt;&gt;Monitoring: Generate Alert</code></pre>"},{"location":"technical/error-handling/#error-categories","title":"Error Categories","text":""},{"location":"technical/error-handling/#1-client-side-errors","title":"1. Client-Side Errors","text":"<ul> <li>UI Errors</li> <li>Component Errors</li> <li>State Errors</li> <li>Navigation Errors</li> <li> <p>Form Validation</p> </li> <li> <p>Network Errors</p> </li> <li>Connection Issues</li> <li>Timeout Errors</li> <li>API Errors</li> <li>WebSocket Errors</li> </ul>"},{"location":"technical/error-handling/#2-server-side-errors","title":"2. Server-Side Errors","text":"<ul> <li>Application Errors</li> <li>Business Logic</li> <li>Validation Errors</li> <li>Processing Errors</li> <li> <p>State Conflicts</p> </li> <li> <p>System Errors</p> </li> <li>Database Errors</li> <li>Service Errors</li> <li>Resource Errors</li> <li>Infrastructure Errors</li> </ul>"},{"location":"technical/error-handling/#error-handling-implementation","title":"Error Handling Implementation","text":""},{"location":"technical/error-handling/#1-client-implementation","title":"1. Client Implementation","text":"<pre><code>// Error Boundary Component\nclass ErrorBoundary extends React.Component {\n  state = { hasError: false, error: null };\n\n  static getDerivedStateFromError(error) {\n    return { hasError: true, error };\n  }\n\n  componentDidCatch(error, errorInfo) {\n    ErrorLogger.log(error, errorInfo);\n    ErrorReporter.report(error, errorInfo);\n  }\n\n  render() {\n    if (this.state.hasError) {\n      return &lt;ErrorFallback error={this.state.error} /&gt;;\n    }\n    return this.props.children;\n  }\n}\n\n// Error Logger Service\nclass ErrorLogger {\n  static log(error, context) {\n    console.error(error);\n    // Log to local storage\n    // Log to analytics\n  }\n\n  static report(error, context) {\n    // Send to error tracking service\n    // Generate error report\n  }\n}\n</code></pre>"},{"location":"technical/error-handling/#2-server-implementation","title":"2. Server Implementation","text":"<pre><code>// Error Handler Middleware\nconst errorHandler = (err, req, res, next) =&gt; {\n  // Log error\n  ErrorLogger.log(err);\n\n  // Determine error type\n  const errorType = determineErrorType(err);\n\n  // Generate error response\n  const errorResponse = generateErrorResponse(err, errorType);\n\n  // Report error\n  ErrorReporter.report(err, {\n    request: req,\n    response: errorResponse,\n    context: getErrorContext(err)\n  });\n\n  // Send response\n  res.status(errorResponse.status).json(errorResponse);\n};\n\n// Error Response Generator\nconst generateErrorResponse = (error, type) =&gt; {\n  switch (type) {\n    case 'ValidationError':\n      return {\n        status: 400,\n        code: 'VALIDATION_ERROR',\n        message: error.message\n      };\n    case 'AuthenticationError':\n      return {\n        status: 401,\n        code: 'AUTH_ERROR',\n        message: 'Authentication failed'\n      };\n    case 'AuthorizationError':\n      return {\n        status: 403,\n        code: 'AUTHZ_ERROR',\n        message: 'Not authorized'\n      };\n    default:\n      return {\n        status: 500,\n        code: 'INTERNAL_ERROR',\n        message: 'Internal server error'\n      };\n  }\n};\n</code></pre>"},{"location":"technical/error-handling/#error-monitoring","title":"Error Monitoring","text":""},{"location":"technical/error-handling/#1-error-tracking","title":"1. Error Tracking","text":"<ul> <li>Error Collection</li> <li>Error Details</li> <li>Stack Traces</li> <li>Context Data</li> <li> <p>User Information</p> </li> <li> <p>Error Analysis</p> </li> <li>Error Patterns</li> <li>Impact Assessment</li> <li>Root Cause Analysis</li> <li>Resolution Tracking</li> </ul>"},{"location":"technical/error-handling/#2-alert-system","title":"2. Alert System","text":"<ul> <li>Alert Configuration</li> <li>Error Thresholds</li> <li>Alert Rules</li> <li>Notification Channels</li> <li> <p>Escalation Paths</p> </li> <li> <p>Alert Management</p> </li> <li>Alert Creation</li> <li>Alert Assignment</li> <li>Alert Resolution</li> <li>Alert History</li> </ul>"},{"location":"technical/error-handling/#recovery-procedures","title":"Recovery Procedures","text":""},{"location":"technical/error-handling/#1-automatic-recovery","title":"1. Automatic Recovery","text":"<ul> <li>Client Recovery</li> <li>State Reset</li> <li>Cache Clear</li> <li>Session Refresh</li> <li> <p>Component Reload</p> </li> <li> <p>Server Recovery</p> </li> <li>Service Restart</li> <li>Connection Reset</li> <li>Cache Invalidation</li> <li>State Recovery</li> </ul>"},{"location":"technical/error-handling/#2-manual-recovery","title":"2. Manual Recovery","text":"<ul> <li>User Recovery</li> <li>Error Messages</li> <li>Recovery Steps</li> <li>Support Contact</li> <li> <p>Alternative Options</p> </li> <li> <p>Admin Recovery</p> </li> <li>Error Dashboard</li> <li>Recovery Tools</li> <li>Manual Interventions</li> <li>System Reset</li> </ul>"},{"location":"technical/error-handling/#error-prevention","title":"Error Prevention","text":""},{"location":"technical/error-handling/#1-proactive-measures","title":"1. Proactive Measures","text":"<ul> <li>Input Validation</li> <li>Data Validation</li> <li>Format Checking</li> <li>Range Validation</li> <li> <p>Type Checking</p> </li> <li> <p>State Management</p> </li> <li>State Validation</li> <li>Transition Rules</li> <li>Conflict Detection</li> <li>Consistency Checks</li> </ul>"},{"location":"technical/error-handling/#2-defensive-programming","title":"2. Defensive Programming","text":"<ul> <li>Code Protection</li> <li>Try-Catch Blocks</li> <li>Null Checks</li> <li>Type Guards</li> <li> <p>Boundary Checks</p> </li> <li> <p>Resource Management</p> </li> <li>Connection Pooling</li> <li>Timeout Handling</li> <li>Resource Cleanup</li> <li>Memory Management</li> </ul>"},{"location":"technical/error-handling/#documentation","title":"Documentation","text":""},{"location":"technical/error-handling/#1-error-codes","title":"1. Error Codes","text":"<ul> <li>Client Error Codes</li> <li>UI Error Codes</li> <li>Network Error Codes</li> <li>Validation Error Codes</li> <li> <p>State Error Codes</p> </li> <li> <p>Server Error Codes</p> </li> <li>API Error Codes</li> <li>Database Error Codes</li> <li>Service Error Codes</li> <li>System Error Codes</li> </ul>"},{"location":"technical/error-handling/#2-troubleshooting-guide","title":"2. Troubleshooting Guide","text":"<ul> <li>Common Issues</li> <li>Error Descriptions</li> <li>Root Causes</li> <li>Solutions</li> <li> <p>Prevention</p> </li> <li> <p>Resolution Steps</p> </li> <li>Investigation</li> <li>Diagnosis</li> <li>Fix Implementation</li> <li>Verification </li> </ul>"},{"location":"technical/faq/","title":"faq","text":"<p>This page is under construction.</p>"},{"location":"technical/mobile-app/","title":"Dokkerr Mobile App","text":""},{"location":"technical/mobile-app/#overview","title":"Overview","text":"<p>The Dokkerr mobile app is built using React Native and Expo, providing a native-like experience for both iOS and Android users. The app offers a seamless interface for boaters to find, book, and manage dock rentals, while also enabling dock owners to list and manage their properties.</p>"},{"location":"technical/mobile-app/#tech-stack","title":"Tech Stack","text":"<ul> <li>Framework: React Native with Expo</li> <li>State Management: Redux Toolkit</li> <li>Navigation: React Navigation</li> <li>UI Components: React Native Paper</li> <li>Maps: React Native Maps</li> <li>Authentication: JWT with secure storage</li> <li>API Client: Axios with interceptors</li> <li>Image Handling: React Native Image Picker</li> <li>Push Notifications: Expo Notifications</li> </ul>"},{"location":"technical/mobile-app/#key-features","title":"Key Features","text":""},{"location":"technical/mobile-app/#for-boaters","title":"For Boaters","text":"<ul> <li>Browse available docks with advanced filtering</li> <li>View detailed dock listings with photos and amenities</li> <li>Real-time availability calendar</li> <li>Secure booking process with Stripe integration</li> <li>In-app messaging with dock owners</li> <li>Push notifications for booking updates</li> <li>Offline access to saved listings</li> <li>Boat profile management</li> </ul>"},{"location":"technical/mobile-app/#for-dock-owners","title":"For Dock Owners","text":"<ul> <li>Easy dock listing creation and management</li> <li>Photo upload and management</li> <li>Availability calendar management</li> <li>Booking request handling</li> <li>Revenue tracking and analytics</li> <li>Customer communication</li> <li>Push notifications for new bookings</li> </ul>"},{"location":"technical/mobile-app/#architecture","title":"Architecture","text":""},{"location":"technical/mobile-app/#project-structure","title":"Project Structure","text":"<pre><code>dokkerr-mobile/\n\u251c\u2500\u2500 src/\n\u2502   \u251c\u2500\u2500 api/           # API client and endpoints\n\u2502   \u251c\u2500\u2500 components/    # Reusable UI components\n\u2502   \u251c\u2500\u2500 screens/       # Screen components\n\u2502   \u251c\u2500\u2500 navigation/    # Navigation configuration\n\u2502   \u251c\u2500\u2500 store/         # Redux store and slices\n\u2502   \u251c\u2500\u2500 hooks/         # Custom React hooks\n\u2502   \u251c\u2500\u2500 utils/         # Utility functions\n\u2502   \u251c\u2500\u2500 constants/     # App constants\n\u2502   \u2514\u2500\u2500 types/         # TypeScript types\n\u251c\u2500\u2500 assets/            # Static assets\n\u2514\u2500\u2500 config/           # Configuration files\n</code></pre>"},{"location":"technical/mobile-app/#state-management","title":"State Management","text":"<p>The app uses Redux Toolkit for state management with the following main slices: - Authentication - Dock Listings - Bookings - Messages - User Profile</p>"},{"location":"technical/mobile-app/#navigation","title":"Navigation","text":"<p>The app implements a tab-based navigation with the following main sections: - Home (Dock Listings) - Search - Bookings - Messages - Profile</p>"},{"location":"technical/mobile-app/#security","title":"Security","text":""},{"location":"technical/mobile-app/#authentication","title":"Authentication","text":"<ul> <li>JWT tokens stored securely using Expo SecureStore</li> <li>Biometric authentication option</li> <li>Auto-refresh tokens</li> <li>Secure API communication</li> </ul>"},{"location":"technical/mobile-app/#data-protection","title":"Data Protection","text":"<ul> <li>End-to-end encryption for messages</li> <li>Secure storage for sensitive data</li> <li>Certificate pinning</li> <li>Regular security audits</li> </ul>"},{"location":"technical/mobile-app/#performance-optimization","title":"Performance Optimization","text":""},{"location":"technical/mobile-app/#image-optimization","title":"Image Optimization","text":"<ul> <li>Lazy loading of images</li> <li>Image caching</li> <li>Progressive loading</li> <li>Compression before upload</li> </ul>"},{"location":"technical/mobile-app/#network-optimization","title":"Network Optimization","text":"<ul> <li>Request caching</li> <li>Offline support</li> <li>Background sync</li> <li>Request debouncing</li> </ul>"},{"location":"technical/mobile-app/#testing","title":"Testing","text":""},{"location":"technical/mobile-app/#unit-tests","title":"Unit Tests","text":"<ul> <li>Jest for component testing</li> <li>React Native Testing Library</li> <li>Mock API responses</li> </ul>"},{"location":"technical/mobile-app/#e2e-tests","title":"E2E Tests","text":"<ul> <li>Detox for end-to-end testing</li> <li>Test scenarios for critical flows</li> <li>Automated testing pipeline</li> </ul>"},{"location":"technical/mobile-app/#deployment","title":"Deployment","text":""},{"location":"technical/mobile-app/#app-store","title":"App Store","text":"<ul> <li>Automated builds using EAS Build</li> <li>TestFlight distribution</li> <li>App Store submission process</li> </ul>"},{"location":"technical/mobile-app/#play-store","title":"Play Store","text":"<ul> <li>Internal testing track</li> <li>Beta testing program</li> <li>Production release process</li> </ul>"},{"location":"technical/mobile-app/#monitoring-and-analytics","title":"Monitoring and Analytics","text":""},{"location":"technical/mobile-app/#error-tracking","title":"Error Tracking","text":"<ul> <li>Sentry integration</li> <li>Crash reporting</li> <li>Performance monitoring</li> </ul>"},{"location":"technical/mobile-app/#analytics","title":"Analytics","text":"<ul> <li>User behavior tracking</li> <li>Feature usage metrics</li> <li>Performance metrics</li> </ul>"},{"location":"technical/mobile-app/#future-enhancements","title":"Future Enhancements","text":""},{"location":"technical/mobile-app/#planned-features","title":"Planned Features","text":"<ul> <li>Social sharing integration</li> <li>Advanced search filters</li> <li>Multi-language support</li> <li>Dark mode</li> <li>AR dock preview</li> <li>Weather integration</li> <li>Route planning</li> </ul>"},{"location":"technical/mobile-app/#technical-improvements","title":"Technical Improvements","text":"<ul> <li>Performance optimization</li> <li>Accessibility improvements</li> <li>Offline capabilities</li> <li>Push notification enhancements</li> <li>Deep linking support</li> </ul>"},{"location":"technical/mobile-app/#support-and-maintenance","title":"Support and Maintenance","text":""},{"location":"technical/mobile-app/#bug-reporting","title":"Bug Reporting","text":"<ul> <li>In-app feedback system</li> <li>Crash reporting</li> <li>User feedback collection</li> </ul>"},{"location":"technical/mobile-app/#updates","title":"Updates","text":"<ul> <li>Regular security updates</li> <li>Feature updates</li> <li>Performance improvements</li> <li>Bug fixes</li> </ul>"},{"location":"technical/mobile-app/#getting-started","title":"Getting Started","text":""},{"location":"technical/mobile-app/#prerequisites","title":"Prerequisites","text":"<ul> <li>Node.js 16+</li> <li>Expo CLI</li> <li>iOS Simulator (for Mac)</li> <li>Android Studio (for Android development)</li> </ul>"},{"location":"technical/mobile-app/#installation","title":"Installation","text":"<pre><code># Clone the repository\ngit clone https://github.com/yourusername/dokkerr-mobile.git\n\n# Install dependencies\ncd dokkerr-mobile\nnpm install\n\n# Start the development server\nnpm start\n</code></pre>"},{"location":"technical/mobile-app/#development-workflow","title":"Development Workflow","text":"<ol> <li>Create a feature branch</li> <li>Implement changes</li> <li>Write tests</li> <li>Submit PR for review</li> <li>Merge after approval</li> <li>Deploy to staging</li> <li>Test in production environment</li> <li>Release to stores</li> </ol>"},{"location":"technical/mobile-app/#contributing","title":"Contributing","text":"<p>Please refer to our Contributing Guidelines for details on our code of conduct and the process for submitting pull requests.</p>"},{"location":"technical/mobile-app/#license","title":"License","text":"<p>This project is licensed under the MIT License - see the LICENSE file for details. </p>"},{"location":"technical/notifications/","title":"Notification System","text":""},{"location":"technical/notifications/#overview","title":"Overview","text":"<p>Dokkerr's notification system provides real-time updates and alerts to users through multiple channels: email, in-app notifications, and push notifications. The system is designed to be scalable, reliable, and customizable.</p>"},{"location":"technical/notifications/#email-notifications","title":"Email Notifications","text":""},{"location":"technical/notifications/#setup","title":"Setup","text":"<p>The email service is initialized in <code>src/services/email.ts</code>:</p> <pre><code>import nodemailer from 'nodemailer';\nimport { SESClient } from '@aws-sdk/client-ses';\n\nexport class EmailService {\n  private static transporter: nodemailer.Transporter;\n  private static sesClient: SESClient;\n\n  static initialize() {\n    this.sesClient = new SESClient({\n      region: process.env.AWS_REGION,\n      credentials: {\n        accessKeyId: process.env.AWS_ACCESS_KEY_ID,\n        secretAccessKey: process.env.AWS_SECRET_ACCESS_KEY\n      }\n    });\n\n    this.transporter = nodemailer.createTransport({\n      SES: { ses: this.sesClient, aws: AWS }\n    });\n  }\n}\n</code></pre>"},{"location":"technical/notifications/#email-templates","title":"Email Templates","text":"<p>Located in <code>src/templates/email</code>:</p> <pre><code>export const emailTemplates = {\n  bookingConfirmation: {\n    subject: 'Booking Confirmed - Dokkerr',\n    template: 'booking-confirmation.ejs',\n    data: {\n      booking: BookingType,\n      user: UserType\n    }\n  },\n  paymentReceipt: {\n    subject: 'Payment Receipt - Dokkerr',\n    template: 'payment-receipt.ejs',\n    data: {\n      payment: PaymentType,\n      booking: BookingType\n    }\n  }\n};\n</code></pre>"},{"location":"technical/notifications/#sending-emails","title":"Sending Emails","text":"<pre><code>async function sendEmail(to: string, templateName: string, data: any) {\n  const template = emailTemplates[templateName];\n  const html = await renderTemplate(template.template, data);\n\n  return await transporter.sendMail({\n    from: 'Dokkerr &lt;noreply@dokkerr.com&gt;',\n    to,\n    subject: template.subject,\n    html\n  });\n}\n</code></pre>"},{"location":"technical/notifications/#push-notifications","title":"Push Notifications","text":""},{"location":"technical/notifications/#firebase-configuration","title":"Firebase Configuration","text":"<pre><code>import { initializeApp } from 'firebase-admin/app';\nimport { getMessaging } from 'firebase-admin/messaging';\n\nconst firebaseConfig = {\n  credential: applicationDefault(),\n  projectId: process.env.FIREBASE_PROJECT_ID\n};\n\ninitializeApp(firebaseConfig);\n</code></pre>"},{"location":"technical/notifications/#sending-push-notifications","title":"Sending Push Notifications","text":"<pre><code>async function sendPushNotification(userId: string, notification: NotificationType) {\n  const userDevices = await getUserDevices(userId);\n\n  const message = {\n    notification: {\n      title: notification.title,\n      body: notification.body\n    },\n    data: {\n      type: notification.type,\n      entityId: notification.entityId\n    },\n    tokens: userDevices.map(device =&gt; device.token)\n  };\n\n  return await getMessaging().sendMulticast(message);\n}\n</code></pre>"},{"location":"technical/notifications/#in-app-notifications","title":"In-App Notifications","text":""},{"location":"technical/notifications/#database-schema","title":"Database Schema","text":"<pre><code>CREATE TABLE notifications (\n  id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),\n  user_id UUID NOT NULL REFERENCES users(id),\n  type VARCHAR(50) NOT NULL,\n  title VARCHAR(255) NOT NULL,\n  body TEXT NOT NULL,\n  data JSONB,\n  read BOOLEAN DEFAULT FALSE,\n  created_at TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP,\n  FOREIGN KEY (user_id) REFERENCES users(id)\n);\n</code></pre>"},{"location":"technical/notifications/#notification-types","title":"Notification Types","text":"<pre><code>enum NotificationType {\n  BOOKING_CONFIRMED = 'booking_confirmed',\n  PAYMENT_RECEIVED = 'payment_received',\n  MESSAGE_RECEIVED = 'message_received',\n  REVIEW_RECEIVED = 'review_received',\n  LISTING_UPDATED = 'listing_updated'\n}\n</code></pre>"},{"location":"technical/notifications/#websocket-integration","title":"WebSocket Integration","text":"<pre><code>io.on('connection', (socket) =&gt; {\n  socket.on('notifications:read', async (notificationId) =&gt; {\n    await markNotificationAsRead(notificationId);\n    socket.emit('notifications:updated');\n  });\n\n  socket.on('notifications:subscribe', async () =&gt; {\n    const userId = socket.data.user.id;\n    socket.join(`notifications:${userId}`);\n  });\n});\n</code></pre>"},{"location":"technical/notifications/#notification-templates","title":"Notification Templates","text":""},{"location":"technical/notifications/#template-structure","title":"Template Structure","text":"<pre><code>interface NotificationTemplate {\n  title: string;\n  body: string;\n  data?: Record&lt;string, any&gt;;\n  channels: NotificationChannel[];\n}\n\nconst templates: Record&lt;NotificationType, NotificationTemplate&gt; = {\n  booking_confirmed: {\n    title: 'Booking Confirmed',\n    body: 'Your booking for {{listing.title}} has been confirmed',\n    channels: ['email', 'push', 'in-app']\n  }\n};\n</code></pre>"},{"location":"technical/notifications/#template-rendering","title":"Template Rendering","text":"<pre><code>function renderTemplate(template: NotificationTemplate, data: any) {\n  return {\n    title: Mustache.render(template.title, data),\n    body: Mustache.render(template.body, data),\n    data: template.data\n  };\n}\n</code></pre>"},{"location":"technical/notifications/#notification-queue","title":"Notification Queue","text":""},{"location":"technical/notifications/#queue-configuration","title":"Queue Configuration","text":"<pre><code>import Bull from 'bull';\n\nconst notificationQueue = new Bull('notifications', {\n  redis: {\n    host: process.env.REDIS_HOST,\n    port: parseInt(process.env.REDIS_PORT),\n    password: process.env.REDIS_PASSWORD\n  }\n});\n</code></pre>"},{"location":"technical/notifications/#queue-processing","title":"Queue Processing","text":"<pre><code>notificationQueue.process(async (job) =&gt; {\n  const { userId, type, data } = job.data;\n  const template = templates[type];\n\n  try {\n    // Send notifications through all configured channels\n    await Promise.all(template.channels.map(channel =&gt; \n      sendNotificationByChannel(channel, userId, template, data)\n    ));\n\n    return { success: true };\n  } catch (error) {\n    console.error('Notification processing failed:', error);\n    throw error;\n  }\n});\n</code></pre>"},{"location":"technical/notifications/#user-preferences","title":"User Preferences","text":""},{"location":"technical/notifications/#preference-schema","title":"Preference Schema","text":"<pre><code>interface NotificationPreferences {\n  email: boolean;\n  push: boolean;\n  inApp: boolean;\n  types: {\n    [key in NotificationType]: {\n      enabled: boolean;\n      channels: NotificationChannel[];\n    }\n  }\n}\n</code></pre>"},{"location":"technical/notifications/#preference-management","title":"Preference Management","text":"<pre><code>async function updateNotificationPreferences(\n  userId: string,\n  preferences: Partial&lt;NotificationPreferences&gt;\n) {\n  await db.users.update({\n    where: { id: userId },\n    data: {\n      notificationPreferences: {\n        update: preferences\n      }\n    }\n  });\n}\n</code></pre>"},{"location":"technical/notifications/#monitoring-and-analytics","title":"Monitoring and Analytics","text":""},{"location":"technical/notifications/#metrics-collection","title":"Metrics Collection","text":"<pre><code>class NotificationMetrics {\n  static async collect() {\n    return {\n      totalSent: await getTotalNotificationsSent(),\n      deliveryRate: await calculateDeliveryRate(),\n      channelBreakdown: await getChannelBreakdown(),\n      failureRates: await getFailureRates()\n    };\n  }\n}\n</code></pre>"},{"location":"technical/notifications/#error-tracking","title":"Error Tracking","text":"<pre><code>async function trackNotificationError(error: Error, context: any) {\n  await db.notificationErrors.create({\n    data: {\n      error: error.message,\n      stack: error.stack,\n      context: JSON.stringify(context),\n      timestamp: new Date()\n    }\n  });\n}\n</code></pre>"},{"location":"technical/notifications/#testing","title":"Testing","text":""},{"location":"technical/notifications/#test-environment","title":"Test Environment","text":"<pre><code>const testConfig = {\n  email: {\n    transport: 'ethereal',\n    preview: true\n  },\n  push: {\n    enabled: false\n  },\n  inApp: {\n    enabled: true\n  }\n};\n</code></pre>"},{"location":"technical/notifications/#notification-testing","title":"Notification Testing","text":"<pre><code>describe('Notification System', () =&gt; {\n  it('should send email notifications', async () =&gt; {\n    const result = await sendTestNotification({\n      type: NotificationType.BOOKING_CONFIRMED,\n      channel: 'email'\n    });\n    expect(result.status).toBe('sent');\n  });\n});\n</code></pre>"},{"location":"technical/notifications/#troubleshooting","title":"Troubleshooting","text":"<p>Common issues and solutions:</p> <ol> <li>Email Delivery Issues</li> <li>Check SPF and DKIM records</li> <li>Verify email templates</li> <li> <p>Monitor bounce rates</p> </li> <li> <p>Push Notification Failures</p> </li> <li>Validate Firebase credentials</li> <li>Check device token validity</li> <li> <p>Monitor delivery rates</p> </li> <li> <p>Queue Processing Issues</p> </li> <li>Check Redis connection</li> <li>Monitor queue size</li> <li>Review failed jobs </li> </ol>"},{"location":"technical/overview/","title":"System Architecture Overview","text":""},{"location":"technical/overview/#system-components","title":"System Components","text":""},{"location":"technical/overview/#high-level-architecture","title":"High-Level Architecture","text":"<pre><code>graph TB\n    subgraph \"Client Layer\"\n        A[Mobile App] --&gt; B[API Gateway]\n        C[Web App] --&gt; B\n        D[Admin Dashboard] --&gt; B\n    end\n\n    subgraph \"Application Layer\"\n        B --&gt; E[Load Balancer]\n        E --&gt; F[API Servers]\n        F --&gt; G[WebSocket Servers]\n    end\n\n    subgraph \"Service Layer\"\n        F --&gt; H[Auth Service]\n        F --&gt; I[Payment Service]\n        F --&gt; J[Notification Service]\n        F --&gt; K[Search Service]\n    end\n\n    subgraph \"Data Layer\"\n        H &amp; I &amp; J &amp; K --&gt; L[PostgreSQL]\n        H &amp; I &amp; J &amp; K --&gt; M[Redis]\n        K --&gt; N[Elasticsearch]\n    end\n\n    subgraph \"Storage Layer\"\n        F --&gt; O[S3 Storage]\n        F --&gt; P[CDN]\n    end</code></pre>"},{"location":"technical/overview/#technology-stack","title":"Technology Stack","text":""},{"location":"technical/overview/#frontend-technologies","title":"Frontend Technologies","text":"<pre><code>interface FrontendStack {\n  web: {\n    framework: 'React',\n    stateManagement: 'Redux',\n    styling: 'Tailwind CSS',\n    bundler: 'Vite'\n  };\n  mobile: {\n    framework: 'React Native',\n    stateManagement: 'Redux',\n    navigation: 'React Navigation'\n  };\n  admin: {\n    framework: 'React',\n    uiLibrary: 'Material-UI',\n    charts: 'Chart.js'\n  };\n}\n</code></pre>"},{"location":"technical/overview/#backend-technologies","title":"Backend Technologies","text":"<pre><code>interface BackendStack {\n  api: {\n    runtime: 'Node.js',\n    framework: 'Express',\n    typescript: true\n  };\n  websocket: {\n    library: 'Socket.IO',\n    scaling: 'Redis Adapter'\n  };\n  database: {\n    primary: 'PostgreSQL',\n    cache: 'Redis',\n    search: 'Elasticsearch'\n  };\n  storage: {\n    files: 'AWS S3',\n    cdn: 'CloudFront'\n  };\n}\n</code></pre>"},{"location":"technical/overview/#core-services","title":"Core Services","text":""},{"location":"technical/overview/#authentication-service","title":"Authentication Service","text":"<pre><code>class AuthService {\n  static readonly AUTH_FLOWS = {\n    email: {\n      type: 'password',\n      mfa: true\n    },\n    social: {\n      providers: ['Google', 'Facebook', 'Apple'],\n      mfa: false\n    },\n    apiKey: {\n      type: 'bearer',\n      expiry: '30d'\n    }\n  };\n}\n</code></pre>"},{"location":"technical/overview/#payment-service","title":"Payment Service","text":"<pre><code>class PaymentService {\n  static readonly PAYMENT_PROVIDERS = {\n    stripe: {\n      primary: true,\n      features: ['cards', 'wallets', 'subscriptions']\n    },\n    paypal: {\n      primary: false,\n      features: ['express-checkout']\n    }\n  };\n}\n</code></pre>"},{"location":"technical/overview/#notification-service","title":"Notification Service","text":"<pre><code>class NotificationService {\n  static readonly CHANNELS = {\n    email: {\n      provider: 'AWS SES',\n      templates: true\n    },\n    push: {\n      provider: 'Firebase',\n      platforms: ['iOS', 'Android']\n    },\n    sms: {\n      provider: 'Twilio',\n      features: ['verification']\n    }\n  };\n}\n</code></pre>"},{"location":"technical/overview/#data-architecture","title":"Data Architecture","text":""},{"location":"technical/overview/#database-schema","title":"Database Schema","text":"<pre><code>interface DatabaseSchema {\n  users: {\n    profile: 'User profile information',\n    preferences: 'User settings and preferences',\n    authentication: 'Auth credentials and sessions'\n  };\n  listings: {\n    details: 'Dock listing information',\n    availability: 'Availability calendar',\n    pricing: 'Price and fee structure'\n  };\n  bookings: {\n    reservation: 'Booking details',\n    payment: 'Payment information',\n    status: 'Booking lifecycle status'\n  };\n}\n</code></pre>"},{"location":"technical/overview/#caching-strategy","title":"Caching Strategy","text":"<pre><code>class CacheStrategy {\n  static readonly CACHE_POLICIES = {\n    listings: {\n      ttl: '1h',\n      invalidation: ['update', 'delete']\n    },\n    userProfile: {\n      ttl: '24h',\n      invalidation: ['update']\n    },\n    searchResults: {\n      ttl: '15m',\n      invalidation: ['new-listing']\n    }\n  };\n}\n</code></pre>"},{"location":"technical/overview/#scalability","title":"Scalability","text":""},{"location":"technical/overview/#horizontal-scaling","title":"Horizontal Scaling","text":"<pre><code>interface ScalingConfig {\n  api: {\n    minInstances: 2,\n    maxInstances: 10,\n    metrics: ['cpu', 'memory', 'requests']\n  };\n  websocket: {\n    minInstances: 2,\n    maxInstances: 5,\n    metrics: ['connections', 'memory']\n  };\n  workers: {\n    minInstances: 1,\n    maxInstances: 5,\n    metrics: ['queue-size', 'processing-time']\n  };\n}\n</code></pre>"},{"location":"technical/overview/#load-balancing","title":"Load Balancing","text":"<pre><code>class LoadBalancer {\n  static readonly CONFIGURATION = {\n    algorithm: 'least_connections',\n    healthCheck: {\n      path: '/health',\n      interval: '30s',\n      timeout: '5s',\n      unhealthyThreshold: 2\n    },\n    ssl: {\n      enabled: true,\n      provider: 'Let\\'s Encrypt'\n    }\n  };\n}\n</code></pre>"},{"location":"technical/overview/#security-architecture","title":"Security Architecture","text":""},{"location":"technical/overview/#security-layers","title":"Security Layers","text":"<pre><code>interface SecurityArchitecture {\n  network: {\n    firewall: 'AWS Security Groups',\n    ddosProtection: 'AWS Shield',\n    waf: 'AWS WAF'\n  };\n  application: {\n    authentication: 'JWT + MFA',\n    authorization: 'RBAC',\n    encryption: 'AES-256'\n  };\n  data: {\n    atRest: 'AWS KMS',\n    inTransit: 'TLS 1.3',\n    backup: 'Encrypted S3'\n  };\n}\n</code></pre>"},{"location":"technical/overview/#deployment-architecture","title":"Deployment Architecture","text":""},{"location":"technical/overview/#infrastructure-as-code","title":"Infrastructure as Code","text":"<pre><code>interface InfrastructureConfig {\n  provider: 'AWS',\n  regions: ['us-east-1', 'eu-west-1'],\n  services: {\n    compute: 'ECS',\n    database: 'RDS',\n    cache: 'ElastiCache',\n    storage: 'S3',\n    cdn: 'CloudFront'\n  };\n}\n</code></pre>"},{"location":"technical/overview/#cicd-pipeline","title":"CI/CD Pipeline","text":"<pre><code>class DeploymentPipeline {\n  static readonly STAGES = {\n    build: {\n      steps: ['lint', 'test', 'build'],\n      artifacts: ['app', 'docs']\n    },\n    test: {\n      environments: ['staging'],\n      types: ['unit', 'integration', 'e2e']\n    },\n    deploy: {\n      strategy: 'blue-green',\n      automation: 'GitHub Actions',\n      monitoring: true\n    }\n  };\n}\n</code></pre>"},{"location":"technical/overview/#integration-points","title":"Integration Points","text":""},{"location":"technical/overview/#external-services","title":"External Services","text":"<pre><code>interface ExternalIntegrations {\n  maps: {\n    provider: 'Google Maps',\n    services: ['geocoding', 'places', 'directions']\n  };\n  payments: {\n    providers: ['Stripe', 'PayPal'],\n    features: ['payments', 'refunds', 'disputes']\n  };\n  communications: {\n    email: 'AWS SES',\n    sms: 'Twilio',\n    push: 'Firebase'\n  };\n}\n</code></pre>"},{"location":"technical/overview/#api-integration","title":"API Integration","text":"<pre><code>class APIGateway {\n  static readonly CONFIGURATION = {\n    version: 'v1',\n    format: 'REST',\n    authentication: 'JWT',\n    rateLimit: {\n      window: '15m',\n      max: 100\n    },\n    documentation: 'OpenAPI 3.0'\n  };\n}\n</code></pre>"},{"location":"technical/overview/#monitoring-architecture","title":"Monitoring Architecture","text":""},{"location":"technical/overview/#observability-stack","title":"Observability Stack","text":"<pre><code>interface ObservabilityStack {\n  metrics: {\n    collection: 'Prometheus',\n    visualization: 'Grafana',\n    alerting: 'AlertManager'\n  };\n  logging: {\n    aggregation: 'ELK Stack',\n    storage: 'Elasticsearch',\n    retention: '30d'\n  };\n  tracing: {\n    system: 'Jaeger',\n    sampling: 0.1,\n    retention: '7d'\n  };\n}\n</code></pre>"},{"location":"technical/overview/#disaster-recovery","title":"Disaster Recovery","text":""},{"location":"technical/overview/#backup-strategy","title":"Backup Strategy","text":"<pre><code>interface BackupStrategy {\n  database: {\n    full: 'daily',\n    incremental: '15m',\n    retention: '30d'\n  };\n  files: {\n    frequency: 'real-time',\n    replication: 'cross-region',\n    versioning: true\n  };\n  configuration: {\n    backup: 'daily',\n    retention: '90d'\n  };\n}\n</code></pre>"},{"location":"technical/overview/#future-architecture","title":"Future Architecture","text":""},{"location":"technical/overview/#planned-improvements","title":"Planned Improvements","text":"<ol> <li>Service Mesh Integration</li> <li>Service discovery</li> <li>Traffic management</li> <li> <p>Security policies</p> </li> <li> <p>Event-Driven Architecture</p> </li> <li>Message queues</li> <li>Event sourcing</li> <li> <p>CQRS pattern</p> </li> <li> <p>Machine Learning Integration</p> </li> <li>Recommendation system</li> <li>Fraud detection</li> <li>Dynamic pricing </li> </ol>"},{"location":"technical/payment-processing/","title":"Payment Processing","text":""},{"location":"technical/payment-processing/#overview","title":"Overview","text":"<p>Dokkerr uses Stripe for secure payment processing, supporting both one-time payments for bookings and recurring payments for subscription features. The system is designed to handle multiple currencies and payment methods while ensuring PCI compliance.</p>"},{"location":"technical/payment-processing/#stripe-integration","title":"Stripe Integration","text":""},{"location":"technical/payment-processing/#setup","title":"Setup","text":"<p>The payment service is initialized in <code>src/services/payment.ts</code>:</p> <pre><code>import Stripe from 'stripe';\n\nexport class PaymentService {\n  private static stripe: Stripe;\n\n  static initialize() {\n    this.stripe = new Stripe(process.env.STRIPE_SECRET_KEY, {\n      apiVersion: '2023-10-16',\n      typescript: true\n    });\n  }\n}\n</code></pre>"},{"location":"technical/payment-processing/#configuration","title":"Configuration","text":"<p>Required environment variables: <pre><code>STRIPE_SECRET_KEY=sk_test_...\nSTRIPE_PUBLISHABLE_KEY=pk_test_...\nSTRIPE_WEBHOOK_SECRET=whsec_...\n</code></pre></p>"},{"location":"technical/payment-processing/#payment-flow","title":"Payment Flow","text":""},{"location":"technical/payment-processing/#1-payment-intent-creation","title":"1. Payment Intent Creation","text":"<p>When a user initiates a booking:</p> <pre><code>async function createPaymentIntent(booking) {\n  const paymentIntent = await stripe.paymentIntents.create({\n    amount: calculateAmount(booking),\n    currency: 'usd',\n    metadata: {\n      bookingId: booking.id,\n      listingId: booking.listingId\n    }\n  });\n\n  return paymentIntent.client_secret;\n}\n</code></pre>"},{"location":"technical/payment-processing/#2-client-side-integration","title":"2. Client-Side Integration","text":"<pre><code>const stripe = Stripe(STRIPE_PUBLISHABLE_KEY);\nconst elements = stripe.elements();\n\n// Create payment element\nconst paymentElement = elements.create('payment');\npaymentElement.mount('#payment-element');\n\n// Handle payment submission\nconst result = await stripe.confirmPayment({\n  elements,\n  confirmParams: {\n    return_url: `${window.location.origin}/booking/confirm`\n  }\n});\n</code></pre>"},{"location":"technical/payment-processing/#3-payment-confirmation","title":"3. Payment Confirmation","text":"<pre><code>async function confirmPayment(paymentIntentId) {\n  const paymentIntent = await stripe.paymentIntents.retrieve(paymentIntentId);\n\n  if (paymentIntent.status === 'succeeded') {\n    await updateBookingStatus(paymentIntent.metadata.bookingId, 'confirmed');\n    await notifyUsers(paymentIntent.metadata.bookingId);\n  }\n}\n</code></pre>"},{"location":"technical/payment-processing/#security-measures","title":"Security Measures","text":""},{"location":"technical/payment-processing/#1-pci-compliance","title":"1. PCI Compliance","text":"<ul> <li>Stripe Elements for secure card collection</li> <li>No card data touches our servers</li> <li>Regular security audits</li> </ul>"},{"location":"technical/payment-processing/#2-fraud-prevention","title":"2. Fraud Prevention","text":"<pre><code>const fraudPreventionRules = {\n  maxAmountPerDay: 10000,\n  maxTransactionsPerHour: 5,\n  requiredVerification: ['email', 'phone']\n};\n\nasync function validateTransaction(userId, amount) {\n  const dailyTotal = await getDailyTransactionTotal(userId);\n  const hourlyCount = await getHourlyTransactionCount(userId);\n\n  if (dailyTotal + amount &gt; fraudPreventionRules.maxAmountPerDay) {\n    throw new Error('Daily transaction limit exceeded');\n  }\n\n  if (hourlyCount &gt;= fraudPreventionRules.maxTransactionsPerHour) {\n    throw new Error('Hourly transaction limit exceeded');\n  }\n}\n</code></pre>"},{"location":"technical/payment-processing/#3-webhook-security","title":"3. Webhook Security","text":"<pre><code>app.post('/stripe/webhook', express.raw({ type: 'application/json' }), (req, res) =&gt; {\n  const sig = req.headers['stripe-signature'];\n\n  try {\n    const event = stripe.webhooks.constructEvent(\n      req.body,\n      sig,\n      process.env.STRIPE_WEBHOOK_SECRET\n    );\n\n    handleStripeEvent(event);\n    res.json({ received: true });\n  } catch (err) {\n    res.status(400).send(`Webhook Error: ${err.message}`);\n  }\n});\n</code></pre>"},{"location":"technical/payment-processing/#payment-methods","title":"Payment Methods","text":""},{"location":"technical/payment-processing/#supported-payment-methods","title":"Supported Payment Methods","text":"<ol> <li>Credit/Debit Cards</li> <li>Visa</li> <li>Mastercard</li> <li>American Express</li> <li> <p>Discover</p> </li> <li> <p>Digital Wallets</p> </li> <li>Apple Pay</li> <li>Google Pay</li> <li>PayPal</li> </ol>"},{"location":"technical/payment-processing/#configuration_1","title":"Configuration","text":"<pre><code>const paymentMethodConfig = {\n  card: {\n    enabled: true,\n    requiresCVC: true,\n    requires3DS: true\n  },\n  applepay: {\n    enabled: true,\n    merchantId: process.env.APPLE_MERCHANT_ID\n  },\n  googlepay: {\n    enabled: true,\n    merchantId: process.env.GOOGLE_MERCHANT_ID\n  }\n};\n</code></pre>"},{"location":"technical/payment-processing/#error-handling","title":"Error Handling","text":""},{"location":"technical/payment-processing/#common-error-scenarios","title":"Common Error Scenarios","text":"<pre><code>class PaymentError extends Error {\n  constructor(code, message, details = {}) {\n    super(message);\n    this.code = code;\n    this.details = details;\n  }\n}\n\nasync function handlePaymentError(error) {\n  switch (error.type) {\n    case 'card_error':\n      // Handle card-specific errors\n      await notifyUser(error.message);\n      break;\n    case 'validation_error':\n      // Handle validation errors\n      await logValidationError(error);\n      break;\n    case 'api_error':\n      // Handle Stripe API errors\n      await notifyAdmin(error);\n      break;\n  }\n}\n</code></pre>"},{"location":"technical/payment-processing/#refund-processing","title":"Refund Processing","text":""},{"location":"technical/payment-processing/#refund-flow","title":"Refund Flow","text":"<pre><code>async function processRefund(bookingId) {\n  const booking = await getBooking(bookingId);\n  const paymentIntent = await stripe.paymentIntents.retrieve(booking.paymentIntentId);\n\n  const refund = await stripe.refunds.create({\n    payment_intent: paymentIntent.id,\n    reason: 'requested_by_customer'\n  });\n\n  await updateBookingStatus(bookingId, 'refunded');\n  await notifyUsers(bookingId, 'refund_processed');\n\n  return refund;\n}\n</code></pre>"},{"location":"technical/payment-processing/#monitoring-and-reporting","title":"Monitoring and Reporting","text":""},{"location":"technical/payment-processing/#transaction-monitoring","title":"Transaction Monitoring","text":"<pre><code>class PaymentMonitor {\n  static async getMetrics() {\n    return {\n      dailyVolume: await calculateDailyVolume(),\n      successRate: await calculateSuccessRate(),\n      averageTransactionValue: await calculateAverageValue(),\n      failureReasons: await getFailureReasons()\n    };\n  }\n}\n</code></pre>"},{"location":"technical/payment-processing/#financial-reports","title":"Financial Reports","text":"<pre><code>async function generateFinancialReport(startDate, endDate) {\n  const report = await stripe.reporting.reportRuns.create({\n    report_type: 'balance_change_from_activity.itemized.1',\n    parameters: {\n      interval_start: startDate,\n      interval_end: endDate\n    }\n  });\n\n  return report;\n}\n</code></pre>"},{"location":"technical/payment-processing/#testing","title":"Testing","text":""},{"location":"technical/payment-processing/#test-cards","title":"Test Cards","text":"Card Number Description 4242424242424242 Successful payment 4000000000009995 Declined payment 4000002500003155 Requires authentication"},{"location":"technical/payment-processing/#test-mode","title":"Test Mode","text":"<pre><code>const isTestMode = process.env.NODE_ENV !== 'production';\n\nif (isTestMode) {\n  console.log('Payment system running in test mode');\n  // Use test API keys and webhooks\n}\n</code></pre>"},{"location":"technical/payment-processing/#troubleshooting","title":"Troubleshooting","text":"<p>Common issues and solutions:</p> <ol> <li>Payment Declined</li> <li>Check card details</li> <li>Verify sufficient funds</li> <li> <p>Check 3DS requirements</p> </li> <li> <p>Webhook Failures</p> </li> <li>Verify webhook signature</li> <li>Check endpoint availability</li> <li> <p>Monitor webhook logs</p> </li> <li> <p>Refund Issues</p> </li> <li>Verify payment status</li> <li>Check refund eligibility</li> <li>Monitor refund timeline </li> </ol>"},{"location":"technical/reviews/","title":"Review System","text":""},{"location":"technical/reviews/#overview","title":"Overview","text":"<p>Dokkerr's review system enables users to provide feedback and ratings for listings and other users. The system includes features for review submission, moderation, rating calculations, and reporting inappropriate content.</p>"},{"location":"technical/reviews/#database-schema","title":"Database Schema","text":""},{"location":"technical/reviews/#reviews-table","title":"Reviews Table","text":"<pre><code>CREATE TABLE reviews (\n  id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),\n  author_id UUID NOT NULL REFERENCES users(id),\n  target_id UUID NOT NULL,\n  target_type VARCHAR(20) NOT NULL CHECK (target_type IN ('listing', 'user')),\n  rating INTEGER NOT NULL CHECK (rating BETWEEN 1 AND 5),\n  comment TEXT,\n  status VARCHAR(20) DEFAULT 'pending' CHECK (status IN ('pending', 'approved', 'rejected')),\n  created_at TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP,\n  updated_at TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP,\n  UNIQUE(author_id, target_id, target_type)\n);\n\nCREATE INDEX reviews_target_idx ON reviews(target_id, target_type);\nCREATE INDEX reviews_author_idx ON reviews(author_id);\n</code></pre>"},{"location":"technical/reviews/#review-responses","title":"Review Responses","text":"<pre><code>CREATE TABLE review_responses (\n  id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),\n  review_id UUID NOT NULL REFERENCES reviews(id),\n  author_id UUID NOT NULL REFERENCES users(id),\n  comment TEXT NOT NULL,\n  created_at TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP,\n  FOREIGN KEY (review_id) REFERENCES reviews(id) ON DELETE CASCADE\n);\n</code></pre>"},{"location":"technical/reviews/#review-management","title":"Review Management","text":""},{"location":"technical/reviews/#submission","title":"Submission","text":"<pre><code>interface ReviewSubmission {\n  targetId: string;\n  targetType: 'listing' | 'user';\n  rating: number;\n  comment: string;\n}\n\nasync function submitReview(authorId: string, review: ReviewSubmission) {\n  // Verify eligibility\n  await verifyReviewEligibility(authorId, review.targetId);\n\n  // Create review\n  const newReview = await db.reviews.create({\n    data: {\n      authorId,\n      targetId: review.targetId,\n      targetType: review.targetType,\n      rating: review.rating,\n      comment: review.comment,\n      status: 'pending'\n    }\n  });\n\n  // Trigger moderation\n  await moderateReview(newReview.id);\n\n  // Update target rating\n  await updateTargetRating(review.targetId, review.targetType);\n\n  return newReview;\n}\n</code></pre>"},{"location":"technical/reviews/#moderation","title":"Moderation","text":"<pre><code>class ReviewModerator {\n  static async moderateReview(reviewId: string) {\n    const review = await db.reviews.findUnique({\n      where: { id: reviewId }\n    });\n\n    const moderationResult = await this.analyzeContent(review.comment);\n\n    if (moderationResult.isApproved) {\n      await this.approveReview(reviewId);\n    } else {\n      await this.rejectReview(reviewId, moderationResult.reason);\n    }\n  }\n\n  static async analyzeContent(comment: string) {\n    // Check for inappropriate content\n    const toxicity = await this.checkToxicity(comment);\n    const spam = await this.checkSpam(comment);\n\n    return {\n      isApproved: toxicity.score &lt; 0.7 &amp;&amp; !spam.isSpam,\n      reason: toxicity.score &gt;= 0.7 ? 'toxic_content' : \n              spam.isSpam ? 'spam_detected' : null\n    };\n  }\n}\n</code></pre>"},{"location":"technical/reviews/#rating-calculation","title":"Rating Calculation","text":""},{"location":"technical/reviews/#aggregate-ratings","title":"Aggregate Ratings","text":"<pre><code>async function calculateAggregateRating(targetId: string, targetType: string) {\n  const ratings = await db.reviews.findMany({\n    where: {\n      targetId,\n      targetType,\n      status: 'approved'\n    },\n    select: {\n      rating: true,\n      createdAt: true\n    }\n  });\n\n  const weightedRatings = ratings.map(r =&gt; ({\n    rating: r.rating,\n    weight: calculateWeight(r.createdAt)\n  }));\n\n  return {\n    average: calculateWeightedAverage(weightedRatings),\n    total: ratings.length,\n    distribution: calculateDistribution(ratings)\n  };\n}\n\nfunction calculateWeight(createdAt: Date) {\n  const age = Date.now() - createdAt.getTime();\n  const ageInDays = age / (1000 * 60 * 60 * 24);\n  return Math.exp(-0.1 * ageInDays); // Exponential decay\n}\n</code></pre>"},{"location":"technical/reviews/#rating-updates","title":"Rating Updates","text":"<pre><code>async function updateTargetRating(targetId: string, targetType: string) {\n  const rating = await calculateAggregateRating(targetId, targetType);\n\n  if (targetType === 'listing') {\n    await db.listings.update({\n      where: { id: targetId },\n      data: {\n        rating: rating.average,\n        totalReviews: rating.total,\n        ratingDistribution: rating.distribution\n      }\n    });\n  } else {\n    await db.users.update({\n      where: { id: targetId },\n      data: {\n        rating: rating.average,\n        totalReviews: rating.total\n      }\n    });\n  }\n}\n</code></pre>"},{"location":"technical/reviews/#review-api","title":"Review API","text":""},{"location":"technical/reviews/#endpoints","title":"Endpoints","text":"<pre><code>// Submit a review\nrouter.post('/api/reviews', auth, async (req, res) =&gt; {\n  const review = await submitReview(req.user.id, req.body);\n  res.json({ status: 'success', data: review });\n});\n\n// Get reviews for a target\nrouter.get('/api/reviews/:targetId', async (req, res) =&gt; {\n  const reviews = await getTargetReviews(\n    req.params.targetId,\n    req.query.targetType,\n    req.query.page\n  );\n  res.json({ status: 'success', data: reviews });\n});\n\n// Update a review\nrouter.put('/api/reviews/:id', auth, async (req, res) =&gt; {\n  const review = await updateReview(req.params.id, req.body);\n  res.json({ status: 'success', data: review });\n});\n</code></pre>"},{"location":"technical/reviews/#review-display","title":"Review Display","text":""},{"location":"technical/reviews/#review-component","title":"Review Component","text":"<pre><code>interface ReviewProps {\n  review: {\n    id: string;\n    author: {\n      id: string;\n      name: string;\n      avatar: string;\n    };\n    rating: number;\n    comment: string;\n    createdAt: Date;\n    responses: ReviewResponse[];\n  };\n  onResponse: (comment: string) =&gt; Promise&lt;void&gt;;\n}\n\nfunction ReviewComponent({ review, onResponse }: ReviewProps) {\n  return (\n    &lt;div className=\"review\"&gt;\n      &lt;div className=\"review-header\"&gt;\n        &lt;Avatar src={review.author.avatar} /&gt;\n        &lt;div className=\"review-meta\"&gt;\n          &lt;h4&gt;{review.author.name}&lt;/h4&gt;\n          &lt;StarRating value={review.rating} /&gt;\n          &lt;time&gt;{formatDate(review.createdAt)}&lt;/time&gt;\n        &lt;/div&gt;\n      &lt;/div&gt;\n      &lt;div className=\"review-content\"&gt;\n        &lt;p&gt;{review.comment}&lt;/p&gt;\n      &lt;/div&gt;\n      &lt;div className=\"review-responses\"&gt;\n        {review.responses.map(response =&gt; (\n          &lt;ResponseComponent key={response.id} response={response} /&gt;\n        ))}\n      &lt;/div&gt;\n    &lt;/div&gt;\n  );\n}\n</code></pre>"},{"location":"technical/reviews/#review-analytics","title":"Review Analytics","text":""},{"location":"technical/reviews/#metrics-collection","title":"Metrics Collection","text":"<pre><code>class ReviewAnalytics {\n  static async getMetrics() {\n    return {\n      totalReviews: await this.getTotalReviews(),\n      averageRating: await this.getAverageRating(),\n      moderationStats: await this.getModerationStats(),\n      responseRate: await this.getResponseRate()\n    };\n  }\n\n  static async getModerationStats() {\n    const stats = await db.reviews.groupBy({\n      by: ['status'],\n      _count: true\n    });\n\n    return {\n      approved: stats.find(s =&gt; s.status === 'approved')?._count || 0,\n      rejected: stats.find(s =&gt; s.status === 'rejected')?._count || 0,\n      pending: stats.find(s =&gt; s.status === 'pending')?._count || 0\n    };\n  }\n}\n</code></pre>"},{"location":"technical/reviews/#review-notifications","title":"Review Notifications","text":""},{"location":"technical/reviews/#notification-triggers","title":"Notification Triggers","text":"<pre><code>async function notifyReviewSubmission(review) {\n  // Notify target\n  await notificationService.send({\n    userId: review.targetId,\n    type: 'review_received',\n    data: {\n      reviewId: review.id,\n      rating: review.rating\n    }\n  });\n\n  // Notify admins if flagged\n  if (review.status === 'flagged') {\n    await notificationService.sendToAdmins({\n      type: 'review_flagged',\n      data: {\n        reviewId: review.id,\n        reason: review.flagReason\n      }\n    });\n  }\n}\n</code></pre>"},{"location":"technical/reviews/#testing","title":"Testing","text":""},{"location":"technical/reviews/#review-tests","title":"Review Tests","text":"<pre><code>describe('Review System', () =&gt; {\n  it('should submit a review', async () =&gt; {\n    const review = await submitReview(userId, {\n      targetId: listingId,\n      targetType: 'listing',\n      rating: 5,\n      comment: 'Great experience!'\n    });\n\n    expect(review.status).toBe('pending');\n    expect(review.authorId).toBe(userId);\n  });\n\n  it('should calculate correct rating', async () =&gt; {\n    const rating = await calculateAggregateRating(listingId, 'listing');\n    expect(rating.average).toBeGreaterThan(0);\n    expect(rating.average).toBeLessThanOrEqual(5);\n  });\n});\n</code></pre>"},{"location":"technical/reviews/#troubleshooting","title":"Troubleshooting","text":"<p>Common issues and solutions:</p> <ol> <li>Review Submission Issues</li> <li>Verify user eligibility</li> <li>Check rate limiting</li> <li> <p>Validate input data</p> </li> <li> <p>Rating Calculation Issues</p> </li> <li>Check for missing reviews</li> <li>Verify weight calculation</li> <li> <p>Monitor update triggers</p> </li> <li> <p>Moderation Problems</p> </li> <li>Review moderation logs</li> <li>Check content filters</li> <li>Verify notification delivery </li> </ol>"},{"location":"technical/search/","title":"Search System","text":""},{"location":"technical/search/#overview","title":"Overview","text":"<p>Dokkerr's search system provides powerful location-based search capabilities for finding dock listings. The system uses PostgreSQL with PostGIS for geospatial queries and Elasticsearch for full-text search, offering fast and accurate results with various filtering options.</p>"},{"location":"technical/search/#geospatial-search","title":"Geospatial Search","text":""},{"location":"technical/search/#database-schema","title":"Database Schema","text":"<pre><code>CREATE EXTENSION postgis;\n\nCREATE TABLE listings (\n  id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),\n  title VARCHAR(255) NOT NULL,\n  description TEXT,\n  location GEOGRAPHY(POINT, 4326),\n  address TEXT,\n  city VARCHAR(100),\n  state VARCHAR(2),\n  zip VARCHAR(10),\n  created_at TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP\n);\n\nCREATE INDEX listings_location_idx ON listings USING GIST (location);\n</code></pre>"},{"location":"technical/search/#location-queries","title":"Location Queries","text":"<pre><code>async function searchNearby(lat: number, lng: number, radius: number) {\n  const query = `\n    SELECT \n      id,\n      title,\n      ST_Distance(\n        location,\n        ST_SetSRID(ST_MakePoint($1, $2), 4326)\n      ) as distance\n    FROM listings\n    WHERE ST_DWithin(\n      location,\n      ST_SetSRID(ST_MakePoint($1, $2), 4326),\n      $3\n    )\n    ORDER BY distance\n    LIMIT 50\n  `;\n\n  return await db.query(query, [lng, lat, radius]);\n}\n</code></pre>"},{"location":"technical/search/#elasticsearch-integration","title":"Elasticsearch Integration","text":""},{"location":"technical/search/#index-configuration","title":"Index Configuration","text":"<pre><code>const listingIndex = {\n  mappings: {\n    properties: {\n      id: { type: 'keyword' },\n      title: { \n        type: 'text',\n        analyzer: 'english'\n      },\n      description: {\n        type: 'text',\n        analyzer: 'english'\n      },\n      amenities: { type: 'keyword' },\n      location: { type: 'geo_point' },\n      price: { type: 'float' },\n      length: { type: 'integer' },\n      width: { type: 'integer' }\n    }\n  }\n};\n</code></pre>"},{"location":"technical/search/#search-implementation","title":"Search Implementation","text":"<pre><code>async function searchListings(params: SearchParams) {\n  const query = {\n    bool: {\n      must: [\n        params.keyword &amp;&amp; {\n          multi_match: {\n            query: params.keyword,\n            fields: ['title^2', 'description']\n          }\n        },\n        params.location &amp;&amp; {\n          geo_distance: {\n            distance: `${params.radius}mi`,\n            location: {\n              lat: params.location.lat,\n              lon: params.location.lng\n            }\n          }\n        }\n      ].filter(Boolean),\n      filter: [\n        params.minPrice &amp;&amp; { range: { price: { gte: params.minPrice } } },\n        params.maxPrice &amp;&amp; { range: { price: { lte: params.maxPrice } } },\n        params.amenities &amp;&amp; { terms: { amenities: params.amenities } }\n      ].filter(Boolean)\n    }\n  };\n\n  return await elasticsearch.search({\n    index: 'listings',\n    body: { query }\n  });\n}\n</code></pre>"},{"location":"technical/search/#search-api","title":"Search API","text":""},{"location":"technical/search/#endpoints","title":"Endpoints","text":"<pre><code>router.get('/api/search', async (req, res) =&gt; {\n  const params = {\n    keyword: req.query.q,\n    location: {\n      lat: parseFloat(req.query.lat),\n      lng: parseFloat(req.query.lng)\n    },\n    radius: parseInt(req.query.radius) || 10,\n    minPrice: parseFloat(req.query.minPrice),\n    maxPrice: parseFloat(req.query.maxPrice),\n    amenities: req.query.amenities?.split(','),\n    sortBy: req.query.sortBy || 'distance'\n  };\n\n  const results = await searchListings(params);\n  res.json(results);\n});\n</code></pre>"},{"location":"technical/search/#response-format","title":"Response Format","text":"<pre><code>interface SearchResponse {\n  hits: {\n    total: number;\n    hits: Array&lt;{\n      _id: string;\n      _source: {\n        title: string;\n        description: string;\n        price: number;\n        location: {\n          lat: number;\n          lon: number;\n        };\n        distance?: number;\n        amenities: string[];\n      };\n    }&gt;;\n  };\n  aggregations?: {\n    price_ranges: {\n      buckets: Array&lt;{\n        key: string;\n        doc_count: number;\n      }&gt;;\n    };\n  };\n}\n</code></pre>"},{"location":"technical/search/#search-optimization","title":"Search Optimization","text":""},{"location":"technical/search/#indexing-strategy","title":"Indexing Strategy","text":"<pre><code>class SearchIndexer {\n  static async indexListing(listing: Listing) {\n    const document = {\n      id: listing.id,\n      title: listing.title,\n      description: listing.description,\n      location: {\n        lat: listing.latitude,\n        lon: listing.longitude\n      },\n      price: listing.pricePerDay,\n      amenities: listing.amenities,\n      lastUpdated: new Date()\n    };\n\n    await elasticsearch.index({\n      index: 'listings',\n      id: listing.id,\n      body: document\n    });\n  }\n}\n</code></pre>"},{"location":"technical/search/#bulk-indexing","title":"Bulk Indexing","text":"<pre><code>async function bulkIndexListings(listings: Listing[]) {\n  const operations = listings.flatMap(listing =&gt; [\n    { index: { _index: 'listings', _id: listing.id } },\n    {\n      id: listing.id,\n      title: listing.title,\n      // ... other fields\n    }\n  ]);\n\n  return await elasticsearch.bulk({ body: operations });\n}\n</code></pre>"},{"location":"technical/search/#search-filters","title":"Search Filters","text":""},{"location":"technical/search/#filter-implementation","title":"Filter Implementation","text":"<pre><code>interface SearchFilters {\n  priceRange: {\n    min: number;\n    max: number;\n  };\n  amenities: string[];\n  boatSize: {\n    length: number;\n    width: number;\n  };\n  availability: {\n    startDate: Date;\n    endDate: Date;\n  };\n}\n\nfunction buildFilters(filters: SearchFilters) {\n  return {\n    bool: {\n      filter: [\n        {\n          range: {\n            price: {\n              gte: filters.priceRange.min,\n              lte: filters.priceRange.max\n            }\n          }\n        },\n        {\n          terms: {\n            amenities: filters.amenities\n          }\n        },\n        {\n          range: {\n            length: { gte: filters.boatSize.length }\n          }\n        },\n        {\n          range: {\n            width: { gte: filters.boatSize.width }\n          }\n        }\n      ]\n    }\n  };\n}\n</code></pre>"},{"location":"technical/search/#caching","title":"Caching","text":""},{"location":"technical/search/#redis-cache-implementation","title":"Redis Cache Implementation","text":"<pre><code>import Redis from 'ioredis';\n\nconst redis = new Redis({\n  host: process.env.REDIS_HOST,\n  port: parseInt(process.env.REDIS_PORT),\n  password: process.env.REDIS_PASSWORD\n});\n\nasync function getCachedSearch(key: string) {\n  const cached = await redis.get(key);\n  return cached ? JSON.parse(cached) : null;\n}\n\nasync function cacheSearch(key: string, results: any) {\n  await redis.set(key, JSON.stringify(results), 'EX', 3600);\n}\n</code></pre>"},{"location":"technical/search/#monitoring","title":"Monitoring","text":""},{"location":"technical/search/#search-analytics","title":"Search Analytics","text":"<pre><code>class SearchAnalytics {\n  static async track(params: SearchParams, results: SearchResponse) {\n    await db.searchLogs.create({\n      data: {\n        query: params,\n        resultCount: results.hits.total,\n        timestamp: new Date(),\n        executionTime: results.took\n      }\n    });\n  }\n\n  static async getMetrics() {\n    return {\n      averageResponseTime: await calculateAverageResponseTime(),\n      popularSearches: await getPopularSearches(),\n      zeroResultQueries: await getZeroResultQueries()\n    };\n  }\n}\n</code></pre>"},{"location":"technical/search/#performance-monitoring","title":"Performance Monitoring","text":"<pre><code>class SearchMonitor {\n  static async checkHealth() {\n    return {\n      elasticsearch: await checkElasticsearchHealth(),\n      postgis: await checkPostGISHealth(),\n      cache: await checkRedisHealth(),\n      indices: await getIndicesStats()\n    };\n  }\n}\n</code></pre>"},{"location":"technical/search/#testing","title":"Testing","text":""},{"location":"technical/search/#search-tests","title":"Search Tests","text":"<pre><code>describe('Search System', () =&gt; {\n  it('should return nearby listings', async () =&gt; {\n    const results = await searchNearby(25.7617, -80.1918, 10);\n    expect(results.hits.length).toBeGreaterThan(0);\n    expect(results.hits[0].distance).toBeLessThan(10);\n  });\n\n  it('should filter by amenities', async () =&gt; {\n    const results = await searchListings({\n      amenities: ['power', 'water']\n    });\n    expect(results.hits.every(hit =&gt; \n      hit._source.amenities.includes('power') &amp;&amp;\n      hit._source.amenities.includes('water')\n    )).toBe(true);\n  });\n});\n</code></pre>"},{"location":"technical/search/#troubleshooting","title":"Troubleshooting","text":"<p>Common issues and solutions:</p> <ol> <li>Slow Queries</li> <li>Check index optimization</li> <li>Verify query complexity</li> <li> <p>Monitor cache hit rates</p> </li> <li> <p>Inconsistent Results</p> </li> <li>Verify index synchronization</li> <li>Check mapping configuration</li> <li> <p>Review analyzer settings</p> </li> <li> <p>Geospatial Issues</p> </li> <li>Validate coordinate formats</li> <li>Check PostGIS installation</li> <li>Verify spatial index </li> </ol>"},{"location":"technical/security/","title":"Security Architecture","text":"<p>This document outlines the security architecture and implementation details of the Dokkerr application.</p>"},{"location":"technical/security/#security-layers","title":"Security Layers","text":"<pre><code>graph TB\n    subgraph External Layer\n        A[Client Applications]\n        B[API Gateway]\n        C[Load Balancer]\n    end\n\n    subgraph Security Layer\n        D[WAF]\n        E[Rate Limiter]\n        F[Auth Service]\n        G[Encryption Service]\n    end\n\n    subgraph Application Layer\n        H[API Services]\n        I[Business Logic]\n        J[Data Access]\n    end\n\n    subgraph Data Layer\n        K[(Encrypted DB)]\n        L[(Secure Cache)]\n        M[(Secure Storage)]\n    end\n\n    A --&gt; B\n    B --&gt; C\n\n    C --&gt; D\n    D --&gt; E\n    E --&gt; F\n    F --&gt; G\n\n    G --&gt; H\n    H --&gt; I\n    I --&gt; J\n\n    J --&gt; K\n    J --&gt; L\n    J --&gt; M</code></pre>"},{"location":"technical/security/#authentication-flow","title":"Authentication Flow","text":"<pre><code>sequenceDiagram\n    participant User\n    participant App\n    participant Auth\n    participant DB\n\n    User-&gt;&gt;App: Login Request\n    App-&gt;&gt;Auth: POST /auth/login\n    Auth-&gt;&gt;DB: Validate Credentials\n    DB--&gt;&gt;Auth: Valid Credentials\n    Auth-&gt;&gt;Auth: Generate JWT\n    Auth--&gt;&gt;App: JWT Token\n\n    Note over App: Store Token\n\n    App-&gt;&gt;Auth: Protected Request\n    Auth-&gt;&gt;Auth: Validate JWT\n    Auth--&gt;&gt;App: Valid Token</code></pre>"},{"location":"technical/security/#authorization-model","title":"Authorization Model","text":"<pre><code>graph LR\n    subgraph User Roles\n        A[Admin]\n        B[Dock Owner]\n        C[Renter]\n        D[Guest]\n    end\n\n    subgraph Permissions\n        E[Manage Users]\n        F[Manage Docks]\n        G[Create Bookings]\n        H[View Reports]\n        I[Manage Payments]\n    end\n\n    A --&gt; E\n    A --&gt; F\n    A --&gt; H\n    A --&gt; I\n\n    B --&gt; F\n    B --&gt; H\n\n    C --&gt; G\n\n    D --&gt; H</code></pre>"},{"location":"technical/security/#security-implementation","title":"Security Implementation","text":""},{"location":"technical/security/#1-authentication","title":"1. Authentication","text":"<ul> <li>JWT Implementation</li> <li>Token-based authentication</li> <li>Refresh token mechanism</li> <li>Token revocation</li> <li> <p>Token rotation</p> </li> <li> <p>Multi-factor Authentication</p> </li> <li>SMS verification</li> <li>Email verification</li> <li>Authenticator apps</li> <li>Biometric authentication</li> </ul>"},{"location":"technical/security/#2-authorization","title":"2. Authorization","text":"<ul> <li>Role-Based Access Control (RBAC)</li> <li>User roles</li> <li>Permission sets</li> <li>Resource access</li> <li> <p>API authorization</p> </li> <li> <p>Resource-Level Security</p> </li> <li>Object-level permissions</li> <li>Data isolation</li> <li>Access control lists</li> <li>Policy enforcement</li> </ul>"},{"location":"technical/security/#3-data-protection","title":"3. Data Protection","text":"<ul> <li>Encryption</li> <li>Data at rest</li> <li>Data in transit</li> <li>Key management</li> <li> <p>Certificate management</p> </li> <li> <p>Secure Storage</p> </li> <li>Encrypted databases</li> <li>Secure file storage</li> <li>Secure caching</li> <li>Backup encryption</li> </ul>"},{"location":"technical/security/#security-measures","title":"Security Measures","text":""},{"location":"technical/security/#1-network-security","title":"1. Network Security","text":"<ul> <li>Firewall Rules</li> <li>Inbound traffic control</li> <li>Outbound traffic control</li> <li>Port management</li> <li> <p>IP filtering</p> </li> <li> <p>DDoS Protection</p> </li> <li>Rate limiting</li> <li>Traffic filtering</li> <li>Load balancing</li> <li>Traffic scrubbing</li> </ul>"},{"location":"technical/security/#2-application-security","title":"2. Application Security","text":"<ul> <li>Input Validation</li> <li>Request validation</li> <li>Data sanitization</li> <li>SQL injection prevention</li> <li> <p>XSS prevention</p> </li> <li> <p>API Security</p> </li> <li>API key management</li> <li>Request signing</li> <li>Rate limiting</li> <li>Request validation</li> </ul>"},{"location":"technical/security/#3-monitoring-and-logging","title":"3. Monitoring and Logging","text":"<ul> <li>Security Monitoring</li> <li>Intrusion detection</li> <li>Anomaly detection</li> <li>Log analysis</li> <li> <p>Alert management</p> </li> <li> <p>Audit Logging</p> </li> <li>User actions</li> <li>System events</li> <li>Security events</li> <li>Compliance logging</li> </ul>"},{"location":"technical/security/#compliance-and-standards","title":"Compliance and Standards","text":""},{"location":"technical/security/#1-data-protection","title":"1. Data Protection","text":"<ul> <li>GDPR compliance</li> <li>CCPA compliance</li> <li>Data retention</li> <li>Data deletion</li> </ul>"},{"location":"technical/security/#2-security-standards","title":"2. Security Standards","text":"<ul> <li>OWASP compliance</li> <li>PCI DSS requirements</li> <li>ISO 27001</li> <li>SOC 2</li> </ul>"},{"location":"technical/security/#3-privacy","title":"3. Privacy","text":"<ul> <li>Privacy policy</li> <li>Data handling</li> <li>User consent</li> <li>Data sharing</li> </ul>"},{"location":"technical/security/#incident-response","title":"Incident Response","text":""},{"location":"technical/security/#1-security-incidents","title":"1. Security Incidents","text":"<ul> <li>Incident detection</li> <li>Response procedures</li> <li>Communication plan</li> <li>Recovery process</li> </ul>"},{"location":"technical/security/#2-data-breaches","title":"2. Data Breaches","text":"<ul> <li>Breach detection</li> <li>Containment</li> <li>Investigation</li> <li>Notification</li> </ul>"},{"location":"technical/security/#3-recovery","title":"3. Recovery","text":"<ul> <li>System recovery</li> <li>Data recovery</li> <li>Service restoration</li> <li>Post-incident review </li> </ul>"},{"location":"technical/short-id-system/","title":"Short ID System Documentation","text":""},{"location":"technical/short-id-system/#overview","title":"Overview","text":"<p>The Dokkerr application implements a dual-identifier system that combines the security benefits of UUIDs with the usability advantages of shorter identifiers. This document explains how the system works, its implementation details, and how to use it effectively.</p>"},{"location":"technical/short-id-system/#core-concepts","title":"Core Concepts","text":""},{"location":"technical/short-id-system/#why-use-both-uuids-and-short-ids","title":"Why Use Both UUIDs and Short IDs?","text":"<ul> <li>UUIDs (Universally Unique Identifiers): 36-character strings that provide guaranteed uniqueness across distributed systems, but are cumbersome for users to read, remember, or type.</li> <li>Short IDs: 8-character identifiers derived from UUIDs that are more user-friendly while maintaining sufficient uniqueness for practical purposes.</li> </ul>"},{"location":"technical/short-id-system/#implementation-approach","title":"Implementation Approach","text":"<p>Our approach retains UUIDs as primary keys in the database while adding <code>short_id</code> columns that store the first 8 hexadecimal characters of the UUID (with hyphens removed). This gives us:</p> <ol> <li>Database integrity through genuinely unique UUIDs</li> <li>User-friendly short IDs in the UI and URLs</li> <li>Backward compatibility with existing code</li> </ol>"},{"location":"technical/short-id-system/#database-schema","title":"Database Schema","text":"<p>The system adds a <code>short_id</code> column to the following tables:</p> <pre><code>-- Users table\nALTER TABLE users ADD COLUMN short_id VARCHAR(8) UNIQUE;\n\n-- Listings table\nALTER TABLE listings ADD COLUMN short_id VARCHAR(8) UNIQUE;\n\n-- Bookings table\nALTER TABLE bookings ADD COLUMN short_id VARCHAR(8) UNIQUE;\n</code></pre> <p>Each short ID is indexed for fast lookups and has a UNIQUE constraint to prevent collisions.</p>"},{"location":"technical/short-id-system/#how-to-use-short-ids","title":"How to Use Short IDs","text":""},{"location":"technical/short-id-system/#in-urls-and-routes","title":"In URLs and Routes","text":"<p>All API routes and frontend URLs support both short IDs and full UUIDs:</p> <pre><code>/api/users/12ab34cd      // Using short ID\n/api/users/123e4567-e89b-12d3-a456-426614174000  // Using UUID\n</code></pre>"},{"location":"technical/short-id-system/#in-database-queries","title":"In Database Queries","text":"<p>Models automatically handle both formats:</p> <pre><code>// Both of these work for the same user\nconst user1 = await User.findById('12ab34cd');        // Short ID\nconst user2 = await User.findById('123e4567-e89b-12d3-a456-426614174000');  // UUID\n</code></pre>"},{"location":"technical/short-id-system/#in-the-user-interface","title":"In the User Interface","text":"<p>The admin dashboard displays short IDs with tooltips showing the full UUID when hovered:</p> <pre><code>&lt;span class=\"id-short\" data-bs-toggle=\"tooltip\" title=\"Full UUID\"&gt;12ab34cd&lt;/span&gt;\n</code></pre>"},{"location":"technical/short-id-system/#technical-implementation","title":"Technical Implementation","text":""},{"location":"technical/short-id-system/#id-generation","title":"ID Generation","text":"<p>When creating new records, the system:</p> <ol> <li>Generates a UUID using the <code>uuid</code> package</li> <li>Extracts the first 8 characters (with hyphens removed) to create the short ID</li> <li>Stores both in the database</li> </ol> <pre><code>const { v4: uuidv4 } = require('uuid');\n\nfunction generateIds() {\n  const id = uuidv4();\n  const shortId = id.replace(/-/g, '').substring(0, 8);\n  return { id, shortId };\n}\n</code></pre>"},{"location":"technical/short-id-system/#id-resolution","title":"ID Resolution","text":"<p>When looking up records, the system determines which field to query based on the format:</p> <pre><code>function isShortId(id) {\n  return id &amp;&amp; id.length === 8 &amp;&amp; !id.includes('-');\n}\n\nasync function findById(id) {\n  let query;\n\n  if (isShortId(id)) {\n    query = 'SELECT * FROM users WHERE short_id = $1';\n  } else {\n    query = 'SELECT * FROM users WHERE id = $1';\n  }\n\n  // Execute query...\n}\n</code></pre>"},{"location":"technical/short-id-system/#migration-process","title":"Migration Process","text":""},{"location":"technical/short-id-system/#for-new-installations","title":"For New Installations","text":"<p>The <code>short_id</code> columns are created as part of the standard migration process.</p>"},{"location":"technical/short-id-system/#for-existing-installations","title":"For Existing Installations","text":"<p>For existing installations with data, run:</p> <pre><code>npm run setup-short-ids\n</code></pre> <p>This script: 1. Adds the necessary <code>short_id</code> columns to the tables 2. Generates short IDs for all existing records</p>"},{"location":"technical/short-id-system/#best-practices","title":"Best Practices","text":"<ol> <li>API Responses: Always include both <code>id</code> and <code>shortId</code> in API responses</li> <li>URLs: Use short IDs in URLs for better usability</li> <li>Internal Processing: For join operations and internal lookups, prefer UUIDs</li> <li>User Display: Always show short IDs in the UI, with full UUIDs available on hover or click</li> </ol>"},{"location":"technical/short-id-system/#troubleshooting","title":"Troubleshooting","text":"<p>If you encounter issues with ID resolution:</p> <ol> <li>Verify that the short ID generation has been run (<code>npm run generate-short-ids</code>)</li> <li>Ensure that all model methods are using the ID resolution helpers</li> <li>Check for null values in the <code>short_id</code> columns</li> </ol>"},{"location":"technical/short-id-system/#technical-reference","title":"Technical Reference","text":""},{"location":"technical/short-id-system/#key-files","title":"Key Files","text":"<ul> <li><code>src/utils/idUtils.js</code>: Core utility functions for ID generation and verification</li> <li><code>src/db/migrations/add_short_id_to_tables.js</code>: Database migration for adding short ID columns</li> <li><code>src/db/scripts/generate_short_ids.js</code>: Script for generating short IDs for existing records</li> <li><code>src/models/User.js</code>, <code>src/models/Listing.js</code>, etc.: Model implementations using the short ID system</li> </ul>"},{"location":"technical/short-id-system/#npm-scripts","title":"NPM Scripts","text":"<ul> <li><code>npm run setup-short-ids</code>: Run full setup (migrations + ID generation)</li> <li><code>npm run generate-short-ids</code>: Generate short IDs for existing records only </li> </ul>"},{"location":"technical/system-design/","title":"System Design","text":"<p>This document details the system design of the Dokkerr application, including component interactions, data flow, and architectural decisions.</p>"},{"location":"technical/system-design/#component-architecture","title":"Component Architecture","text":"<pre><code>graph TB\n    subgraph Client Layer\n        A[Mobile App]\n        B[Web App]\n        C[Admin Dashboard]\n    end\n\n    subgraph API Gateway\n        D[Load Balancer]\n        E[Rate Limiter]\n        F[Request Router]\n    end\n\n    subgraph Application Layer\n        G[Auth Service]\n        H[Booking Service]\n        I[Payment Service]\n        J[Notification Service]\n    end\n\n    subgraph Data Layer\n        K[(PostgreSQL)]\n        L[(Redis)]\n        M[(MongoDB)]\n    end\n\n    subgraph External Services\n        N[Stripe]\n        O[Firebase]\n        P[Google Maps]\n        Q[AWS S3]\n    end\n\n    A --&gt; D\n    B --&gt; D\n    C --&gt; D\n\n    D --&gt; E\n    E --&gt; F\n\n    F --&gt; G\n    F --&gt; H\n    F --&gt; I\n    F --&gt; J\n\n    G --&gt; K\n    H --&gt; K\n    I --&gt; K\n    J --&gt; L\n\n    H --&gt; M\n\n    I --&gt; N\n    G --&gt; O\n    H --&gt; P\n    H --&gt; Q</code></pre>"},{"location":"technical/system-design/#service-communication","title":"Service Communication","text":"<pre><code>sequenceDiagram\n    participant User\n    participant API\n    participant Auth\n    participant Booking\n    participant Payment\n    participant DB\n\n    User-&gt;&gt;API: Request Booking\n    API-&gt;&gt;Auth: Validate Token\n    Auth-&gt;&gt;DB: Check Permissions\n    Auth--&gt;&gt;API: Token Valid\n\n    API-&gt;&gt;Booking: Create Booking\n    Booking-&gt;&gt;DB: Check Availability\n    Booking-&gt;&gt;Payment: Process Payment\n    Payment-&gt;&gt;DB: Update Status\n\n    Booking--&gt;&gt;API: Booking Confirmed\n    API--&gt;&gt;User: Booking Details</code></pre>"},{"location":"technical/system-design/#data-flow-architecture","title":"Data Flow Architecture","text":"<pre><code>flowchart LR\n    subgraph Input Layer\n        A[User Input]\n        B[API Requests]\n        C[WebSocket Events]\n    end\n\n    subgraph Processing Layer\n        D[Input Validation]\n        E[Business Logic]\n        F[Data Transformation]\n    end\n\n    subgraph Storage Layer\n        G[(Primary DB)]\n        H[(Cache)]\n        I[(File Storage)]\n    end\n\n    A --&gt; D\n    B --&gt; D\n    C --&gt; D\n\n    D --&gt; E\n    E --&gt; F\n\n    F --&gt; G\n    F --&gt; H\n    F --&gt; I</code></pre>"},{"location":"technical/system-design/#key-design-decisions","title":"Key Design Decisions","text":""},{"location":"technical/system-design/#1-microservices-architecture","title":"1. Microservices Architecture","text":"<ul> <li>Rationale: Independent scaling, technology flexibility, and fault isolation</li> <li>Implementation: Containerized services with Docker and Kubernetes</li> <li>Communication: REST APIs and WebSocket for real-time features</li> </ul>"},{"location":"technical/system-design/#2-data-storage-strategy","title":"2. Data Storage Strategy","text":"<ul> <li>Primary Database: PostgreSQL for relational data</li> <li>Cache Layer: Redis for session management and frequently accessed data</li> <li>Document Store: MongoDB for flexible schema requirements</li> <li>File Storage: AWS S3 for media and document storage</li> </ul>"},{"location":"technical/system-design/#3-security-implementation","title":"3. Security Implementation","text":"<ul> <li>Authentication: JWT with refresh tokens</li> <li>Authorization: Role-based access control (RBAC)</li> <li>Data Protection: End-to-end encryption for sensitive data</li> <li>API Security: Rate limiting and request validation</li> </ul>"},{"location":"technical/system-design/#4-scalability-approach","title":"4. Scalability Approach","text":"<ul> <li>Horizontal Scaling: Stateless services for easy replication</li> <li>Load Balancing: Round-robin with health checks</li> <li>Caching Strategy: Multi-level caching with CDN</li> <li>Database Scaling: Read replicas and connection pooling</li> </ul>"},{"location":"technical/system-design/#5-monitoring-and-observability","title":"5. Monitoring and Observability","text":"<ul> <li>Metrics Collection: Prometheus for system metrics</li> <li>Logging: ELK stack for centralized logging</li> <li>Tracing: OpenTelemetry for distributed tracing</li> <li>Alerting: Grafana for visualization and alerts</li> </ul>"},{"location":"technical/system-design/#performance-considerations","title":"Performance Considerations","text":""},{"location":"technical/system-design/#1-response-time-optimization","title":"1. Response Time Optimization","text":"<ul> <li>API response time target: &lt; 200ms</li> <li>Database query optimization</li> <li>Caching strategy implementation</li> <li>CDN integration for static assets</li> </ul>"},{"location":"technical/system-design/#2-resource-utilization","title":"2. Resource Utilization","text":"<ul> <li>CPU utilization target: &lt; 70%</li> <li>Memory usage optimization</li> <li>Database connection pooling</li> <li>Background job processing</li> </ul>"},{"location":"technical/system-design/#3-scalability-metrics","title":"3. Scalability Metrics","text":"<ul> <li>Target concurrent users: 100,000+</li> <li>API requests per second: 10,000+</li> <li>Database transactions per second: 5,000+</li> <li>Cache hit ratio: &gt; 90%</li> </ul>"},{"location":"technical/system-design/#deployment-strategy","title":"Deployment Strategy","text":""},{"location":"technical/system-design/#1-infrastructure","title":"1. Infrastructure","text":"<ul> <li>Cloud provider: AWS</li> <li>Container orchestration: Kubernetes</li> <li>CI/CD: GitHub Actions</li> <li>Monitoring: Prometheus + Grafana</li> </ul>"},{"location":"technical/system-design/#2-environment-management","title":"2. Environment Management","text":"<ul> <li>Development</li> <li>Staging</li> <li>Production</li> <li>Disaster Recovery</li> </ul>"},{"location":"technical/system-design/#3-release-process","title":"3. Release Process","text":"<ul> <li>Blue-green deployment</li> <li>Automated testing</li> <li>Rollback procedures</li> <li>Feature flags </li> </ul>"},{"location":"technical/troubleshooting/","title":"trouuleshooting","text":"<p>This page is under construction.</p>"},{"location":"technical/websocket/","title":"WebSocket Integration","text":""},{"location":"technical/websocket/#overview","title":"Overview","text":"<p>Dokkerr uses WebSocket technology to provide real-time features such as instant messaging, live notifications, and booking status updates. The implementation uses Socket.IO for reliable real-time bidirectional communication.</p>"},{"location":"technical/websocket/#connection","title":"Connection","text":""},{"location":"technical/websocket/#server-setup","title":"Server Setup","text":"<p>The WebSocket server is initialized in <code>src/services/websocket.ts</code>:</p> <pre><code>import { Server } from 'socket.io';\nimport { createServer } from 'http';\n\nexport class WebSocketService {\n  private static io: Server;\n\n  static initialize(httpServer) {\n    this.io = new Server(httpServer, {\n      cors: {\n        origin: process.env.FRONTEND_URL,\n        credentials: true\n      }\n    });\n\n    this.setupEventHandlers();\n  }\n}\n</code></pre>"},{"location":"technical/websocket/#client-connection","title":"Client Connection","text":"<p>Connect to the WebSocket server from the client:</p> <pre><code>import { io } from 'socket.io-client';\n\nconst socket = io('http://localhost:5174', {\n  withCredentials: true\n});\n\nsocket.on('connect', () =&gt; {\n  console.log('Connected to WebSocket server');\n});\n</code></pre>"},{"location":"technical/websocket/#events","title":"Events","text":""},{"location":"technical/websocket/#system-events","title":"System Events","text":"Event Description Direction <code>connect</code> Client connected Server \u2192 Client <code>disconnect</code> Client disconnected Server \u2192 Client <code>error</code> Error occurred Server \u2192 Client"},{"location":"technical/websocket/#message-events","title":"Message Events","text":"Event Description Payload <code>message.new</code> New message <code>{ messageId, senderId, content, timestamp }</code> <code>message.read</code> Message read <code>{ messageId, readAt }</code> <code>message.typing</code> User typing <code>{ userId, conversationId }</code>"},{"location":"technical/websocket/#booking-events","title":"Booking Events","text":"Event Description Payload <code>booking.created</code> New booking <code>{ bookingId, listingId, status }</code> <code>booking.updated</code> Status change <code>{ bookingId, status, timestamp }</code> <code>booking.cancelled</code> Cancellation <code>{ bookingId, reason }</code>"},{"location":"technical/websocket/#payment-events","title":"Payment Events","text":"Event Description Payload <code>payment.processing</code> Payment started <code>{ paymentId, amount }</code> <code>payment.completed</code> Payment success <code>{ paymentId, status }</code> <code>payment.failed</code> Payment failed <code>{ paymentId, error }</code>"},{"location":"technical/websocket/#implementation","title":"Implementation","text":""},{"location":"technical/websocket/#authentication","title":"Authentication","text":"<p>WebSocket connections are authenticated using JWT tokens:</p> <pre><code>io.use((socket, next) =&gt; {\n  const token = socket.handshake.auth.token;\n  if (!token) {\n    return next(new Error('Authentication error'));\n  }\n\n  try {\n    const decoded = jwt.verify(token, process.env.JWT_SECRET);\n    socket.data.user = decoded;\n    next();\n  } catch (error) {\n    next(new Error('Invalid token'));\n  }\n});\n</code></pre>"},{"location":"technical/websocket/#room-management","title":"Room Management","text":"<p>Users are automatically joined to relevant rooms:</p> <pre><code>socket.on('connect', async () =&gt; {\n  const userId = socket.data.user.id;\n\n  // Join user's private room\n  socket.join(`user:${userId}`);\n\n  // Join rooms for user's active bookings\n  const bookings = await getActiveBookings(userId);\n  bookings.forEach(booking =&gt; {\n    socket.join(`booking:${booking.id}`);\n  });\n});\n</code></pre>"},{"location":"technical/websocket/#error-handling","title":"Error Handling","text":"<pre><code>socket.on('error', (error) =&gt; {\n  console.error('WebSocket error:', error);\n  socket.emit('error', {\n    message: 'An error occurred',\n    code: error.code\n  });\n});\n</code></pre>"},{"location":"technical/websocket/#best-practices","title":"Best Practices","text":"<ol> <li>Connection Management</li> <li>Implement reconnection logic</li> <li>Handle disconnections gracefully</li> <li> <p>Monitor connection health</p> </li> <li> <p>Performance</p> </li> <li>Use binary data when appropriate</li> <li>Implement message queuing for offline clients</li> <li> <p>Optimize payload size</p> </li> <li> <p>Security</p> </li> <li>Validate all incoming messages</li> <li>Implement rate limiting</li> <li>Use secure WebSocket (wss://)</li> </ol>"},{"location":"technical/websocket/#example-usage","title":"Example Usage","text":""},{"location":"technical/websocket/#sending-messages","title":"Sending Messages","text":"<pre><code>// Client-side\nsocket.emit('message.new', {\n  recipientId: '123e4567',\n  content: 'Hello!',\n  type: 'text'\n});\n\n// Server-side\nsocket.on('message.new', async (data) =&gt; {\n  const message = await saveMessage(data);\n  io.to(`user:${data.recipientId}`).emit('message.new', message);\n});\n</code></pre>"},{"location":"technical/websocket/#booking-updates","title":"Booking Updates","text":"<pre><code>// Server-side booking status update\nio.to(`booking:${bookingId}`).emit('booking.updated', {\n  bookingId,\n  status: 'confirmed',\n  timestamp: new Date()\n});\n\n// Client-side booking status listener\nsocket.on('booking.updated', (data) =&gt; {\n  updateBookingStatus(data.bookingId, data.status);\n});\n</code></pre>"},{"location":"technical/websocket/#monitoring","title":"Monitoring","text":"<p>The WebSocket service includes monitoring capabilities:</p> <pre><code>class WebSocketMonitor {\n  static getMetrics() {\n    return {\n      connections: io.engine.clientsCount,\n      rooms: io.sockets.adapter.rooms.size,\n      events: eventCounter.getMetrics()\n    };\n  }\n}\n</code></pre>"},{"location":"technical/websocket/#troubleshooting","title":"Troubleshooting","text":"<p>Common issues and solutions:</p> <ol> <li>Connection Failed</li> <li>Check CORS configuration</li> <li>Verify authentication token</li> <li> <p>Ensure server is running</p> </li> <li> <p>Message Not Received</p> </li> <li>Verify room membership</li> <li>Check event name spelling</li> <li> <p>Confirm payload format</p> </li> <li> <p>Performance Issues</p> </li> <li>Monitor message queue size</li> <li>Check server resources</li> <li>Optimize payload size </li> </ol>"},{"location":"user-guide/dock-owners/","title":"dock owners","text":"<p>This page is under construction.</p>"},{"location":"user-guide/renters/","title":"renters","text":"<p>This page is under construction.</p>"}]}